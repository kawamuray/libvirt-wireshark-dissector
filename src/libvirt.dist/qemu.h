/* This file was automatically generated by libvirt-wireshark-dissector/util/genxdrdef.pl. *DO NOT MODIFY* this file directly. */
#ifndef _QEMU_H_
#define _QEMU_H_
static int hf_qemu_domain_monitor_command_args = -1;
static gint ett_qemu_domain_monitor_command_args = -1;
static gboolean dissect_xdr_qemu_domain_monitor_command_args(tvbuff_t *tvb, proto_item *ti, XDR *xdrs, int hf)
{
    goffset start, incr;
    proto_tree *tree;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    tree = proto_item_add_subtree(ti, ett_qemu_domain_monitor_command_args);
    hf = hf_qemu_domain_monitor_command_args;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "dom: ");
    if (!dissect_xdr_remote_nonnull_domain(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "cmd: ");
    if (!dissect_xdr_remote_nonnull_string(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "flags: ");
    if (!dissect_xdr_u_int(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    return TRUE;
}
static int hf_qemu_domain_monitor_command_ret = -1;
static gint ett_qemu_domain_monitor_command_ret = -1;
static gboolean dissect_xdr_qemu_domain_monitor_command_ret(tvbuff_t *tvb, proto_item *ti, XDR *xdrs, int hf)
{
    goffset start, incr;
    proto_tree *tree;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    tree = proto_item_add_subtree(ti, ett_qemu_domain_monitor_command_ret);
    hf = hf_qemu_domain_monitor_command_ret;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "result: ");
    if (!dissect_xdr_remote_nonnull_string(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    return TRUE;
}
static int hf_qemu_domain_attach_args = -1;
static gint ett_qemu_domain_attach_args = -1;
static gboolean dissect_xdr_qemu_domain_attach_args(tvbuff_t *tvb, proto_item *ti, XDR *xdrs, int hf)
{
    goffset start, incr;
    proto_tree *tree;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    tree = proto_item_add_subtree(ti, ett_qemu_domain_attach_args);
    hf = hf_qemu_domain_attach_args;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "pid_value: ");
    if (!dissect_xdr_u_int(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "flags: ");
    if (!dissect_xdr_u_int(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    return TRUE;
}
static int hf_qemu_domain_attach_ret = -1;
static gint ett_qemu_domain_attach_ret = -1;
static gboolean dissect_xdr_qemu_domain_attach_ret(tvbuff_t *tvb, proto_item *ti, XDR *xdrs, int hf)
{
    goffset start, incr;
    proto_tree *tree;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    tree = proto_item_add_subtree(ti, ett_qemu_domain_attach_ret);
    hf = hf_qemu_domain_attach_ret;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "dom: ");
    if (!dissect_xdr_remote_nonnull_domain(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    return TRUE;
}
static int hf_qemu_domain_agent_command_args = -1;
static gint ett_qemu_domain_agent_command_args = -1;
static gboolean dissect_xdr_qemu_domain_agent_command_args(tvbuff_t *tvb, proto_item *ti, XDR *xdrs, int hf)
{
    goffset start, incr;
    proto_tree *tree;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    tree = proto_item_add_subtree(ti, ett_qemu_domain_agent_command_args);
    hf = hf_qemu_domain_agent_command_args;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "dom: ");
    if (!dissect_xdr_remote_nonnull_domain(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "cmd: ");
    if (!dissect_xdr_remote_nonnull_string(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "timeout: ");
    if (!dissect_xdr_int(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "flags: ");
    if (!dissect_xdr_u_int(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    return TRUE;
}
static int hf_qemu_domain_agent_command_ret = -1;
static gint ett_qemu_domain_agent_command_ret = -1;
static gboolean dissect_xdr_qemu_domain_agent_command_ret(tvbuff_t *tvb, proto_item *ti, XDR *xdrs, int hf)
{
    goffset start, incr;
    proto_tree *tree;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    tree = proto_item_add_subtree(ti, ett_qemu_domain_agent_command_ret);
    hf = hf_qemu_domain_agent_command_ret;
    
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_set_text(ti, "result: ");
    if (!dissect_xdr_remote_string(tvb, ti, xdrs, hf)) return FALSE;
    incr = xdr_getpos(xdrs) - start + VIR_HEADER_LEN;
    proto_item_set_len(ti, incr);
    start += incr;
    return TRUE;
}
#define QEMU_PROGRAM (0x20008087)
#define QEMU_PROTOCOL_VERSION (1)
static const vir_proc_payload_t qemu_dissectors[] = {
    { 1, dissect_xdr_qemu_domain_monitor_command_args, dissect_xdr_qemu_domain_monitor_command_ret, NULL },
    { 2, dissect_xdr_qemu_domain_attach_args, dissect_xdr_qemu_domain_attach_ret, NULL },
    { 3, dissect_xdr_qemu_domain_agent_command_args, dissect_xdr_qemu_domain_agent_command_ret, NULL },
};
static const value_string qemu_procedure_strings[] = {
    { 1, "DOMAIN_MONITOR_COMMAND" },
    { 2, "DOMAIN_ATTACH" },
    { 3, "DOMAIN_AGENT_COMMAND" },
    { 0, NULL }
};
#endif /* _QEMU_H_ */
