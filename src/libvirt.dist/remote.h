/* This file was automatically generated by libvirt-wireshark-dissector/util/genxdrdef.pl. *DO NOT MODIFY* this file directly. */
#ifndef _REMOTE_H_
#define _REMOTE_H_
#define REMOTE_STRING_MAX (4194304)
static int hf_remote_nonnull_string = -1;
static gboolean dissect_xdr_remote_nonnull_string(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    return dissect_xdr_string(tvb, tree, xdrs, hf, REMOTE_STRING_MAX);
}
static int hf_remote_string = -1;
static gboolean dissect_xdr_remote_string(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    return dissect_xdr_pointer(tvb, tree, xdrs, hf, dissect_xdr_remote_nonnull_string);
}
#define REMOTE_DOMAIN_ID_LIST_MAX (16384)
#define REMOTE_DOMAIN_NAME_LIST_MAX (16384)
#define REMOTE_CPUMAP_MAX (2048)
#define REMOTE_VCPUINFO_MAX (16384)
#define REMOTE_CPUMAPS_MAX (8388608)
#define REMOTE_MIGRATE_COOKIE_MAX (16384)
#define REMOTE_NETWORK_NAME_LIST_MAX (16384)
#define REMOTE_INTERFACE_NAME_LIST_MAX (16384)
#define REMOTE_DEFINED_INTERFACE_NAME_LIST_MAX (16384)
#define REMOTE_STORAGE_POOL_NAME_LIST_MAX (4096)
#define REMOTE_STORAGE_VOL_NAME_LIST_MAX (16384)
#define REMOTE_NODE_DEVICE_NAME_LIST_MAX (16384)
#define REMOTE_NODE_DEVICE_CAPS_LIST_MAX (65536)
#define REMOTE_NWFILTER_NAME_LIST_MAX (1024)
#define REMOTE_DOMAIN_SCHEDULER_PARAMETERS_MAX (16)
#define REMOTE_DOMAIN_BLKIO_PARAMETERS_MAX (16)
#define REMOTE_DOMAIN_MEMORY_PARAMETERS_MAX (16)
#define REMOTE_DOMAIN_BLOCK_IO_TUNE_PARAMETERS_MAX (16)
#define REMOTE_DOMAIN_NUMA_PARAMETERS_MAX (16)
#define REMOTE_NODE_CPU_STATS_MAX (16)
#define REMOTE_NODE_MEMORY_STATS_MAX (16)
#define REMOTE_DOMAIN_BLOCK_STATS_PARAMETERS_MAX (16)
#define REMOTE_NODE_MAX_CELLS (1024)
#define REMOTE_AUTH_SASL_DATA_MAX (65536)
#define REMOTE_AUTH_TYPE_LIST_MAX (20)
#define REMOTE_DOMAIN_MEMORY_STATS_MAX (1024)
#define REMOTE_DOMAIN_SNAPSHOT_LIST_NAMES_MAX (1024)
#define REMOTE_DOMAIN_BLOCK_PEEK_BUFFER_MAX (4194304)
#define REMOTE_DOMAIN_MEMORY_PEEK_BUFFER_MAX (4194304)
#define REMOTE_SECURITY_LABEL_LIST_MAX (64)
#define REMOTE_SECURITY_MODEL_MAX (VIR_SECURITY_MODEL_BUFLEN)
#define REMOTE_SECURITY_LABEL_MAX (VIR_SECURITY_LABEL_BUFLEN)
#define REMOTE_SECURITY_DOI_MAX (VIR_SECURITY_DOI_BUFLEN)
#define REMOTE_SECRET_VALUE_MAX (65536)
#define REMOTE_SECRET_UUID_LIST_MAX (16384)
#define REMOTE_CPU_BASELINE_MAX (256)
#define REMOTE_DOMAIN_SEND_KEY_MAX (16)
#define REMOTE_DOMAIN_INTERFACE_PARAMETERS_MAX (16)
#define REMOTE_DOMAIN_GET_CPU_STATS_NCPUS_MAX (128)
#define REMOTE_DOMAIN_GET_CPU_STATS_MAX (2048)
#define REMOTE_DOMAIN_DISK_ERRORS_MAX (256)
#define REMOTE_NODE_MEMORY_PARAMETERS_MAX (64)
static int hf_remote_uuid = -1;
static gboolean dissect_xdr_remote_uuid(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    return dissect_xdr_opaque(tvb, tree, xdrs, hf, VIR_UUID_BUFLEN);
}
static int hf_remote_nonnull_domain__name = -1;
static int hf_remote_nonnull_domain__uuid = -1;
static int hf_remote_nonnull_domain__id = -1;
static int hf_remote_nonnull_domain = -1;
static gint ett_remote_nonnull_domain = -1;
static gboolean dissect_xdr_remote_nonnull_domain(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_domain");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_domain);
    
    hf = hf_remote_nonnull_domain__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_domain__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_domain__id;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_network__name = -1;
static int hf_remote_nonnull_network__uuid = -1;
static int hf_remote_nonnull_network = -1;
static gint ett_remote_nonnull_network = -1;
static gboolean dissect_xdr_remote_nonnull_network(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_network");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_network);
    
    hf = hf_remote_nonnull_network__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_network__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_nwfilter__name = -1;
static int hf_remote_nonnull_nwfilter__uuid = -1;
static int hf_remote_nonnull_nwfilter = -1;
static gint ett_remote_nonnull_nwfilter = -1;
static gboolean dissect_xdr_remote_nonnull_nwfilter(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_nwfilter");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_nwfilter);
    
    hf = hf_remote_nonnull_nwfilter__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_nwfilter__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_interface__name = -1;
static int hf_remote_nonnull_interface__mac = -1;
static int hf_remote_nonnull_interface = -1;
static gint ett_remote_nonnull_interface = -1;
static gboolean dissect_xdr_remote_nonnull_interface(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_interface");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_interface);
    
    hf = hf_remote_nonnull_interface__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_interface__mac;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_storage_pool__name = -1;
static int hf_remote_nonnull_storage_pool__uuid = -1;
static int hf_remote_nonnull_storage_pool = -1;
static gint ett_remote_nonnull_storage_pool = -1;
static gboolean dissect_xdr_remote_nonnull_storage_pool(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_storage_pool");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_storage_pool);
    
    hf = hf_remote_nonnull_storage_pool__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_storage_pool__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_storage_vol__pool = -1;
static int hf_remote_nonnull_storage_vol__name = -1;
static int hf_remote_nonnull_storage_vol__key = -1;
static int hf_remote_nonnull_storage_vol = -1;
static gint ett_remote_nonnull_storage_vol = -1;
static gboolean dissect_xdr_remote_nonnull_storage_vol(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_storage_vol");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_storage_vol);
    
    hf = hf_remote_nonnull_storage_vol__pool;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_storage_vol__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_storage_vol__key;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_node_device__name = -1;
static int hf_remote_nonnull_node_device = -1;
static gint ett_remote_nonnull_node_device = -1;
static gboolean dissect_xdr_remote_nonnull_node_device(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_node_device");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_node_device);
    
    hf = hf_remote_nonnull_node_device__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_secret__uuid = -1;
static int hf_remote_nonnull_secret__usageType = -1;
static int hf_remote_nonnull_secret__usageID = -1;
static int hf_remote_nonnull_secret = -1;
static gint ett_remote_nonnull_secret = -1;
static gboolean dissect_xdr_remote_nonnull_secret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_secret");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_secret);
    
    hf = hf_remote_nonnull_secret__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_secret__usageType;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_secret__usageID;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nonnull_domain_snapshot__name = -1;
static int hf_remote_nonnull_domain_snapshot__dom = -1;
static int hf_remote_nonnull_domain_snapshot = -1;
static gint ett_remote_nonnull_domain_snapshot = -1;
static gboolean dissect_xdr_remote_nonnull_domain_snapshot(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nonnull_domain_snapshot");
    tree = proto_item_add_subtree(ti, ett_remote_nonnull_domain_snapshot);
    
    hf = hf_remote_nonnull_domain_snapshot__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nonnull_domain_snapshot__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain = -1;
static gboolean dissect_xdr_remote_domain(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    return dissect_xdr_pointer(tvb, tree, xdrs, hf, dissect_xdr_remote_nonnull_domain);
}
static int hf_remote_network = -1;
static gboolean dissect_xdr_remote_network(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    return dissect_xdr_pointer(tvb, tree, xdrs, hf, dissect_xdr_remote_nonnull_network);
}
static int hf_remote_nwfilter = -1;
static int hf_remote_storage_pool = -1;
static int hf_remote_storage_vol = -1;
static int hf_remote_node_device = -1;
static int hf_remote_error__code = -1;
static int hf_remote_error__domain = -1;
static int hf_remote_error__message = -1;
static int hf_remote_error__level = -1;
static int hf_remote_error__dom = -1;
static int hf_remote_error__str1 = -1;
static int hf_remote_error__str2 = -1;
static int hf_remote_error__str3 = -1;
static int hf_remote_error__int1 = -1;
static int hf_remote_error__int2 = -1;
static int hf_remote_error__net = -1;
static int hf_remote_error = -1;
static gint ett_remote_error = -1;
static gboolean dissect_xdr_remote_error(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_error");
    tree = proto_item_add_subtree(ti, ett_remote_error);
    
    hf = hf_remote_error__code;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__domain;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__message;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__level;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__dom;
    if (!dissect_xdr_remote_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__str1;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__str2;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__str3;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__int1;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__int2;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_error__net;
    if (!dissect_xdr_remote_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_type = -1;
static gboolean dissect_xdr_remote_auth_type(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    enum { DUMMY } es;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    if (xdr_enum(xdrs, (enum_t *)&es)) {
        switch ((guint)es) {
        case 0:
            proto_tree_add_uint_format_value(tree, hf, tvb, start, xdr_getpos(xdrs) - start + VIR_HEADER_LEN, (guint)es, "REMOTE_AUTH_NONE(0)");
            return TRUE;
        case 1:
            proto_tree_add_uint_format_value(tree, hf, tvb, start, xdr_getpos(xdrs) - start + VIR_HEADER_LEN, (guint)es, "REMOTE_AUTH_SASL(1)");
            return TRUE;
        case 2:
            proto_tree_add_uint_format_value(tree, hf, tvb, start, xdr_getpos(xdrs) - start + VIR_HEADER_LEN, (guint)es, "REMOTE_AUTH_POLKIT(2)");
            return TRUE;
        }
    } else {
        proto_tree_add_text(tree, tvb, start, -1, "(unknown)");
    }
    return FALSE;
}
static int hf_remote_vcpu_info__number = -1;
static int hf_remote_vcpu_info__state = -1;
static int hf_remote_vcpu_info__cpu_time = -1;
static int hf_remote_vcpu_info__cpu = -1;
static int hf_remote_vcpu_info = -1;
static gint ett_remote_vcpu_info = -1;
static gboolean dissect_xdr_remote_vcpu_info(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_vcpu_info");
    tree = proto_item_add_subtree(ti, ett_remote_vcpu_info);
    
    hf = hf_remote_vcpu_info__number;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_vcpu_info__state;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_vcpu_info__cpu_time;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_vcpu_info__cpu;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_typed_param_value__i = -1;
static int hf_remote_typed_param_value__ui = -1;
static int hf_remote_typed_param_value__l = -1;
static int hf_remote_typed_param_value__ul = -1;
static int hf_remote_typed_param_value__d = -1;
static int hf_remote_typed_param_value__b = -1;
static int hf_remote_typed_param_value__s = -1;
static int hf_remote_typed_param_value = -1;
static gboolean dissect_xdr_remote_typed_param_value(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    gboolean rc = TRUE;
    goffset start;
    int type = 0;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    if (!xdr_int(xdrs, &type))
        return FALSE;
    switch (type) {
    case VIR_TYPED_PARAM_INT:
        hf = hf_remote_typed_param_value__i;
        rc = dissect_xdr_int(tvb, tree, xdrs, hf); break;
    case VIR_TYPED_PARAM_UINT:
        hf = hf_remote_typed_param_value__ui;
        rc = dissect_xdr_u_int(tvb, tree, xdrs, hf); break;
    case VIR_TYPED_PARAM_LLONG:
        hf = hf_remote_typed_param_value__l;
        rc = dissect_xdr_hyper(tvb, tree, xdrs, hf); break;
    case VIR_TYPED_PARAM_ULLONG:
        hf = hf_remote_typed_param_value__ul;
        rc = dissect_xdr_u_hyper(tvb, tree, xdrs, hf); break;
    case VIR_TYPED_PARAM_DOUBLE:
        hf = hf_remote_typed_param_value__d;
        rc = dissect_xdr_double(tvb, tree, xdrs, hf); break;
    case VIR_TYPED_PARAM_BOOLEAN:
        hf = hf_remote_typed_param_value__b;
        rc = dissect_xdr_int(tvb, tree, xdrs, hf); break;
    case VIR_TYPED_PARAM_STRING:
        hf = hf_remote_typed_param_value__s;
        rc = dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf); break;
    }
    if (!rc) {
        proto_tree_add_text(tree, tvb, start, -1, "(unknown)");
    }
    return rc;
}
static int hf_remote_typed_param__field = -1;
static int hf_remote_typed_param__value = -1;
static int hf_remote_typed_param = -1;
static gint ett_remote_typed_param = -1;
static gboolean dissect_xdr_remote_typed_param(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_typed_param");
    tree = proto_item_add_subtree(ti, ett_remote_typed_param);
    
    hf = hf_remote_typed_param__field;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_typed_param__value;
    if (!dissect_xdr_remote_typed_param_value(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cpu_stats__field = -1;
static int hf_remote_node_get_cpu_stats__value = -1;
static int hf_remote_node_get_cpu_stats = -1;
static gint ett_remote_node_get_cpu_stats = -1;
static gboolean dissect_xdr_remote_node_get_cpu_stats(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cpu_stats");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cpu_stats);
    
    hf = hf_remote_node_get_cpu_stats__field;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cpu_stats__value;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_memory_stats__field = -1;
static int hf_remote_node_get_memory_stats__value = -1;
static int hf_remote_node_get_memory_stats = -1;
static gint ett_remote_node_get_memory_stats = -1;
static gboolean dissect_xdr_remote_node_get_memory_stats(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_memory_stats");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_memory_stats);
    
    hf = hf_remote_node_get_memory_stats__field;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_memory_stats__value;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_disk_error__disk = -1;
static int hf_remote_domain_disk_error__error = -1;
static int hf_remote_domain_disk_error = -1;
static gint ett_remote_domain_disk_error = -1;
static gboolean dissect_xdr_remote_domain_disk_error(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_disk_error");
    tree = proto_item_add_subtree(ti, ett_remote_domain_disk_error);
    
    hf = hf_remote_domain_disk_error__disk;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_disk_error__error;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_open_args__name = -1;
static int hf_remote_connect_open_args__flags = -1;
static int hf_remote_connect_open_args = -1;
static gint ett_remote_connect_open_args = -1;
static gboolean dissect_xdr_remote_connect_open_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_open_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_open_args);
    
    hf = hf_remote_connect_open_args__name;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_open_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_supports_feature_args__feature = -1;
static int hf_remote_connect_supports_feature_args = -1;
static gint ett_remote_connect_supports_feature_args = -1;
static gboolean dissect_xdr_remote_connect_supports_feature_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_supports_feature_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_supports_feature_args);
    
    hf = hf_remote_connect_supports_feature_args__feature;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_supports_feature_ret__supported = -1;
static int hf_remote_connect_supports_feature_ret = -1;
static gint ett_remote_connect_supports_feature_ret = -1;
static gboolean dissect_xdr_remote_connect_supports_feature_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_supports_feature_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_supports_feature_ret);
    
    hf = hf_remote_connect_supports_feature_ret__supported;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_type_ret__type = -1;
static int hf_remote_connect_get_type_ret = -1;
static gint ett_remote_connect_get_type_ret = -1;
static gboolean dissect_xdr_remote_connect_get_type_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_type_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_type_ret);
    
    hf = hf_remote_connect_get_type_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_version_ret__hv_ver = -1;
static int hf_remote_connect_get_version_ret = -1;
static gint ett_remote_connect_get_version_ret = -1;
static gboolean dissect_xdr_remote_connect_get_version_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_version_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_version_ret);
    
    hf = hf_remote_connect_get_version_ret__hv_ver;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_lib_version_ret__lib_ver = -1;
static int hf_remote_connect_get_lib_version_ret = -1;
static gint ett_remote_connect_get_lib_version_ret = -1;
static gboolean dissect_xdr_remote_connect_get_lib_version_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_lib_version_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_lib_version_ret);
    
    hf = hf_remote_connect_get_lib_version_ret__lib_ver;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_hostname_ret__hostname = -1;
static int hf_remote_connect_get_hostname_ret = -1;
static gint ett_remote_connect_get_hostname_ret = -1;
static gboolean dissect_xdr_remote_connect_get_hostname_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_hostname_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_hostname_ret);
    
    hf = hf_remote_connect_get_hostname_ret__hostname;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_sysinfo_args__flags = -1;
static int hf_remote_connect_get_sysinfo_args = -1;
static gint ett_remote_connect_get_sysinfo_args = -1;
static gboolean dissect_xdr_remote_connect_get_sysinfo_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_sysinfo_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_sysinfo_args);
    
    hf = hf_remote_connect_get_sysinfo_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_sysinfo_ret__sysinfo = -1;
static int hf_remote_connect_get_sysinfo_ret = -1;
static gint ett_remote_connect_get_sysinfo_ret = -1;
static gboolean dissect_xdr_remote_connect_get_sysinfo_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_sysinfo_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_sysinfo_ret);
    
    hf = hf_remote_connect_get_sysinfo_ret__sysinfo;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_uri_ret__uri = -1;
static int hf_remote_connect_get_uri_ret = -1;
static gint ett_remote_connect_get_uri_ret = -1;
static gboolean dissect_xdr_remote_connect_get_uri_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_uri_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_uri_ret);
    
    hf = hf_remote_connect_get_uri_ret__uri;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_max_vcpus_args__type = -1;
static int hf_remote_connect_get_max_vcpus_args = -1;
static gint ett_remote_connect_get_max_vcpus_args = -1;
static gboolean dissect_xdr_remote_connect_get_max_vcpus_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_max_vcpus_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_max_vcpus_args);
    
    hf = hf_remote_connect_get_max_vcpus_args__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_max_vcpus_ret__max_vcpus = -1;
static int hf_remote_connect_get_max_vcpus_ret = -1;
static gint ett_remote_connect_get_max_vcpus_ret = -1;
static gboolean dissect_xdr_remote_connect_get_max_vcpus_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_max_vcpus_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_max_vcpus_ret);
    
    hf = hf_remote_connect_get_max_vcpus_ret__max_vcpus;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_info_ret__model = -1;
static int hf_remote_node_get_info_ret__model___ELEMENT_ = -1;
static gint ett_remote_node_get_info_ret__model = -1;
static int hf_remote_node_get_info_ret__memory = -1;
static int hf_remote_node_get_info_ret__cpus = -1;
static int hf_remote_node_get_info_ret__mhz = -1;
static int hf_remote_node_get_info_ret__nodes = -1;
static int hf_remote_node_get_info_ret__sockets = -1;
static int hf_remote_node_get_info_ret__cores = -1;
static int hf_remote_node_get_info_ret__threads = -1;
static int hf_remote_node_get_info_ret = -1;
static gint ett_remote_node_get_info_ret = -1;
static gboolean dissect_xdr_remote_node_get_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_info_ret);
    
    hf = hf_remote_node_get_info_ret__model;
    if (!dissect_xdr_vector(tvb, tree, xdrs, hf, ett_remote_node_get_info_ret__model, hf_remote_node_get_info_ret__model___ELEMENT_, "char", 32, dissect_xdr_char)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__memory;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__cpus;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__mhz;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__nodes;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__sockets;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__cores;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_info_ret__threads;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_get_capabilities_ret__capabilities = -1;
static int hf_remote_connect_get_capabilities_ret = -1;
static gint ett_remote_connect_get_capabilities_ret = -1;
static gboolean dissect_xdr_remote_connect_get_capabilities_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_get_capabilities_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_get_capabilities_ret);
    
    hf = hf_remote_connect_get_capabilities_ret__capabilities;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cpu_stats_args__cpuNum = -1;
static int hf_remote_node_get_cpu_stats_args__nparams = -1;
static int hf_remote_node_get_cpu_stats_args__flags = -1;
static int hf_remote_node_get_cpu_stats_args = -1;
static gint ett_remote_node_get_cpu_stats_args = -1;
static gboolean dissect_xdr_remote_node_get_cpu_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cpu_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cpu_stats_args);
    
    hf = hf_remote_node_get_cpu_stats_args__cpuNum;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cpu_stats_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cpu_stats_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cpu_stats_ret__params = -1;
static int hf_remote_node_get_cpu_stats_ret__params___ELEMENT_ = -1;
static gint ett_remote_node_get_cpu_stats_ret__params = -1;
static int hf_remote_node_get_cpu_stats_ret__nparams = -1;
static int hf_remote_node_get_cpu_stats_ret = -1;
static gint ett_remote_node_get_cpu_stats_ret = -1;
static gboolean dissect_xdr_remote_node_get_cpu_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cpu_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cpu_stats_ret);
    
    hf = hf_remote_node_get_cpu_stats_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_get_cpu_stats_ret__params, hf_remote_node_get_cpu_stats_ret__params___ELEMENT_, "remote_node_get_cpu_stats", REMOTE_NODE_CPU_STATS_MAX, dissect_xdr_remote_node_get_cpu_stats)) return FALSE;
    
    hf = hf_remote_node_get_cpu_stats_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_memory_stats_args__nparams = -1;
static int hf_remote_node_get_memory_stats_args__cellNum = -1;
static int hf_remote_node_get_memory_stats_args__flags = -1;
static int hf_remote_node_get_memory_stats_args = -1;
static gint ett_remote_node_get_memory_stats_args = -1;
static gboolean dissect_xdr_remote_node_get_memory_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_memory_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_memory_stats_args);
    
    hf = hf_remote_node_get_memory_stats_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_memory_stats_args__cellNum;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_memory_stats_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_memory_stats_ret__params = -1;
static int hf_remote_node_get_memory_stats_ret__params___ELEMENT_ = -1;
static gint ett_remote_node_get_memory_stats_ret__params = -1;
static int hf_remote_node_get_memory_stats_ret__nparams = -1;
static int hf_remote_node_get_memory_stats_ret = -1;
static gint ett_remote_node_get_memory_stats_ret = -1;
static gboolean dissect_xdr_remote_node_get_memory_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_memory_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_memory_stats_ret);
    
    hf = hf_remote_node_get_memory_stats_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_get_memory_stats_ret__params, hf_remote_node_get_memory_stats_ret__params___ELEMENT_, "remote_node_get_memory_stats", REMOTE_NODE_MEMORY_STATS_MAX, dissect_xdr_remote_node_get_memory_stats)) return FALSE;
    
    hf = hf_remote_node_get_memory_stats_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cells_free_memory_args__startCell = -1;
static int hf_remote_node_get_cells_free_memory_args__maxcells = -1;
static int hf_remote_node_get_cells_free_memory_args = -1;
static gint ett_remote_node_get_cells_free_memory_args = -1;
static gboolean dissect_xdr_remote_node_get_cells_free_memory_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cells_free_memory_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cells_free_memory_args);
    
    hf = hf_remote_node_get_cells_free_memory_args__startCell;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cells_free_memory_args__maxcells;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cells_free_memory_ret__cells = -1;
static int hf_remote_node_get_cells_free_memory_ret__cells___ELEMENT_ = -1;
static gint ett_remote_node_get_cells_free_memory_ret__cells = -1;
static int hf_remote_node_get_cells_free_memory_ret = -1;
static gint ett_remote_node_get_cells_free_memory_ret = -1;
static gboolean dissect_xdr_remote_node_get_cells_free_memory_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cells_free_memory_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cells_free_memory_ret);
    
    hf = hf_remote_node_get_cells_free_memory_ret__cells;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_get_cells_free_memory_ret__cells, hf_remote_node_get_cells_free_memory_ret__cells___ELEMENT_, "u_hyper", REMOTE_NODE_MAX_CELLS, dissect_xdr_u_hyper)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_free_memory_ret__freeMem = -1;
static int hf_remote_node_get_free_memory_ret = -1;
static gint ett_remote_node_get_free_memory_ret = -1;
static gboolean dissect_xdr_remote_node_get_free_memory_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_free_memory_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_free_memory_ret);
    
    hf = hf_remote_node_get_free_memory_ret__freeMem;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_scheduler_type_args__dom = -1;
static int hf_remote_domain_get_scheduler_type_args = -1;
static gint ett_remote_domain_get_scheduler_type_args = -1;
static gboolean dissect_xdr_remote_domain_get_scheduler_type_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_scheduler_type_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_scheduler_type_args);
    
    hf = hf_remote_domain_get_scheduler_type_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_scheduler_type_ret__type = -1;
static int hf_remote_domain_get_scheduler_type_ret__nparams = -1;
static int hf_remote_domain_get_scheduler_type_ret = -1;
static gint ett_remote_domain_get_scheduler_type_ret = -1;
static gboolean dissect_xdr_remote_domain_get_scheduler_type_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_scheduler_type_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_scheduler_type_ret);
    
    hf = hf_remote_domain_get_scheduler_type_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_scheduler_type_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_scheduler_parameters_args__dom = -1;
static int hf_remote_domain_get_scheduler_parameters_args__nparams = -1;
static int hf_remote_domain_get_scheduler_parameters_args = -1;
static gint ett_remote_domain_get_scheduler_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_get_scheduler_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_scheduler_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_scheduler_parameters_args);
    
    hf = hf_remote_domain_get_scheduler_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_scheduler_parameters_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_scheduler_parameters_ret__params = -1;
static int hf_remote_domain_get_scheduler_parameters_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_scheduler_parameters_ret__params = -1;
static int hf_remote_domain_get_scheduler_parameters_ret = -1;
static gint ett_remote_domain_get_scheduler_parameters_ret = -1;
static gboolean dissect_xdr_remote_domain_get_scheduler_parameters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_scheduler_parameters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_scheduler_parameters_ret);
    
    hf = hf_remote_domain_get_scheduler_parameters_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_scheduler_parameters_ret__params, hf_remote_domain_get_scheduler_parameters_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_SCHEDULER_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_scheduler_parameters_flags_args__dom = -1;
static int hf_remote_domain_get_scheduler_parameters_flags_args__nparams = -1;
static int hf_remote_domain_get_scheduler_parameters_flags_args__flags = -1;
static int hf_remote_domain_get_scheduler_parameters_flags_args = -1;
static gint ett_remote_domain_get_scheduler_parameters_flags_args = -1;
static gboolean dissect_xdr_remote_domain_get_scheduler_parameters_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_scheduler_parameters_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_scheduler_parameters_flags_args);
    
    hf = hf_remote_domain_get_scheduler_parameters_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_scheduler_parameters_flags_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_scheduler_parameters_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_scheduler_parameters_flags_ret__params = -1;
static int hf_remote_domain_get_scheduler_parameters_flags_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_scheduler_parameters_flags_ret__params = -1;
static int hf_remote_domain_get_scheduler_parameters_flags_ret = -1;
static gint ett_remote_domain_get_scheduler_parameters_flags_ret = -1;
static gboolean dissect_xdr_remote_domain_get_scheduler_parameters_flags_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_scheduler_parameters_flags_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_scheduler_parameters_flags_ret);
    
    hf = hf_remote_domain_get_scheduler_parameters_flags_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_scheduler_parameters_flags_ret__params, hf_remote_domain_get_scheduler_parameters_flags_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_SCHEDULER_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_scheduler_parameters_args__dom = -1;
static int hf_remote_domain_set_scheduler_parameters_args__params = -1;
static int hf_remote_domain_set_scheduler_parameters_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_scheduler_parameters_args__params = -1;
static int hf_remote_domain_set_scheduler_parameters_args = -1;
static gint ett_remote_domain_set_scheduler_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_set_scheduler_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_scheduler_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_scheduler_parameters_args);
    
    hf = hf_remote_domain_set_scheduler_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_scheduler_parameters_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_scheduler_parameters_args__params, hf_remote_domain_set_scheduler_parameters_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_SCHEDULER_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_scheduler_parameters_flags_args__dom = -1;
static int hf_remote_domain_set_scheduler_parameters_flags_args__params = -1;
static int hf_remote_domain_set_scheduler_parameters_flags_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_scheduler_parameters_flags_args__params = -1;
static int hf_remote_domain_set_scheduler_parameters_flags_args__flags = -1;
static int hf_remote_domain_set_scheduler_parameters_flags_args = -1;
static gint ett_remote_domain_set_scheduler_parameters_flags_args = -1;
static gboolean dissect_xdr_remote_domain_set_scheduler_parameters_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_scheduler_parameters_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_scheduler_parameters_flags_args);
    
    hf = hf_remote_domain_set_scheduler_parameters_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_scheduler_parameters_flags_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_scheduler_parameters_flags_args__params, hf_remote_domain_set_scheduler_parameters_flags_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_SCHEDULER_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_set_scheduler_parameters_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_blkio_parameters_args__dom = -1;
static int hf_remote_domain_set_blkio_parameters_args__params = -1;
static int hf_remote_domain_set_blkio_parameters_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_blkio_parameters_args__params = -1;
static int hf_remote_domain_set_blkio_parameters_args__flags = -1;
static int hf_remote_domain_set_blkio_parameters_args = -1;
static gint ett_remote_domain_set_blkio_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_set_blkio_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_blkio_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_blkio_parameters_args);
    
    hf = hf_remote_domain_set_blkio_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_blkio_parameters_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_blkio_parameters_args__params, hf_remote_domain_set_blkio_parameters_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_BLKIO_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_set_blkio_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_blkio_parameters_args__dom = -1;
static int hf_remote_domain_get_blkio_parameters_args__nparams = -1;
static int hf_remote_domain_get_blkio_parameters_args__flags = -1;
static int hf_remote_domain_get_blkio_parameters_args = -1;
static gint ett_remote_domain_get_blkio_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_get_blkio_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_blkio_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_blkio_parameters_args);
    
    hf = hf_remote_domain_get_blkio_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_blkio_parameters_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_blkio_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_blkio_parameters_ret__params = -1;
static int hf_remote_domain_get_blkio_parameters_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_blkio_parameters_ret__params = -1;
static int hf_remote_domain_get_blkio_parameters_ret__nparams = -1;
static int hf_remote_domain_get_blkio_parameters_ret = -1;
static gint ett_remote_domain_get_blkio_parameters_ret = -1;
static gboolean dissect_xdr_remote_domain_get_blkio_parameters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_blkio_parameters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_blkio_parameters_ret);
    
    hf = hf_remote_domain_get_blkio_parameters_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_blkio_parameters_ret__params, hf_remote_domain_get_blkio_parameters_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_BLKIO_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_get_blkio_parameters_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_memory_parameters_args__dom = -1;
static int hf_remote_domain_set_memory_parameters_args__params = -1;
static int hf_remote_domain_set_memory_parameters_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_memory_parameters_args__params = -1;
static int hf_remote_domain_set_memory_parameters_args__flags = -1;
static int hf_remote_domain_set_memory_parameters_args = -1;
static gint ett_remote_domain_set_memory_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_set_memory_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_memory_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_memory_parameters_args);
    
    hf = hf_remote_domain_set_memory_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_memory_parameters_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_memory_parameters_args__params, hf_remote_domain_set_memory_parameters_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_MEMORY_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_set_memory_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_memory_parameters_args__dom = -1;
static int hf_remote_domain_get_memory_parameters_args__nparams = -1;
static int hf_remote_domain_get_memory_parameters_args__flags = -1;
static int hf_remote_domain_get_memory_parameters_args = -1;
static gint ett_remote_domain_get_memory_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_get_memory_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_memory_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_memory_parameters_args);
    
    hf = hf_remote_domain_get_memory_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_memory_parameters_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_memory_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_memory_parameters_ret__params = -1;
static int hf_remote_domain_get_memory_parameters_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_memory_parameters_ret__params = -1;
static int hf_remote_domain_get_memory_parameters_ret__nparams = -1;
static int hf_remote_domain_get_memory_parameters_ret = -1;
static gint ett_remote_domain_get_memory_parameters_ret = -1;
static gboolean dissect_xdr_remote_domain_get_memory_parameters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_memory_parameters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_memory_parameters_ret);
    
    hf = hf_remote_domain_get_memory_parameters_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_memory_parameters_ret__params, hf_remote_domain_get_memory_parameters_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_MEMORY_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_get_memory_parameters_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_resize_args__dom = -1;
static int hf_remote_domain_block_resize_args__disk = -1;
static int hf_remote_domain_block_resize_args__size = -1;
static int hf_remote_domain_block_resize_args__flags = -1;
static int hf_remote_domain_block_resize_args = -1;
static gint ett_remote_domain_block_resize_args = -1;
static gboolean dissect_xdr_remote_domain_block_resize_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_resize_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_resize_args);
    
    hf = hf_remote_domain_block_resize_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_resize_args__disk;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_resize_args__size;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_resize_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_numa_parameters_args__dom = -1;
static int hf_remote_domain_set_numa_parameters_args__params = -1;
static int hf_remote_domain_set_numa_parameters_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_numa_parameters_args__params = -1;
static int hf_remote_domain_set_numa_parameters_args__flags = -1;
static int hf_remote_domain_set_numa_parameters_args = -1;
static gint ett_remote_domain_set_numa_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_set_numa_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_numa_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_numa_parameters_args);
    
    hf = hf_remote_domain_set_numa_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_numa_parameters_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_numa_parameters_args__params, hf_remote_domain_set_numa_parameters_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_NUMA_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_set_numa_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_numa_parameters_args__dom = -1;
static int hf_remote_domain_get_numa_parameters_args__nparams = -1;
static int hf_remote_domain_get_numa_parameters_args__flags = -1;
static int hf_remote_domain_get_numa_parameters_args = -1;
static gint ett_remote_domain_get_numa_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_get_numa_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_numa_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_numa_parameters_args);
    
    hf = hf_remote_domain_get_numa_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_numa_parameters_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_numa_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_numa_parameters_ret__params = -1;
static int hf_remote_domain_get_numa_parameters_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_numa_parameters_ret__params = -1;
static int hf_remote_domain_get_numa_parameters_ret__nparams = -1;
static int hf_remote_domain_get_numa_parameters_ret = -1;
static gint ett_remote_domain_get_numa_parameters_ret = -1;
static gboolean dissect_xdr_remote_domain_get_numa_parameters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_numa_parameters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_numa_parameters_ret);
    
    hf = hf_remote_domain_get_numa_parameters_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_numa_parameters_ret__params, hf_remote_domain_get_numa_parameters_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_NUMA_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_get_numa_parameters_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_stats_args__dom = -1;
static int hf_remote_domain_block_stats_args__path = -1;
static int hf_remote_domain_block_stats_args = -1;
static gint ett_remote_domain_block_stats_args = -1;
static gboolean dissect_xdr_remote_domain_block_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_stats_args);
    
    hf = hf_remote_domain_block_stats_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_stats_ret__rd_req = -1;
static int hf_remote_domain_block_stats_ret__rd_bytes = -1;
static int hf_remote_domain_block_stats_ret__wr_req = -1;
static int hf_remote_domain_block_stats_ret__wr_bytes = -1;
static int hf_remote_domain_block_stats_ret__errs = -1;
static int hf_remote_domain_block_stats_ret = -1;
static gint ett_remote_domain_block_stats_ret = -1;
static gboolean dissect_xdr_remote_domain_block_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_stats_ret);
    
    hf = hf_remote_domain_block_stats_ret__rd_req;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_ret__rd_bytes;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_ret__wr_req;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_ret__wr_bytes;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_ret__errs;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_stats_flags_args__dom = -1;
static int hf_remote_domain_block_stats_flags_args__path = -1;
static int hf_remote_domain_block_stats_flags_args__nparams = -1;
static int hf_remote_domain_block_stats_flags_args__flags = -1;
static int hf_remote_domain_block_stats_flags_args = -1;
static gint ett_remote_domain_block_stats_flags_args = -1;
static gboolean dissect_xdr_remote_domain_block_stats_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_stats_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_stats_flags_args);
    
    hf = hf_remote_domain_block_stats_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_flags_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_flags_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_stats_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_stats_flags_ret__params = -1;
static int hf_remote_domain_block_stats_flags_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_block_stats_flags_ret__params = -1;
static int hf_remote_domain_block_stats_flags_ret__nparams = -1;
static int hf_remote_domain_block_stats_flags_ret = -1;
static gint ett_remote_domain_block_stats_flags_ret = -1;
static gboolean dissect_xdr_remote_domain_block_stats_flags_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_stats_flags_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_stats_flags_ret);
    
    hf = hf_remote_domain_block_stats_flags_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_block_stats_flags_ret__params, hf_remote_domain_block_stats_flags_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_BLOCK_STATS_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_block_stats_flags_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_interface_stats_args__dom = -1;
static int hf_remote_domain_interface_stats_args__path = -1;
static int hf_remote_domain_interface_stats_args = -1;
static gint ett_remote_domain_interface_stats_args = -1;
static gboolean dissect_xdr_remote_domain_interface_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_interface_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_interface_stats_args);
    
    hf = hf_remote_domain_interface_stats_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_interface_stats_ret__rx_bytes = -1;
static int hf_remote_domain_interface_stats_ret__rx_packets = -1;
static int hf_remote_domain_interface_stats_ret__rx_errs = -1;
static int hf_remote_domain_interface_stats_ret__rx_drop = -1;
static int hf_remote_domain_interface_stats_ret__tx_bytes = -1;
static int hf_remote_domain_interface_stats_ret__tx_packets = -1;
static int hf_remote_domain_interface_stats_ret__tx_errs = -1;
static int hf_remote_domain_interface_stats_ret__tx_drop = -1;
static int hf_remote_domain_interface_stats_ret = -1;
static gint ett_remote_domain_interface_stats_ret = -1;
static gboolean dissect_xdr_remote_domain_interface_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_interface_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_interface_stats_ret);
    
    hf = hf_remote_domain_interface_stats_ret__rx_bytes;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__rx_packets;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__rx_errs;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__rx_drop;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__tx_bytes;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__tx_packets;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__tx_errs;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_interface_stats_ret__tx_drop;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_interface_parameters_args__dom = -1;
static int hf_remote_domain_set_interface_parameters_args__device = -1;
static int hf_remote_domain_set_interface_parameters_args__params = -1;
static int hf_remote_domain_set_interface_parameters_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_interface_parameters_args__params = -1;
static int hf_remote_domain_set_interface_parameters_args__flags = -1;
static int hf_remote_domain_set_interface_parameters_args = -1;
static gint ett_remote_domain_set_interface_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_set_interface_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_interface_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_interface_parameters_args);
    
    hf = hf_remote_domain_set_interface_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_interface_parameters_args__device;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_interface_parameters_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_interface_parameters_args__params, hf_remote_domain_set_interface_parameters_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_INTERFACE_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_set_interface_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_interface_parameters_args__dom = -1;
static int hf_remote_domain_get_interface_parameters_args__device = -1;
static int hf_remote_domain_get_interface_parameters_args__nparams = -1;
static int hf_remote_domain_get_interface_parameters_args__flags = -1;
static int hf_remote_domain_get_interface_parameters_args = -1;
static gint ett_remote_domain_get_interface_parameters_args = -1;
static gboolean dissect_xdr_remote_domain_get_interface_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_interface_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_interface_parameters_args);
    
    hf = hf_remote_domain_get_interface_parameters_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_interface_parameters_args__device;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_interface_parameters_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_interface_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_interface_parameters_ret__params = -1;
static int hf_remote_domain_get_interface_parameters_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_interface_parameters_ret__params = -1;
static int hf_remote_domain_get_interface_parameters_ret__nparams = -1;
static int hf_remote_domain_get_interface_parameters_ret = -1;
static gint ett_remote_domain_get_interface_parameters_ret = -1;
static gboolean dissect_xdr_remote_domain_get_interface_parameters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_interface_parameters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_interface_parameters_ret);
    
    hf = hf_remote_domain_get_interface_parameters_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_interface_parameters_ret__params, hf_remote_domain_get_interface_parameters_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_INTERFACE_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_get_interface_parameters_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_memory_stats_args__dom = -1;
static int hf_remote_domain_memory_stats_args__maxStats = -1;
static int hf_remote_domain_memory_stats_args__flags = -1;
static int hf_remote_domain_memory_stats_args = -1;
static gint ett_remote_domain_memory_stats_args = -1;
static gboolean dissect_xdr_remote_domain_memory_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_memory_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_memory_stats_args);
    
    hf = hf_remote_domain_memory_stats_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_memory_stats_args__maxStats;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_memory_stats_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_memory_stat__tag = -1;
static int hf_remote_domain_memory_stat__val = -1;
static int hf_remote_domain_memory_stat = -1;
static gint ett_remote_domain_memory_stat = -1;
static gboolean dissect_xdr_remote_domain_memory_stat(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_memory_stat");
    tree = proto_item_add_subtree(ti, ett_remote_domain_memory_stat);
    
    hf = hf_remote_domain_memory_stat__tag;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_memory_stat__val;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_memory_stats_ret__stats = -1;
static int hf_remote_domain_memory_stats_ret__stats___ELEMENT_ = -1;
static gint ett_remote_domain_memory_stats_ret__stats = -1;
static int hf_remote_domain_memory_stats_ret = -1;
static gint ett_remote_domain_memory_stats_ret = -1;
static gboolean dissect_xdr_remote_domain_memory_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_memory_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_memory_stats_ret);
    
    hf = hf_remote_domain_memory_stats_ret__stats;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_memory_stats_ret__stats, hf_remote_domain_memory_stats_ret__stats___ELEMENT_, "remote_domain_memory_stat", REMOTE_DOMAIN_MEMORY_STATS_MAX, dissect_xdr_remote_domain_memory_stat)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_peek_args__dom = -1;
static int hf_remote_domain_block_peek_args__path = -1;
static int hf_remote_domain_block_peek_args__offset = -1;
static int hf_remote_domain_block_peek_args__size = -1;
static int hf_remote_domain_block_peek_args__flags = -1;
static int hf_remote_domain_block_peek_args = -1;
static gint ett_remote_domain_block_peek_args = -1;
static gboolean dissect_xdr_remote_domain_block_peek_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_peek_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_peek_args);
    
    hf = hf_remote_domain_block_peek_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_peek_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_peek_args__offset;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_peek_args__size;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_peek_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_peek_ret__buffer = -1;
static int hf_remote_domain_block_peek_ret = -1;
static gint ett_remote_domain_block_peek_ret = -1;
static gboolean dissect_xdr_remote_domain_block_peek_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_peek_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_peek_ret);
    
    hf = hf_remote_domain_block_peek_ret__buffer;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_DOMAIN_BLOCK_PEEK_BUFFER_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_memory_peek_args__dom = -1;
static int hf_remote_domain_memory_peek_args__offset = -1;
static int hf_remote_domain_memory_peek_args__size = -1;
static int hf_remote_domain_memory_peek_args__flags = -1;
static int hf_remote_domain_memory_peek_args = -1;
static gint ett_remote_domain_memory_peek_args = -1;
static gboolean dissect_xdr_remote_domain_memory_peek_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_memory_peek_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_memory_peek_args);
    
    hf = hf_remote_domain_memory_peek_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_memory_peek_args__offset;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_memory_peek_args__size;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_memory_peek_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_memory_peek_ret__buffer = -1;
static int hf_remote_domain_memory_peek_ret = -1;
static gint ett_remote_domain_memory_peek_ret = -1;
static gboolean dissect_xdr_remote_domain_memory_peek_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_memory_peek_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_memory_peek_ret);
    
    hf = hf_remote_domain_memory_peek_ret__buffer;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_DOMAIN_MEMORY_PEEK_BUFFER_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_block_info_args__dom = -1;
static int hf_remote_domain_get_block_info_args__path = -1;
static int hf_remote_domain_get_block_info_args__flags = -1;
static int hf_remote_domain_get_block_info_args = -1;
static gint ett_remote_domain_get_block_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_block_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_block_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_block_info_args);
    
    hf = hf_remote_domain_get_block_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_info_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_info_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_block_info_ret__allocation = -1;
static int hf_remote_domain_get_block_info_ret__capacity = -1;
static int hf_remote_domain_get_block_info_ret__physical = -1;
static int hf_remote_domain_get_block_info_ret = -1;
static gint ett_remote_domain_get_block_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_block_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_block_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_block_info_ret);
    
    hf = hf_remote_domain_get_block_info_ret__allocation;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_info_ret__capacity;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_info_ret__physical;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_domains_args__maxids = -1;
static int hf_remote_connect_list_domains_args = -1;
static gint ett_remote_connect_list_domains_args = -1;
static gboolean dissect_xdr_remote_connect_list_domains_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_domains_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_domains_args);
    
    hf = hf_remote_connect_list_domains_args__maxids;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_domains_ret__ids = -1;
static int hf_remote_connect_list_domains_ret__ids___ELEMENT_ = -1;
static gint ett_remote_connect_list_domains_ret__ids = -1;
static int hf_remote_connect_list_domains_ret = -1;
static gint ett_remote_connect_list_domains_ret = -1;
static gboolean dissect_xdr_remote_connect_list_domains_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_domains_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_domains_ret);
    
    hf = hf_remote_connect_list_domains_ret__ids;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_domains_ret__ids, hf_remote_connect_list_domains_ret__ids___ELEMENT_, "int", REMOTE_DOMAIN_ID_LIST_MAX, dissect_xdr_int)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_domains_ret__num = -1;
static int hf_remote_connect_num_of_domains_ret = -1;
static gint ett_remote_connect_num_of_domains_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_domains_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_domains_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_domains_ret);
    
    hf = hf_remote_connect_num_of_domains_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_create_xml_args__xml_desc = -1;
static int hf_remote_domain_create_xml_args__flags = -1;
static int hf_remote_domain_create_xml_args = -1;
static gint ett_remote_domain_create_xml_args = -1;
static gboolean dissect_xdr_remote_domain_create_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_create_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_create_xml_args);
    
    hf = hf_remote_domain_create_xml_args__xml_desc;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_create_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_create_xml_ret__dom = -1;
static int hf_remote_domain_create_xml_ret = -1;
static gint ett_remote_domain_create_xml_ret = -1;
static gboolean dissect_xdr_remote_domain_create_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_create_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_create_xml_ret);
    
    hf = hf_remote_domain_create_xml_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_lookup_by_id_args__id = -1;
static int hf_remote_domain_lookup_by_id_args = -1;
static gint ett_remote_domain_lookup_by_id_args = -1;
static gboolean dissect_xdr_remote_domain_lookup_by_id_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_lookup_by_id_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_lookup_by_id_args);
    
    hf = hf_remote_domain_lookup_by_id_args__id;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_lookup_by_id_ret__dom = -1;
static int hf_remote_domain_lookup_by_id_ret = -1;
static gint ett_remote_domain_lookup_by_id_ret = -1;
static gboolean dissect_xdr_remote_domain_lookup_by_id_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_lookup_by_id_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_lookup_by_id_ret);
    
    hf = hf_remote_domain_lookup_by_id_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_lookup_by_uuid_args__uuid = -1;
static int hf_remote_domain_lookup_by_uuid_args = -1;
static gint ett_remote_domain_lookup_by_uuid_args = -1;
static gboolean dissect_xdr_remote_domain_lookup_by_uuid_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_lookup_by_uuid_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_lookup_by_uuid_args);
    
    hf = hf_remote_domain_lookup_by_uuid_args__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_lookup_by_uuid_ret__dom = -1;
static int hf_remote_domain_lookup_by_uuid_ret = -1;
static gint ett_remote_domain_lookup_by_uuid_ret = -1;
static gboolean dissect_xdr_remote_domain_lookup_by_uuid_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_lookup_by_uuid_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_lookup_by_uuid_ret);
    
    hf = hf_remote_domain_lookup_by_uuid_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_lookup_by_name_args__name = -1;
static int hf_remote_domain_lookup_by_name_args = -1;
static gint ett_remote_domain_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_domain_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_lookup_by_name_args);
    
    hf = hf_remote_domain_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_lookup_by_name_ret__dom = -1;
static int hf_remote_domain_lookup_by_name_ret = -1;
static gint ett_remote_domain_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_domain_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_lookup_by_name_ret);
    
    hf = hf_remote_domain_lookup_by_name_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_suspend_args__dom = -1;
static int hf_remote_domain_suspend_args = -1;
static gint ett_remote_domain_suspend_args = -1;
static gboolean dissect_xdr_remote_domain_suspend_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_suspend_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_suspend_args);
    
    hf = hf_remote_domain_suspend_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_resume_args__dom = -1;
static int hf_remote_domain_resume_args = -1;
static gint ett_remote_domain_resume_args = -1;
static gboolean dissect_xdr_remote_domain_resume_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_resume_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_resume_args);
    
    hf = hf_remote_domain_resume_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_pm_suspend_for_duration_args__dom = -1;
static int hf_remote_domain_pm_suspend_for_duration_args__target = -1;
static int hf_remote_domain_pm_suspend_for_duration_args__duration = -1;
static int hf_remote_domain_pm_suspend_for_duration_args__flags = -1;
static int hf_remote_domain_pm_suspend_for_duration_args = -1;
static gint ett_remote_domain_pm_suspend_for_duration_args = -1;
static gboolean dissect_xdr_remote_domain_pm_suspend_for_duration_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_pm_suspend_for_duration_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_pm_suspend_for_duration_args);
    
    hf = hf_remote_domain_pm_suspend_for_duration_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pm_suspend_for_duration_args__target;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pm_suspend_for_duration_args__duration;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pm_suspend_for_duration_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_pm_wakeup_args__dom = -1;
static int hf_remote_domain_pm_wakeup_args__flags = -1;
static int hf_remote_domain_pm_wakeup_args = -1;
static gint ett_remote_domain_pm_wakeup_args = -1;
static gboolean dissect_xdr_remote_domain_pm_wakeup_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_pm_wakeup_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_pm_wakeup_args);
    
    hf = hf_remote_domain_pm_wakeup_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pm_wakeup_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_shutdown_args__dom = -1;
static int hf_remote_domain_shutdown_args = -1;
static gint ett_remote_domain_shutdown_args = -1;
static gboolean dissect_xdr_remote_domain_shutdown_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_shutdown_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_shutdown_args);
    
    hf = hf_remote_domain_shutdown_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_reboot_args__dom = -1;
static int hf_remote_domain_reboot_args__flags = -1;
static int hf_remote_domain_reboot_args = -1;
static gint ett_remote_domain_reboot_args = -1;
static gboolean dissect_xdr_remote_domain_reboot_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_reboot_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_reboot_args);
    
    hf = hf_remote_domain_reboot_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_reboot_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_reset_args__dom = -1;
static int hf_remote_domain_reset_args__flags = -1;
static int hf_remote_domain_reset_args = -1;
static gint ett_remote_domain_reset_args = -1;
static gboolean dissect_xdr_remote_domain_reset_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_reset_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_reset_args);
    
    hf = hf_remote_domain_reset_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_reset_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_destroy_args__dom = -1;
static int hf_remote_domain_destroy_args = -1;
static gint ett_remote_domain_destroy_args = -1;
static gboolean dissect_xdr_remote_domain_destroy_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_destroy_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_destroy_args);
    
    hf = hf_remote_domain_destroy_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_destroy_flags_args__dom = -1;
static int hf_remote_domain_destroy_flags_args__flags = -1;
static int hf_remote_domain_destroy_flags_args = -1;
static gint ett_remote_domain_destroy_flags_args = -1;
static gboolean dissect_xdr_remote_domain_destroy_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_destroy_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_destroy_flags_args);
    
    hf = hf_remote_domain_destroy_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_destroy_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_os_type_args__dom = -1;
static int hf_remote_domain_get_os_type_args = -1;
static gint ett_remote_domain_get_os_type_args = -1;
static gboolean dissect_xdr_remote_domain_get_os_type_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_os_type_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_os_type_args);
    
    hf = hf_remote_domain_get_os_type_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_os_type_ret__type = -1;
static int hf_remote_domain_get_os_type_ret = -1;
static gint ett_remote_domain_get_os_type_ret = -1;
static gboolean dissect_xdr_remote_domain_get_os_type_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_os_type_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_os_type_ret);
    
    hf = hf_remote_domain_get_os_type_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_max_memory_args__dom = -1;
static int hf_remote_domain_get_max_memory_args = -1;
static gint ett_remote_domain_get_max_memory_args = -1;
static gboolean dissect_xdr_remote_domain_get_max_memory_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_max_memory_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_max_memory_args);
    
    hf = hf_remote_domain_get_max_memory_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_max_memory_ret__memory = -1;
static int hf_remote_domain_get_max_memory_ret = -1;
static gint ett_remote_domain_get_max_memory_ret = -1;
static gboolean dissect_xdr_remote_domain_get_max_memory_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_max_memory_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_max_memory_ret);
    
    hf = hf_remote_domain_get_max_memory_ret__memory;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_max_memory_args__dom = -1;
static int hf_remote_domain_set_max_memory_args__memory = -1;
static int hf_remote_domain_set_max_memory_args = -1;
static gint ett_remote_domain_set_max_memory_args = -1;
static gboolean dissect_xdr_remote_domain_set_max_memory_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_max_memory_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_max_memory_args);
    
    hf = hf_remote_domain_set_max_memory_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_max_memory_args__memory;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_memory_args__dom = -1;
static int hf_remote_domain_set_memory_args__memory = -1;
static int hf_remote_domain_set_memory_args = -1;
static gint ett_remote_domain_set_memory_args = -1;
static gboolean dissect_xdr_remote_domain_set_memory_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_memory_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_memory_args);
    
    hf = hf_remote_domain_set_memory_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_memory_args__memory;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_memory_flags_args__dom = -1;
static int hf_remote_domain_set_memory_flags_args__memory = -1;
static int hf_remote_domain_set_memory_flags_args__flags = -1;
static int hf_remote_domain_set_memory_flags_args = -1;
static gint ett_remote_domain_set_memory_flags_args = -1;
static gboolean dissect_xdr_remote_domain_set_memory_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_memory_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_memory_flags_args);
    
    hf = hf_remote_domain_set_memory_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_memory_flags_args__memory;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_memory_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_info_args__dom = -1;
static int hf_remote_domain_get_info_args = -1;
static gint ett_remote_domain_get_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_info_args);
    
    hf = hf_remote_domain_get_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_info_ret__state = -1;
static int hf_remote_domain_get_info_ret__maxMem = -1;
static int hf_remote_domain_get_info_ret__memory = -1;
static int hf_remote_domain_get_info_ret__nrVirtCpu = -1;
static int hf_remote_domain_get_info_ret__cpuTime = -1;
static int hf_remote_domain_get_info_ret = -1;
static gint ett_remote_domain_get_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_info_ret);
    
    hf = hf_remote_domain_get_info_ret__state;
    if (!dissect_xdr_u_char(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_info_ret__maxMem;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_info_ret__memory;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_info_ret__nrVirtCpu;
    if (!dissect_xdr_u_short(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_info_ret__cpuTime;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_save_args__dom = -1;
static int hf_remote_domain_save_args__to = -1;
static int hf_remote_domain_save_args = -1;
static gint ett_remote_domain_save_args = -1;
static gboolean dissect_xdr_remote_domain_save_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_save_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_save_args);
    
    hf = hf_remote_domain_save_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_args__to;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_save_flags_args__dom = -1;
static int hf_remote_domain_save_flags_args__to = -1;
static int hf_remote_domain_save_flags_args__dxml = -1;
static int hf_remote_domain_save_flags_args__flags = -1;
static int hf_remote_domain_save_flags_args = -1;
static gint ett_remote_domain_save_flags_args = -1;
static gboolean dissect_xdr_remote_domain_save_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_save_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_save_flags_args);
    
    hf = hf_remote_domain_save_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_flags_args__to;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_flags_args__dxml;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_restore_args__from = -1;
static int hf_remote_domain_restore_args = -1;
static gint ett_remote_domain_restore_args = -1;
static gboolean dissect_xdr_remote_domain_restore_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_restore_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_restore_args);
    
    hf = hf_remote_domain_restore_args__from;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_restore_flags_args__from = -1;
static int hf_remote_domain_restore_flags_args__dxml = -1;
static int hf_remote_domain_restore_flags_args__flags = -1;
static int hf_remote_domain_restore_flags_args = -1;
static gint ett_remote_domain_restore_flags_args = -1;
static gboolean dissect_xdr_remote_domain_restore_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_restore_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_restore_flags_args);
    
    hf = hf_remote_domain_restore_flags_args__from;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_restore_flags_args__dxml;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_restore_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_save_image_get_xml_desc_args__file = -1;
static int hf_remote_domain_save_image_get_xml_desc_args__flags = -1;
static int hf_remote_domain_save_image_get_xml_desc_args = -1;
static gint ett_remote_domain_save_image_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_domain_save_image_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_save_image_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_save_image_get_xml_desc_args);
    
    hf = hf_remote_domain_save_image_get_xml_desc_args__file;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_image_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_save_image_get_xml_desc_ret__xml = -1;
static int hf_remote_domain_save_image_get_xml_desc_ret = -1;
static gint ett_remote_domain_save_image_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_domain_save_image_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_save_image_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_save_image_get_xml_desc_ret);
    
    hf = hf_remote_domain_save_image_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_save_image_define_xml_args__file = -1;
static int hf_remote_domain_save_image_define_xml_args__dxml = -1;
static int hf_remote_domain_save_image_define_xml_args__flags = -1;
static int hf_remote_domain_save_image_define_xml_args = -1;
static gint ett_remote_domain_save_image_define_xml_args = -1;
static gboolean dissect_xdr_remote_domain_save_image_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_save_image_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_save_image_define_xml_args);
    
    hf = hf_remote_domain_save_image_define_xml_args__file;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_image_define_xml_args__dxml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_save_image_define_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_core_dump_args__dom = -1;
static int hf_remote_domain_core_dump_args__to = -1;
static int hf_remote_domain_core_dump_args__flags = -1;
static int hf_remote_domain_core_dump_args = -1;
static gint ett_remote_domain_core_dump_args = -1;
static gboolean dissect_xdr_remote_domain_core_dump_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_core_dump_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_core_dump_args);
    
    hf = hf_remote_domain_core_dump_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_core_dump_args__to;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_core_dump_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_screenshot_args__dom = -1;
static int hf_remote_domain_screenshot_args__screen = -1;
static int hf_remote_domain_screenshot_args__flags = -1;
static int hf_remote_domain_screenshot_args = -1;
static gint ett_remote_domain_screenshot_args = -1;
static gboolean dissect_xdr_remote_domain_screenshot_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_screenshot_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_screenshot_args);
    
    hf = hf_remote_domain_screenshot_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_screenshot_args__screen;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_screenshot_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_screenshot_ret__mime = -1;
static int hf_remote_domain_screenshot_ret = -1;
static gint ett_remote_domain_screenshot_ret = -1;
static gboolean dissect_xdr_remote_domain_screenshot_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_screenshot_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_screenshot_ret);
    
    hf = hf_remote_domain_screenshot_ret__mime;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_xml_desc_args__dom = -1;
static int hf_remote_domain_get_xml_desc_args__flags = -1;
static int hf_remote_domain_get_xml_desc_args = -1;
static gint ett_remote_domain_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_domain_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_xml_desc_args);
    
    hf = hf_remote_domain_get_xml_desc_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_xml_desc_ret__xml = -1;
static int hf_remote_domain_get_xml_desc_ret = -1;
static gint ett_remote_domain_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_domain_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_xml_desc_ret);
    
    hf = hf_remote_domain_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_args__uri_in = -1;
static int hf_remote_domain_migrate_prepare_args__flags = -1;
static int hf_remote_domain_migrate_prepare_args__dname = -1;
static int hf_remote_domain_migrate_prepare_args__resource = -1;
static int hf_remote_domain_migrate_prepare_args = -1;
static gint ett_remote_domain_migrate_prepare_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_args);
    
    hf = hf_remote_domain_migrate_prepare_args__uri_in;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_ret__cookie = -1;
static int hf_remote_domain_migrate_prepare_ret__uri_out = -1;
static int hf_remote_domain_migrate_prepare_ret = -1;
static gint ett_remote_domain_migrate_prepare_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_ret);
    
    hf = hf_remote_domain_migrate_prepare_ret__cookie;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_ret__uri_out;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_perform_args__dom = -1;
static int hf_remote_domain_migrate_perform_args__cookie = -1;
static int hf_remote_domain_migrate_perform_args__uri = -1;
static int hf_remote_domain_migrate_perform_args__flags = -1;
static int hf_remote_domain_migrate_perform_args__dname = -1;
static int hf_remote_domain_migrate_perform_args__resource = -1;
static int hf_remote_domain_migrate_perform_args = -1;
static gint ett_remote_domain_migrate_perform_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_perform_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_perform_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_perform_args);
    
    hf = hf_remote_domain_migrate_perform_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform_args__cookie;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform_args__uri;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish_args__dname = -1;
static int hf_remote_domain_migrate_finish_args__cookie = -1;
static int hf_remote_domain_migrate_finish_args__uri = -1;
static int hf_remote_domain_migrate_finish_args__flags = -1;
static int hf_remote_domain_migrate_finish_args = -1;
static gint ett_remote_domain_migrate_finish_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish_args);
    
    hf = hf_remote_domain_migrate_finish_args__dname;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish_args__cookie;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish_args__uri;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish_ret__ddom = -1;
static int hf_remote_domain_migrate_finish_ret = -1;
static gint ett_remote_domain_migrate_finish_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish_ret);
    
    hf = hf_remote_domain_migrate_finish_ret__ddom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare2_args__uri_in = -1;
static int hf_remote_domain_migrate_prepare2_args__flags = -1;
static int hf_remote_domain_migrate_prepare2_args__dname = -1;
static int hf_remote_domain_migrate_prepare2_args__resource = -1;
static int hf_remote_domain_migrate_prepare2_args__dom_xml = -1;
static int hf_remote_domain_migrate_prepare2_args = -1;
static gint ett_remote_domain_migrate_prepare2_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare2_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare2_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare2_args);
    
    hf = hf_remote_domain_migrate_prepare2_args__uri_in;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare2_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare2_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare2_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare2_args__dom_xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare2_ret__cookie = -1;
static int hf_remote_domain_migrate_prepare2_ret__uri_out = -1;
static int hf_remote_domain_migrate_prepare2_ret = -1;
static gint ett_remote_domain_migrate_prepare2_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare2_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare2_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare2_ret);
    
    hf = hf_remote_domain_migrate_prepare2_ret__cookie;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare2_ret__uri_out;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish2_args__dname = -1;
static int hf_remote_domain_migrate_finish2_args__cookie = -1;
static int hf_remote_domain_migrate_finish2_args__uri = -1;
static int hf_remote_domain_migrate_finish2_args__flags = -1;
static int hf_remote_domain_migrate_finish2_args__retcode = -1;
static int hf_remote_domain_migrate_finish2_args = -1;
static gint ett_remote_domain_migrate_finish2_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish2_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish2_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish2_args);
    
    hf = hf_remote_domain_migrate_finish2_args__dname;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish2_args__cookie;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish2_args__uri;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish2_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish2_args__retcode;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish2_ret__ddom = -1;
static int hf_remote_domain_migrate_finish2_ret = -1;
static gint ett_remote_domain_migrate_finish2_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish2_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish2_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish2_ret);
    
    hf = hf_remote_domain_migrate_finish2_ret__ddom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_domains_args__maxnames = -1;
static int hf_remote_connect_list_defined_domains_args = -1;
static gint ett_remote_connect_list_defined_domains_args = -1;
static gboolean dissect_xdr_remote_connect_list_defined_domains_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_domains_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_domains_args);
    
    hf = hf_remote_connect_list_defined_domains_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_domains_ret__names = -1;
static int hf_remote_connect_list_defined_domains_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_defined_domains_ret__names = -1;
static int hf_remote_connect_list_defined_domains_ret = -1;
static gint ett_remote_connect_list_defined_domains_ret = -1;
static gboolean dissect_xdr_remote_connect_list_defined_domains_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_domains_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_domains_ret);
    
    hf = hf_remote_connect_list_defined_domains_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_defined_domains_ret__names, hf_remote_connect_list_defined_domains_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_DOMAIN_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_defined_domains_ret__num = -1;
static int hf_remote_connect_num_of_defined_domains_ret = -1;
static gint ett_remote_connect_num_of_defined_domains_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_defined_domains_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_defined_domains_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_defined_domains_ret);
    
    hf = hf_remote_connect_num_of_defined_domains_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_create_args__dom = -1;
static int hf_remote_domain_create_args = -1;
static gint ett_remote_domain_create_args = -1;
static gboolean dissect_xdr_remote_domain_create_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_create_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_create_args);
    
    hf = hf_remote_domain_create_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_create_with_flags_args__dom = -1;
static int hf_remote_domain_create_with_flags_args__flags = -1;
static int hf_remote_domain_create_with_flags_args = -1;
static gint ett_remote_domain_create_with_flags_args = -1;
static gboolean dissect_xdr_remote_domain_create_with_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_create_with_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_create_with_flags_args);
    
    hf = hf_remote_domain_create_with_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_create_with_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_create_with_flags_ret__dom = -1;
static int hf_remote_domain_create_with_flags_ret = -1;
static gint ett_remote_domain_create_with_flags_ret = -1;
static gboolean dissect_xdr_remote_domain_create_with_flags_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_create_with_flags_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_create_with_flags_ret);
    
    hf = hf_remote_domain_create_with_flags_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_define_xml_args__xml = -1;
static int hf_remote_domain_define_xml_args = -1;
static gint ett_remote_domain_define_xml_args = -1;
static gboolean dissect_xdr_remote_domain_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_define_xml_args);
    
    hf = hf_remote_domain_define_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_define_xml_ret__dom = -1;
static int hf_remote_domain_define_xml_ret = -1;
static gint ett_remote_domain_define_xml_ret = -1;
static gboolean dissect_xdr_remote_domain_define_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_define_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_define_xml_ret);
    
    hf = hf_remote_domain_define_xml_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_undefine_args__dom = -1;
static int hf_remote_domain_undefine_args = -1;
static gint ett_remote_domain_undefine_args = -1;
static gboolean dissect_xdr_remote_domain_undefine_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_undefine_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_undefine_args);
    
    hf = hf_remote_domain_undefine_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_undefine_flags_args__dom = -1;
static int hf_remote_domain_undefine_flags_args__flags = -1;
static int hf_remote_domain_undefine_flags_args = -1;
static gint ett_remote_domain_undefine_flags_args = -1;
static gboolean dissect_xdr_remote_domain_undefine_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_undefine_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_undefine_flags_args);
    
    hf = hf_remote_domain_undefine_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_undefine_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_inject_nmi_args__dom = -1;
static int hf_remote_domain_inject_nmi_args__flags = -1;
static int hf_remote_domain_inject_nmi_args = -1;
static gint ett_remote_domain_inject_nmi_args = -1;
static gboolean dissect_xdr_remote_domain_inject_nmi_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_inject_nmi_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_inject_nmi_args);
    
    hf = hf_remote_domain_inject_nmi_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_inject_nmi_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_send_key_args__dom = -1;
static int hf_remote_domain_send_key_args__codeset = -1;
static int hf_remote_domain_send_key_args__holdtime = -1;
static int hf_remote_domain_send_key_args__keycodes = -1;
static int hf_remote_domain_send_key_args__keycodes___ELEMENT_ = -1;
static gint ett_remote_domain_send_key_args__keycodes = -1;
static int hf_remote_domain_send_key_args__flags = -1;
static int hf_remote_domain_send_key_args = -1;
static gint ett_remote_domain_send_key_args = -1;
static gboolean dissect_xdr_remote_domain_send_key_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_send_key_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_send_key_args);
    
    hf = hf_remote_domain_send_key_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_send_key_args__codeset;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_send_key_args__holdtime;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_send_key_args__keycodes;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_send_key_args__keycodes, hf_remote_domain_send_key_args__keycodes___ELEMENT_, "u_int", REMOTE_DOMAIN_SEND_KEY_MAX, dissect_xdr_u_int)) return FALSE;
    
    hf = hf_remote_domain_send_key_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_send_process_signal_args__dom = -1;
static int hf_remote_domain_send_process_signal_args__pid_value = -1;
static int hf_remote_domain_send_process_signal_args__signum = -1;
static int hf_remote_domain_send_process_signal_args__flags = -1;
static int hf_remote_domain_send_process_signal_args = -1;
static gint ett_remote_domain_send_process_signal_args = -1;
static gboolean dissect_xdr_remote_domain_send_process_signal_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_send_process_signal_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_send_process_signal_args);
    
    hf = hf_remote_domain_send_process_signal_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_send_process_signal_args__pid_value;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_send_process_signal_args__signum;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_send_process_signal_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_vcpus_args__dom = -1;
static int hf_remote_domain_set_vcpus_args__nvcpus = -1;
static int hf_remote_domain_set_vcpus_args = -1;
static gint ett_remote_domain_set_vcpus_args = -1;
static gboolean dissect_xdr_remote_domain_set_vcpus_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_vcpus_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_vcpus_args);
    
    hf = hf_remote_domain_set_vcpus_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_vcpus_args__nvcpus;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_vcpus_flags_args__dom = -1;
static int hf_remote_domain_set_vcpus_flags_args__nvcpus = -1;
static int hf_remote_domain_set_vcpus_flags_args__flags = -1;
static int hf_remote_domain_set_vcpus_flags_args = -1;
static gint ett_remote_domain_set_vcpus_flags_args = -1;
static gboolean dissect_xdr_remote_domain_set_vcpus_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_vcpus_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_vcpus_flags_args);
    
    hf = hf_remote_domain_set_vcpus_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_vcpus_flags_args__nvcpus;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_vcpus_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_vcpus_flags_args__dom = -1;
static int hf_remote_domain_get_vcpus_flags_args__flags = -1;
static int hf_remote_domain_get_vcpus_flags_args = -1;
static gint ett_remote_domain_get_vcpus_flags_args = -1;
static gboolean dissect_xdr_remote_domain_get_vcpus_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_vcpus_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_vcpus_flags_args);
    
    hf = hf_remote_domain_get_vcpus_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_vcpus_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_vcpus_flags_ret__num = -1;
static int hf_remote_domain_get_vcpus_flags_ret = -1;
static gint ett_remote_domain_get_vcpus_flags_ret = -1;
static gboolean dissect_xdr_remote_domain_get_vcpus_flags_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_vcpus_flags_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_vcpus_flags_ret);
    
    hf = hf_remote_domain_get_vcpus_flags_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_pin_vcpu_args__dom = -1;
static int hf_remote_domain_pin_vcpu_args__vcpu = -1;
static int hf_remote_domain_pin_vcpu_args__cpumap = -1;
static int hf_remote_domain_pin_vcpu_args = -1;
static gint ett_remote_domain_pin_vcpu_args = -1;
static gboolean dissect_xdr_remote_domain_pin_vcpu_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_pin_vcpu_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_pin_vcpu_args);
    
    hf = hf_remote_domain_pin_vcpu_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pin_vcpu_args__vcpu;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pin_vcpu_args__cpumap;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAP_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_pin_vcpu_flags_args__dom = -1;
static int hf_remote_domain_pin_vcpu_flags_args__vcpu = -1;
static int hf_remote_domain_pin_vcpu_flags_args__cpumap = -1;
static int hf_remote_domain_pin_vcpu_flags_args__flags = -1;
static int hf_remote_domain_pin_vcpu_flags_args = -1;
static gint ett_remote_domain_pin_vcpu_flags_args = -1;
static gboolean dissect_xdr_remote_domain_pin_vcpu_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_pin_vcpu_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_pin_vcpu_flags_args);
    
    hf = hf_remote_domain_pin_vcpu_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pin_vcpu_flags_args__vcpu;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pin_vcpu_flags_args__cpumap;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAP_MAX)) return FALSE;
    
    hf = hf_remote_domain_pin_vcpu_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_vcpu_pin_info_args__dom = -1;
static int hf_remote_domain_get_vcpu_pin_info_args__ncpumaps = -1;
static int hf_remote_domain_get_vcpu_pin_info_args__maplen = -1;
static int hf_remote_domain_get_vcpu_pin_info_args__flags = -1;
static int hf_remote_domain_get_vcpu_pin_info_args = -1;
static gint ett_remote_domain_get_vcpu_pin_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_vcpu_pin_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_vcpu_pin_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_vcpu_pin_info_args);
    
    hf = hf_remote_domain_get_vcpu_pin_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_vcpu_pin_info_args__ncpumaps;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_vcpu_pin_info_args__maplen;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_vcpu_pin_info_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_vcpu_pin_info_ret__cpumaps = -1;
static int hf_remote_domain_get_vcpu_pin_info_ret__num = -1;
static int hf_remote_domain_get_vcpu_pin_info_ret = -1;
static gint ett_remote_domain_get_vcpu_pin_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_vcpu_pin_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_vcpu_pin_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_vcpu_pin_info_ret);
    
    hf = hf_remote_domain_get_vcpu_pin_info_ret__cpumaps;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAPS_MAX)) return FALSE;
    
    hf = hf_remote_domain_get_vcpu_pin_info_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_pin_emulator_args__dom = -1;
static int hf_remote_domain_pin_emulator_args__cpumap = -1;
static int hf_remote_domain_pin_emulator_args__flags = -1;
static int hf_remote_domain_pin_emulator_args = -1;
static gint ett_remote_domain_pin_emulator_args = -1;
static gboolean dissect_xdr_remote_domain_pin_emulator_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_pin_emulator_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_pin_emulator_args);
    
    hf = hf_remote_domain_pin_emulator_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_pin_emulator_args__cpumap;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAP_MAX)) return FALSE;
    
    hf = hf_remote_domain_pin_emulator_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_emulator_pin_info_args__dom = -1;
static int hf_remote_domain_get_emulator_pin_info_args__maplen = -1;
static int hf_remote_domain_get_emulator_pin_info_args__flags = -1;
static int hf_remote_domain_get_emulator_pin_info_args = -1;
static gint ett_remote_domain_get_emulator_pin_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_emulator_pin_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_emulator_pin_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_emulator_pin_info_args);
    
    hf = hf_remote_domain_get_emulator_pin_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_emulator_pin_info_args__maplen;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_emulator_pin_info_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_emulator_pin_info_ret__cpumaps = -1;
static int hf_remote_domain_get_emulator_pin_info_ret__ret = -1;
static int hf_remote_domain_get_emulator_pin_info_ret = -1;
static gint ett_remote_domain_get_emulator_pin_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_emulator_pin_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_emulator_pin_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_emulator_pin_info_ret);
    
    hf = hf_remote_domain_get_emulator_pin_info_ret__cpumaps;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAPS_MAX)) return FALSE;
    
    hf = hf_remote_domain_get_emulator_pin_info_ret__ret;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_vcpus_args__dom = -1;
static int hf_remote_domain_get_vcpus_args__maxinfo = -1;
static int hf_remote_domain_get_vcpus_args__maplen = -1;
static int hf_remote_domain_get_vcpus_args = -1;
static gint ett_remote_domain_get_vcpus_args = -1;
static gboolean dissect_xdr_remote_domain_get_vcpus_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_vcpus_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_vcpus_args);
    
    hf = hf_remote_domain_get_vcpus_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_vcpus_args__maxinfo;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_vcpus_args__maplen;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_vcpus_ret__info = -1;
static int hf_remote_domain_get_vcpus_ret__info___ELEMENT_ = -1;
static gint ett_remote_domain_get_vcpus_ret__info = -1;
static int hf_remote_domain_get_vcpus_ret__cpumaps = -1;
static int hf_remote_domain_get_vcpus_ret = -1;
static gint ett_remote_domain_get_vcpus_ret = -1;
static gboolean dissect_xdr_remote_domain_get_vcpus_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_vcpus_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_vcpus_ret);
    
    hf = hf_remote_domain_get_vcpus_ret__info;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_vcpus_ret__info, hf_remote_domain_get_vcpus_ret__info___ELEMENT_, "remote_vcpu_info", REMOTE_VCPUINFO_MAX, dissect_xdr_remote_vcpu_info)) return FALSE;
    
    hf = hf_remote_domain_get_vcpus_ret__cpumaps;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAPS_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_max_vcpus_args__dom = -1;
static int hf_remote_domain_get_max_vcpus_args = -1;
static gint ett_remote_domain_get_max_vcpus_args = -1;
static gboolean dissect_xdr_remote_domain_get_max_vcpus_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_max_vcpus_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_max_vcpus_args);
    
    hf = hf_remote_domain_get_max_vcpus_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_max_vcpus_ret__num = -1;
static int hf_remote_domain_get_max_vcpus_ret = -1;
static gint ett_remote_domain_get_max_vcpus_ret = -1;
static gboolean dissect_xdr_remote_domain_get_max_vcpus_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_max_vcpus_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_max_vcpus_ret);
    
    hf = hf_remote_domain_get_max_vcpus_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_security_label_args__dom = -1;
static int hf_remote_domain_get_security_label_args = -1;
static gint ett_remote_domain_get_security_label_args = -1;
static gboolean dissect_xdr_remote_domain_get_security_label_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_security_label_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_security_label_args);
    
    hf = hf_remote_domain_get_security_label_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_security_label_ret__label = -1;
static int hf_remote_domain_get_security_label_ret__label___ELEMENT_ = -1;
static gint ett_remote_domain_get_security_label_ret__label = -1;
static int hf_remote_domain_get_security_label_ret__enforcing = -1;
static int hf_remote_domain_get_security_label_ret = -1;
static gint ett_remote_domain_get_security_label_ret = -1;
static gboolean dissect_xdr_remote_domain_get_security_label_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_security_label_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_security_label_ret);
    
    hf = hf_remote_domain_get_security_label_ret__label;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_security_label_ret__label, hf_remote_domain_get_security_label_ret__label___ELEMENT_, "char", REMOTE_SECURITY_LABEL_MAX, dissect_xdr_char)) return FALSE;
    
    hf = hf_remote_domain_get_security_label_ret__enforcing;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_security_label_list_args__dom = -1;
static int hf_remote_domain_get_security_label_list_args = -1;
static gint ett_remote_domain_get_security_label_list_args = -1;
static gboolean dissect_xdr_remote_domain_get_security_label_list_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_security_label_list_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_security_label_list_args);
    
    hf = hf_remote_domain_get_security_label_list_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_security_label_list_ret__labels = -1;
static int hf_remote_domain_get_security_label_list_ret__labels___ELEMENT_ = -1;
static gint ett_remote_domain_get_security_label_list_ret__labels = -1;
static int hf_remote_domain_get_security_label_list_ret__ret = -1;
static int hf_remote_domain_get_security_label_list_ret = -1;
static gint ett_remote_domain_get_security_label_list_ret = -1;
static gboolean dissect_xdr_remote_domain_get_security_label_list_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_security_label_list_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_security_label_list_ret);
    
    hf = hf_remote_domain_get_security_label_list_ret__labels;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_security_label_list_ret__labels, hf_remote_domain_get_security_label_list_ret__labels___ELEMENT_, "remote_domain_get_security_label_ret", REMOTE_SECURITY_LABEL_LIST_MAX, dissect_xdr_remote_domain_get_security_label_ret)) return FALSE;
    
    hf = hf_remote_domain_get_security_label_list_ret__ret;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_security_model_ret__model = -1;
static int hf_remote_node_get_security_model_ret__model___ELEMENT_ = -1;
static gint ett_remote_node_get_security_model_ret__model = -1;
static int hf_remote_node_get_security_model_ret__doi = -1;
static int hf_remote_node_get_security_model_ret__doi___ELEMENT_ = -1;
static gint ett_remote_node_get_security_model_ret__doi = -1;
static int hf_remote_node_get_security_model_ret = -1;
static gint ett_remote_node_get_security_model_ret = -1;
static gboolean dissect_xdr_remote_node_get_security_model_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_security_model_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_security_model_ret);
    
    hf = hf_remote_node_get_security_model_ret__model;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_get_security_model_ret__model, hf_remote_node_get_security_model_ret__model___ELEMENT_, "char", REMOTE_SECURITY_MODEL_MAX, dissect_xdr_char)) return FALSE;
    
    hf = hf_remote_node_get_security_model_ret__doi;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_get_security_model_ret__doi, hf_remote_node_get_security_model_ret__doi___ELEMENT_, "char", REMOTE_SECURITY_DOI_MAX, dissect_xdr_char)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_attach_device_args__dom = -1;
static int hf_remote_domain_attach_device_args__xml = -1;
static int hf_remote_domain_attach_device_args = -1;
static gint ett_remote_domain_attach_device_args = -1;
static gboolean dissect_xdr_remote_domain_attach_device_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_attach_device_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_attach_device_args);
    
    hf = hf_remote_domain_attach_device_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_attach_device_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_attach_device_flags_args__dom = -1;
static int hf_remote_domain_attach_device_flags_args__xml = -1;
static int hf_remote_domain_attach_device_flags_args__flags = -1;
static int hf_remote_domain_attach_device_flags_args = -1;
static gint ett_remote_domain_attach_device_flags_args = -1;
static gboolean dissect_xdr_remote_domain_attach_device_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_attach_device_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_attach_device_flags_args);
    
    hf = hf_remote_domain_attach_device_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_attach_device_flags_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_attach_device_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_detach_device_args__dom = -1;
static int hf_remote_domain_detach_device_args__xml = -1;
static int hf_remote_domain_detach_device_args = -1;
static gint ett_remote_domain_detach_device_args = -1;
static gboolean dissect_xdr_remote_domain_detach_device_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_detach_device_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_detach_device_args);
    
    hf = hf_remote_domain_detach_device_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_detach_device_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_detach_device_flags_args__dom = -1;
static int hf_remote_domain_detach_device_flags_args__xml = -1;
static int hf_remote_domain_detach_device_flags_args__flags = -1;
static int hf_remote_domain_detach_device_flags_args = -1;
static gint ett_remote_domain_detach_device_flags_args = -1;
static gboolean dissect_xdr_remote_domain_detach_device_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_detach_device_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_detach_device_flags_args);
    
    hf = hf_remote_domain_detach_device_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_detach_device_flags_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_detach_device_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_update_device_flags_args__dom = -1;
static int hf_remote_domain_update_device_flags_args__xml = -1;
static int hf_remote_domain_update_device_flags_args__flags = -1;
static int hf_remote_domain_update_device_flags_args = -1;
static gint ett_remote_domain_update_device_flags_args = -1;
static gboolean dissect_xdr_remote_domain_update_device_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_update_device_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_update_device_flags_args);
    
    hf = hf_remote_domain_update_device_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_update_device_flags_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_update_device_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_autostart_args__dom = -1;
static int hf_remote_domain_get_autostart_args = -1;
static gint ett_remote_domain_get_autostart_args = -1;
static gboolean dissect_xdr_remote_domain_get_autostart_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_autostart_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_autostart_args);
    
    hf = hf_remote_domain_get_autostart_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_autostart_ret__autostart = -1;
static int hf_remote_domain_get_autostart_ret = -1;
static gint ett_remote_domain_get_autostart_ret = -1;
static gboolean dissect_xdr_remote_domain_get_autostart_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_autostart_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_autostart_ret);
    
    hf = hf_remote_domain_get_autostart_ret__autostart;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_autostart_args__dom = -1;
static int hf_remote_domain_set_autostart_args__autostart = -1;
static int hf_remote_domain_set_autostart_args = -1;
static gint ett_remote_domain_set_autostart_args = -1;
static gboolean dissect_xdr_remote_domain_set_autostart_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_autostart_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_autostart_args);
    
    hf = hf_remote_domain_set_autostart_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_autostart_args__autostart;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_metadata_args__dom = -1;
static int hf_remote_domain_set_metadata_args__type = -1;
static int hf_remote_domain_set_metadata_args__metadata = -1;
static int hf_remote_domain_set_metadata_args__key = -1;
static int hf_remote_domain_set_metadata_args__uri = -1;
static int hf_remote_domain_set_metadata_args__flags = -1;
static int hf_remote_domain_set_metadata_args = -1;
static gint ett_remote_domain_set_metadata_args = -1;
static gboolean dissect_xdr_remote_domain_set_metadata_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_metadata_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_metadata_args);
    
    hf = hf_remote_domain_set_metadata_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_metadata_args__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_metadata_args__metadata;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_metadata_args__key;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_metadata_args__uri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_metadata_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_metadata_args__dom = -1;
static int hf_remote_domain_get_metadata_args__type = -1;
static int hf_remote_domain_get_metadata_args__uri = -1;
static int hf_remote_domain_get_metadata_args__flags = -1;
static int hf_remote_domain_get_metadata_args = -1;
static gint ett_remote_domain_get_metadata_args = -1;
static gboolean dissect_xdr_remote_domain_get_metadata_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_metadata_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_metadata_args);
    
    hf = hf_remote_domain_get_metadata_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_metadata_args__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_metadata_args__uri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_metadata_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_metadata_ret__metadata = -1;
static int hf_remote_domain_get_metadata_ret = -1;
static gint ett_remote_domain_get_metadata_ret = -1;
static gboolean dissect_xdr_remote_domain_get_metadata_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_metadata_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_metadata_ret);
    
    hf = hf_remote_domain_get_metadata_ret__metadata;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_job_abort_args__dom = -1;
static int hf_remote_domain_block_job_abort_args__path = -1;
static int hf_remote_domain_block_job_abort_args__flags = -1;
static int hf_remote_domain_block_job_abort_args = -1;
static gint ett_remote_domain_block_job_abort_args = -1;
static gboolean dissect_xdr_remote_domain_block_job_abort_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_job_abort_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_job_abort_args);
    
    hf = hf_remote_domain_block_job_abort_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_job_abort_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_job_abort_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_block_job_info_args__dom = -1;
static int hf_remote_domain_get_block_job_info_args__path = -1;
static int hf_remote_domain_get_block_job_info_args__flags = -1;
static int hf_remote_domain_get_block_job_info_args = -1;
static gint ett_remote_domain_get_block_job_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_block_job_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_block_job_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_block_job_info_args);
    
    hf = hf_remote_domain_get_block_job_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_job_info_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_job_info_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_block_job_info_ret__found = -1;
static int hf_remote_domain_get_block_job_info_ret__type = -1;
static int hf_remote_domain_get_block_job_info_ret__bandwidth = -1;
static int hf_remote_domain_get_block_job_info_ret__cur = -1;
static int hf_remote_domain_get_block_job_info_ret__end = -1;
static int hf_remote_domain_get_block_job_info_ret = -1;
static gint ett_remote_domain_get_block_job_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_block_job_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_block_job_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_block_job_info_ret);
    
    hf = hf_remote_domain_get_block_job_info_ret__found;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_job_info_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_job_info_ret__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_job_info_ret__cur;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_job_info_ret__end;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_job_set_speed_args__dom = -1;
static int hf_remote_domain_block_job_set_speed_args__path = -1;
static int hf_remote_domain_block_job_set_speed_args__bandwidth = -1;
static int hf_remote_domain_block_job_set_speed_args__flags = -1;
static int hf_remote_domain_block_job_set_speed_args = -1;
static gint ett_remote_domain_block_job_set_speed_args = -1;
static gboolean dissect_xdr_remote_domain_block_job_set_speed_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_job_set_speed_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_job_set_speed_args);
    
    hf = hf_remote_domain_block_job_set_speed_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_job_set_speed_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_job_set_speed_args__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_job_set_speed_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_pull_args__dom = -1;
static int hf_remote_domain_block_pull_args__path = -1;
static int hf_remote_domain_block_pull_args__bandwidth = -1;
static int hf_remote_domain_block_pull_args__flags = -1;
static int hf_remote_domain_block_pull_args = -1;
static gint ett_remote_domain_block_pull_args = -1;
static gboolean dissect_xdr_remote_domain_block_pull_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_pull_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_pull_args);
    
    hf = hf_remote_domain_block_pull_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_pull_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_pull_args__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_pull_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_rebase_args__dom = -1;
static int hf_remote_domain_block_rebase_args__path = -1;
static int hf_remote_domain_block_rebase_args__base = -1;
static int hf_remote_domain_block_rebase_args__bandwidth = -1;
static int hf_remote_domain_block_rebase_args__flags = -1;
static int hf_remote_domain_block_rebase_args = -1;
static gint ett_remote_domain_block_rebase_args = -1;
static gboolean dissect_xdr_remote_domain_block_rebase_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_rebase_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_rebase_args);
    
    hf = hf_remote_domain_block_rebase_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_rebase_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_rebase_args__base;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_rebase_args__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_rebase_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_block_commit_args__dom = -1;
static int hf_remote_domain_block_commit_args__disk = -1;
static int hf_remote_domain_block_commit_args__base = -1;
static int hf_remote_domain_block_commit_args__top = -1;
static int hf_remote_domain_block_commit_args__bandwidth = -1;
static int hf_remote_domain_block_commit_args__flags = -1;
static int hf_remote_domain_block_commit_args = -1;
static gint ett_remote_domain_block_commit_args = -1;
static gboolean dissect_xdr_remote_domain_block_commit_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_block_commit_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_block_commit_args);
    
    hf = hf_remote_domain_block_commit_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_commit_args__disk;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_commit_args__base;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_commit_args__top;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_commit_args__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_block_commit_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_set_block_io_tune_args__dom = -1;
static int hf_remote_domain_set_block_io_tune_args__disk = -1;
static int hf_remote_domain_set_block_io_tune_args__params = -1;
static int hf_remote_domain_set_block_io_tune_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_set_block_io_tune_args__params = -1;
static int hf_remote_domain_set_block_io_tune_args__flags = -1;
static int hf_remote_domain_set_block_io_tune_args = -1;
static gint ett_remote_domain_set_block_io_tune_args = -1;
static gboolean dissect_xdr_remote_domain_set_block_io_tune_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_set_block_io_tune_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_set_block_io_tune_args);
    
    hf = hf_remote_domain_set_block_io_tune_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_block_io_tune_args__disk;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_set_block_io_tune_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_set_block_io_tune_args__params, hf_remote_domain_set_block_io_tune_args__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_BLOCK_IO_TUNE_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_set_block_io_tune_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_block_io_tune_args__dom = -1;
static int hf_remote_domain_get_block_io_tune_args__disk = -1;
static int hf_remote_domain_get_block_io_tune_args__nparams = -1;
static int hf_remote_domain_get_block_io_tune_args__flags = -1;
static int hf_remote_domain_get_block_io_tune_args = -1;
static gint ett_remote_domain_get_block_io_tune_args = -1;
static gboolean dissect_xdr_remote_domain_get_block_io_tune_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_block_io_tune_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_block_io_tune_args);
    
    hf = hf_remote_domain_get_block_io_tune_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_io_tune_args__disk;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_io_tune_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_block_io_tune_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_block_io_tune_ret__params = -1;
static int hf_remote_domain_get_block_io_tune_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_block_io_tune_ret__params = -1;
static int hf_remote_domain_get_block_io_tune_ret__nparams = -1;
static int hf_remote_domain_get_block_io_tune_ret = -1;
static gint ett_remote_domain_get_block_io_tune_ret = -1;
static gboolean dissect_xdr_remote_domain_get_block_io_tune_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_block_io_tune_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_block_io_tune_ret);
    
    hf = hf_remote_domain_get_block_io_tune_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_block_io_tune_ret__params, hf_remote_domain_get_block_io_tune_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_BLOCK_IO_TUNE_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_get_block_io_tune_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_cpu_stats_args__dom = -1;
static int hf_remote_domain_get_cpu_stats_args__nparams = -1;
static int hf_remote_domain_get_cpu_stats_args__start_cpu = -1;
static int hf_remote_domain_get_cpu_stats_args__ncpus = -1;
static int hf_remote_domain_get_cpu_stats_args__flags = -1;
static int hf_remote_domain_get_cpu_stats_args = -1;
static gint ett_remote_domain_get_cpu_stats_args = -1;
static gboolean dissect_xdr_remote_domain_get_cpu_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_cpu_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_cpu_stats_args);
    
    hf = hf_remote_domain_get_cpu_stats_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_cpu_stats_args__nparams;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_cpu_stats_args__start_cpu;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_cpu_stats_args__ncpus;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_cpu_stats_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_cpu_stats_ret__params = -1;
static int hf_remote_domain_get_cpu_stats_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_cpu_stats_ret__params = -1;
static int hf_remote_domain_get_cpu_stats_ret__nparams = -1;
static int hf_remote_domain_get_cpu_stats_ret = -1;
static gint ett_remote_domain_get_cpu_stats_ret = -1;
static gboolean dissect_xdr_remote_domain_get_cpu_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_cpu_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_cpu_stats_ret);
    
    hf = hf_remote_domain_get_cpu_stats_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_cpu_stats_ret__params, hf_remote_domain_get_cpu_stats_ret__params___ELEMENT_, "remote_typed_param", REMOTE_DOMAIN_GET_CPU_STATS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_get_cpu_stats_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_hostname_args__dom = -1;
static int hf_remote_domain_get_hostname_args__flags = -1;
static int hf_remote_domain_get_hostname_args = -1;
static gint ett_remote_domain_get_hostname_args = -1;
static gboolean dissect_xdr_remote_domain_get_hostname_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_hostname_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_hostname_args);
    
    hf = hf_remote_domain_get_hostname_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_hostname_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_hostname_ret__hostname = -1;
static int hf_remote_domain_get_hostname_ret = -1;
static gint ett_remote_domain_get_hostname_ret = -1;
static gboolean dissect_xdr_remote_domain_get_hostname_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_hostname_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_hostname_ret);
    
    hf = hf_remote_domain_get_hostname_ret__hostname;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_networks_ret__num = -1;
static int hf_remote_connect_num_of_networks_ret = -1;
static gint ett_remote_connect_num_of_networks_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_networks_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_networks_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_networks_ret);
    
    hf = hf_remote_connect_num_of_networks_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_networks_args__maxnames = -1;
static int hf_remote_connect_list_networks_args = -1;
static gint ett_remote_connect_list_networks_args = -1;
static gboolean dissect_xdr_remote_connect_list_networks_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_networks_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_networks_args);
    
    hf = hf_remote_connect_list_networks_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_networks_ret__names = -1;
static int hf_remote_connect_list_networks_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_networks_ret__names = -1;
static int hf_remote_connect_list_networks_ret = -1;
static gint ett_remote_connect_list_networks_ret = -1;
static gboolean dissect_xdr_remote_connect_list_networks_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_networks_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_networks_ret);
    
    hf = hf_remote_connect_list_networks_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_networks_ret__names, hf_remote_connect_list_networks_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_NETWORK_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_defined_networks_ret__num = -1;
static int hf_remote_connect_num_of_defined_networks_ret = -1;
static gint ett_remote_connect_num_of_defined_networks_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_defined_networks_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_defined_networks_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_defined_networks_ret);
    
    hf = hf_remote_connect_num_of_defined_networks_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_networks_args__maxnames = -1;
static int hf_remote_connect_list_defined_networks_args = -1;
static gint ett_remote_connect_list_defined_networks_args = -1;
static gboolean dissect_xdr_remote_connect_list_defined_networks_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_networks_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_networks_args);
    
    hf = hf_remote_connect_list_defined_networks_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_networks_ret__names = -1;
static int hf_remote_connect_list_defined_networks_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_defined_networks_ret__names = -1;
static int hf_remote_connect_list_defined_networks_ret = -1;
static gint ett_remote_connect_list_defined_networks_ret = -1;
static gboolean dissect_xdr_remote_connect_list_defined_networks_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_networks_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_networks_ret);
    
    hf = hf_remote_connect_list_defined_networks_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_defined_networks_ret__names, hf_remote_connect_list_defined_networks_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_NETWORK_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_lookup_by_uuid_args__uuid = -1;
static int hf_remote_network_lookup_by_uuid_args = -1;
static gint ett_remote_network_lookup_by_uuid_args = -1;
static gboolean dissect_xdr_remote_network_lookup_by_uuid_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_lookup_by_uuid_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_lookup_by_uuid_args);
    
    hf = hf_remote_network_lookup_by_uuid_args__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_lookup_by_uuid_ret__net = -1;
static int hf_remote_network_lookup_by_uuid_ret = -1;
static gint ett_remote_network_lookup_by_uuid_ret = -1;
static gboolean dissect_xdr_remote_network_lookup_by_uuid_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_lookup_by_uuid_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_lookup_by_uuid_ret);
    
    hf = hf_remote_network_lookup_by_uuid_ret__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_lookup_by_name_args__name = -1;
static int hf_remote_network_lookup_by_name_args = -1;
static gint ett_remote_network_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_network_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_lookup_by_name_args);
    
    hf = hf_remote_network_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_lookup_by_name_ret__net = -1;
static int hf_remote_network_lookup_by_name_ret = -1;
static gint ett_remote_network_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_network_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_lookup_by_name_ret);
    
    hf = hf_remote_network_lookup_by_name_ret__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_create_xml_args__xml = -1;
static int hf_remote_network_create_xml_args = -1;
static gint ett_remote_network_create_xml_args = -1;
static gboolean dissect_xdr_remote_network_create_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_create_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_create_xml_args);
    
    hf = hf_remote_network_create_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_create_xml_ret__net = -1;
static int hf_remote_network_create_xml_ret = -1;
static gint ett_remote_network_create_xml_ret = -1;
static gboolean dissect_xdr_remote_network_create_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_create_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_create_xml_ret);
    
    hf = hf_remote_network_create_xml_ret__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_define_xml_args__xml = -1;
static int hf_remote_network_define_xml_args = -1;
static gint ett_remote_network_define_xml_args = -1;
static gboolean dissect_xdr_remote_network_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_define_xml_args);
    
    hf = hf_remote_network_define_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_define_xml_ret__net = -1;
static int hf_remote_network_define_xml_ret = -1;
static gint ett_remote_network_define_xml_ret = -1;
static gboolean dissect_xdr_remote_network_define_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_define_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_define_xml_ret);
    
    hf = hf_remote_network_define_xml_ret__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_undefine_args__net = -1;
static int hf_remote_network_undefine_args = -1;
static gint ett_remote_network_undefine_args = -1;
static gboolean dissect_xdr_remote_network_undefine_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_undefine_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_undefine_args);
    
    hf = hf_remote_network_undefine_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_update_args__net = -1;
static int hf_remote_network_update_args__command = -1;
static int hf_remote_network_update_args__section = -1;
static int hf_remote_network_update_args__parentIndex = -1;
static int hf_remote_network_update_args__xml = -1;
static int hf_remote_network_update_args__flags = -1;
static int hf_remote_network_update_args = -1;
static gint ett_remote_network_update_args = -1;
static gboolean dissect_xdr_remote_network_update_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_update_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_update_args);
    
    hf = hf_remote_network_update_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_update_args__command;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_update_args__section;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_update_args__parentIndex;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_update_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_update_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_create_args__net = -1;
static int hf_remote_network_create_args = -1;
static gint ett_remote_network_create_args = -1;
static gboolean dissect_xdr_remote_network_create_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_create_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_create_args);
    
    hf = hf_remote_network_create_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_destroy_args__net = -1;
static int hf_remote_network_destroy_args = -1;
static gint ett_remote_network_destroy_args = -1;
static gboolean dissect_xdr_remote_network_destroy_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_destroy_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_destroy_args);
    
    hf = hf_remote_network_destroy_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_get_xml_desc_args__net = -1;
static int hf_remote_network_get_xml_desc_args__flags = -1;
static int hf_remote_network_get_xml_desc_args = -1;
static gint ett_remote_network_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_network_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_get_xml_desc_args);
    
    hf = hf_remote_network_get_xml_desc_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_get_xml_desc_ret__xml = -1;
static int hf_remote_network_get_xml_desc_ret = -1;
static gint ett_remote_network_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_network_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_get_xml_desc_ret);
    
    hf = hf_remote_network_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_get_bridge_name_args__net = -1;
static int hf_remote_network_get_bridge_name_args = -1;
static gint ett_remote_network_get_bridge_name_args = -1;
static gboolean dissect_xdr_remote_network_get_bridge_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_get_bridge_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_get_bridge_name_args);
    
    hf = hf_remote_network_get_bridge_name_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_get_bridge_name_ret__name = -1;
static int hf_remote_network_get_bridge_name_ret = -1;
static gint ett_remote_network_get_bridge_name_ret = -1;
static gboolean dissect_xdr_remote_network_get_bridge_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_get_bridge_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_get_bridge_name_ret);
    
    hf = hf_remote_network_get_bridge_name_ret__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_get_autostart_args__net = -1;
static int hf_remote_network_get_autostart_args = -1;
static gint ett_remote_network_get_autostart_args = -1;
static gboolean dissect_xdr_remote_network_get_autostart_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_get_autostart_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_get_autostart_args);
    
    hf = hf_remote_network_get_autostart_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_get_autostart_ret__autostart = -1;
static int hf_remote_network_get_autostart_ret = -1;
static gint ett_remote_network_get_autostart_ret = -1;
static gboolean dissect_xdr_remote_network_get_autostart_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_get_autostart_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_get_autostart_ret);
    
    hf = hf_remote_network_get_autostart_ret__autostart;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_set_autostart_args__net = -1;
static int hf_remote_network_set_autostart_args__autostart = -1;
static int hf_remote_network_set_autostart_args = -1;
static gint ett_remote_network_set_autostart_args = -1;
static gboolean dissect_xdr_remote_network_set_autostart_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_set_autostart_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_set_autostart_args);
    
    hf = hf_remote_network_set_autostart_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_network_set_autostart_args__autostart;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_nwfilters_ret__num = -1;
static int hf_remote_connect_num_of_nwfilters_ret = -1;
static gint ett_remote_connect_num_of_nwfilters_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_nwfilters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_nwfilters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_nwfilters_ret);
    
    hf = hf_remote_connect_num_of_nwfilters_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_nwfilters_args__maxnames = -1;
static int hf_remote_connect_list_nwfilters_args = -1;
static gint ett_remote_connect_list_nwfilters_args = -1;
static gboolean dissect_xdr_remote_connect_list_nwfilters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_nwfilters_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_nwfilters_args);
    
    hf = hf_remote_connect_list_nwfilters_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_nwfilters_ret__names = -1;
static int hf_remote_connect_list_nwfilters_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_nwfilters_ret__names = -1;
static int hf_remote_connect_list_nwfilters_ret = -1;
static gint ett_remote_connect_list_nwfilters_ret = -1;
static gboolean dissect_xdr_remote_connect_list_nwfilters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_nwfilters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_nwfilters_ret);
    
    hf = hf_remote_connect_list_nwfilters_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_nwfilters_ret__names, hf_remote_connect_list_nwfilters_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_NWFILTER_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_lookup_by_uuid_args__uuid = -1;
static int hf_remote_nwfilter_lookup_by_uuid_args = -1;
static gint ett_remote_nwfilter_lookup_by_uuid_args = -1;
static gboolean dissect_xdr_remote_nwfilter_lookup_by_uuid_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_lookup_by_uuid_args");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_lookup_by_uuid_args);
    
    hf = hf_remote_nwfilter_lookup_by_uuid_args__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_lookup_by_uuid_ret__nwfilter = -1;
static int hf_remote_nwfilter_lookup_by_uuid_ret = -1;
static gint ett_remote_nwfilter_lookup_by_uuid_ret = -1;
static gboolean dissect_xdr_remote_nwfilter_lookup_by_uuid_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_lookup_by_uuid_ret");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_lookup_by_uuid_ret);
    
    hf = hf_remote_nwfilter_lookup_by_uuid_ret__nwfilter;
    if (!dissect_xdr_remote_nonnull_nwfilter(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_lookup_by_name_args__name = -1;
static int hf_remote_nwfilter_lookup_by_name_args = -1;
static gint ett_remote_nwfilter_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_nwfilter_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_lookup_by_name_args);
    
    hf = hf_remote_nwfilter_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_lookup_by_name_ret__nwfilter = -1;
static int hf_remote_nwfilter_lookup_by_name_ret = -1;
static gint ett_remote_nwfilter_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_nwfilter_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_lookup_by_name_ret);
    
    hf = hf_remote_nwfilter_lookup_by_name_ret__nwfilter;
    if (!dissect_xdr_remote_nonnull_nwfilter(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_define_xml_args__xml = -1;
static int hf_remote_nwfilter_define_xml_args = -1;
static gint ett_remote_nwfilter_define_xml_args = -1;
static gboolean dissect_xdr_remote_nwfilter_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_define_xml_args);
    
    hf = hf_remote_nwfilter_define_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_define_xml_ret__nwfilter = -1;
static int hf_remote_nwfilter_define_xml_ret = -1;
static gint ett_remote_nwfilter_define_xml_ret = -1;
static gboolean dissect_xdr_remote_nwfilter_define_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_define_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_define_xml_ret);
    
    hf = hf_remote_nwfilter_define_xml_ret__nwfilter;
    if (!dissect_xdr_remote_nonnull_nwfilter(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_undefine_args__nwfilter = -1;
static int hf_remote_nwfilter_undefine_args = -1;
static gint ett_remote_nwfilter_undefine_args = -1;
static gboolean dissect_xdr_remote_nwfilter_undefine_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_undefine_args");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_undefine_args);
    
    hf = hf_remote_nwfilter_undefine_args__nwfilter;
    if (!dissect_xdr_remote_nonnull_nwfilter(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_get_xml_desc_args__nwfilter = -1;
static int hf_remote_nwfilter_get_xml_desc_args__flags = -1;
static int hf_remote_nwfilter_get_xml_desc_args = -1;
static gint ett_remote_nwfilter_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_nwfilter_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_get_xml_desc_args);
    
    hf = hf_remote_nwfilter_get_xml_desc_args__nwfilter;
    if (!dissect_xdr_remote_nonnull_nwfilter(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_nwfilter_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_nwfilter_get_xml_desc_ret__xml = -1;
static int hf_remote_nwfilter_get_xml_desc_ret = -1;
static gint ett_remote_nwfilter_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_nwfilter_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_nwfilter_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_nwfilter_get_xml_desc_ret);
    
    hf = hf_remote_nwfilter_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_interfaces_ret__num = -1;
static int hf_remote_connect_num_of_interfaces_ret = -1;
static gint ett_remote_connect_num_of_interfaces_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_interfaces_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_interfaces_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_interfaces_ret);
    
    hf = hf_remote_connect_num_of_interfaces_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_interfaces_args__maxnames = -1;
static int hf_remote_connect_list_interfaces_args = -1;
static gint ett_remote_connect_list_interfaces_args = -1;
static gboolean dissect_xdr_remote_connect_list_interfaces_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_interfaces_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_interfaces_args);
    
    hf = hf_remote_connect_list_interfaces_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_interfaces_ret__names = -1;
static int hf_remote_connect_list_interfaces_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_interfaces_ret__names = -1;
static int hf_remote_connect_list_interfaces_ret = -1;
static gint ett_remote_connect_list_interfaces_ret = -1;
static gboolean dissect_xdr_remote_connect_list_interfaces_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_interfaces_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_interfaces_ret);
    
    hf = hf_remote_connect_list_interfaces_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_interfaces_ret__names, hf_remote_connect_list_interfaces_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_INTERFACE_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_defined_interfaces_ret__num = -1;
static int hf_remote_connect_num_of_defined_interfaces_ret = -1;
static gint ett_remote_connect_num_of_defined_interfaces_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_defined_interfaces_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_defined_interfaces_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_defined_interfaces_ret);
    
    hf = hf_remote_connect_num_of_defined_interfaces_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_interfaces_args__maxnames = -1;
static int hf_remote_connect_list_defined_interfaces_args = -1;
static gint ett_remote_connect_list_defined_interfaces_args = -1;
static gboolean dissect_xdr_remote_connect_list_defined_interfaces_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_interfaces_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_interfaces_args);
    
    hf = hf_remote_connect_list_defined_interfaces_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_interfaces_ret__names = -1;
static int hf_remote_connect_list_defined_interfaces_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_defined_interfaces_ret__names = -1;
static int hf_remote_connect_list_defined_interfaces_ret = -1;
static gint ett_remote_connect_list_defined_interfaces_ret = -1;
static gboolean dissect_xdr_remote_connect_list_defined_interfaces_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_interfaces_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_interfaces_ret);
    
    hf = hf_remote_connect_list_defined_interfaces_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_defined_interfaces_ret__names, hf_remote_connect_list_defined_interfaces_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_DEFINED_INTERFACE_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_lookup_by_name_args__name = -1;
static int hf_remote_interface_lookup_by_name_args = -1;
static gint ett_remote_interface_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_interface_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_lookup_by_name_args);
    
    hf = hf_remote_interface_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_lookup_by_name_ret__iface = -1;
static int hf_remote_interface_lookup_by_name_ret = -1;
static gint ett_remote_interface_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_interface_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_interface_lookup_by_name_ret);
    
    hf = hf_remote_interface_lookup_by_name_ret__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_lookup_by_mac_string_args__mac = -1;
static int hf_remote_interface_lookup_by_mac_string_args = -1;
static gint ett_remote_interface_lookup_by_mac_string_args = -1;
static gboolean dissect_xdr_remote_interface_lookup_by_mac_string_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_lookup_by_mac_string_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_lookup_by_mac_string_args);
    
    hf = hf_remote_interface_lookup_by_mac_string_args__mac;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_lookup_by_mac_string_ret__iface = -1;
static int hf_remote_interface_lookup_by_mac_string_ret = -1;
static gint ett_remote_interface_lookup_by_mac_string_ret = -1;
static gboolean dissect_xdr_remote_interface_lookup_by_mac_string_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_lookup_by_mac_string_ret");
    tree = proto_item_add_subtree(ti, ett_remote_interface_lookup_by_mac_string_ret);
    
    hf = hf_remote_interface_lookup_by_mac_string_ret__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_get_xml_desc_args__iface = -1;
static int hf_remote_interface_get_xml_desc_args__flags = -1;
static int hf_remote_interface_get_xml_desc_args = -1;
static gint ett_remote_interface_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_interface_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_get_xml_desc_args);
    
    hf = hf_remote_interface_get_xml_desc_args__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_interface_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_get_xml_desc_ret__xml = -1;
static int hf_remote_interface_get_xml_desc_ret = -1;
static gint ett_remote_interface_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_interface_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_interface_get_xml_desc_ret);
    
    hf = hf_remote_interface_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_define_xml_args__xml = -1;
static int hf_remote_interface_define_xml_args__flags = -1;
static int hf_remote_interface_define_xml_args = -1;
static gint ett_remote_interface_define_xml_args = -1;
static gboolean dissect_xdr_remote_interface_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_define_xml_args);
    
    hf = hf_remote_interface_define_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_interface_define_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_define_xml_ret__iface = -1;
static int hf_remote_interface_define_xml_ret = -1;
static gint ett_remote_interface_define_xml_ret = -1;
static gboolean dissect_xdr_remote_interface_define_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_define_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_interface_define_xml_ret);
    
    hf = hf_remote_interface_define_xml_ret__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_undefine_args__iface = -1;
static int hf_remote_interface_undefine_args = -1;
static gint ett_remote_interface_undefine_args = -1;
static gboolean dissect_xdr_remote_interface_undefine_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_undefine_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_undefine_args);
    
    hf = hf_remote_interface_undefine_args__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_create_args__iface = -1;
static int hf_remote_interface_create_args__flags = -1;
static int hf_remote_interface_create_args = -1;
static gint ett_remote_interface_create_args = -1;
static gboolean dissect_xdr_remote_interface_create_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_create_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_create_args);
    
    hf = hf_remote_interface_create_args__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_interface_create_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_destroy_args__iface = -1;
static int hf_remote_interface_destroy_args__flags = -1;
static int hf_remote_interface_destroy_args = -1;
static gint ett_remote_interface_destroy_args = -1;
static gboolean dissect_xdr_remote_interface_destroy_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_destroy_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_destroy_args);
    
    hf = hf_remote_interface_destroy_args__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_interface_destroy_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_change_begin_args__flags = -1;
static int hf_remote_interface_change_begin_args = -1;
static gint ett_remote_interface_change_begin_args = -1;
static gboolean dissect_xdr_remote_interface_change_begin_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_change_begin_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_change_begin_args);
    
    hf = hf_remote_interface_change_begin_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_change_commit_args__flags = -1;
static int hf_remote_interface_change_commit_args = -1;
static gint ett_remote_interface_change_commit_args = -1;
static gboolean dissect_xdr_remote_interface_change_commit_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_change_commit_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_change_commit_args);
    
    hf = hf_remote_interface_change_commit_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_change_rollback_args__flags = -1;
static int hf_remote_interface_change_rollback_args = -1;
static gint ett_remote_interface_change_rollback_args = -1;
static gboolean dissect_xdr_remote_interface_change_rollback_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_change_rollback_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_change_rollback_args);
    
    hf = hf_remote_interface_change_rollback_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_list_ret__types = -1;
static int hf_remote_auth_list_ret__types___ELEMENT_ = -1;
static gint ett_remote_auth_list_ret__types = -1;
static int hf_remote_auth_list_ret = -1;
static gint ett_remote_auth_list_ret = -1;
static gboolean dissect_xdr_remote_auth_list_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_list_ret");
    tree = proto_item_add_subtree(ti, ett_remote_auth_list_ret);
    
    hf = hf_remote_auth_list_ret__types;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_auth_list_ret__types, hf_remote_auth_list_ret__types___ELEMENT_, "remote_auth_type", REMOTE_AUTH_TYPE_LIST_MAX, dissect_xdr_remote_auth_type)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_sasl_init_ret__mechlist = -1;
static int hf_remote_auth_sasl_init_ret = -1;
static gint ett_remote_auth_sasl_init_ret = -1;
static gboolean dissect_xdr_remote_auth_sasl_init_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_sasl_init_ret");
    tree = proto_item_add_subtree(ti, ett_remote_auth_sasl_init_ret);
    
    hf = hf_remote_auth_sasl_init_ret__mechlist;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_sasl_start_args__mech = -1;
static int hf_remote_auth_sasl_start_args__nil = -1;
static int hf_remote_auth_sasl_start_args__data = -1;
static int hf_remote_auth_sasl_start_args__data___ELEMENT_ = -1;
static gint ett_remote_auth_sasl_start_args__data = -1;
static int hf_remote_auth_sasl_start_args = -1;
static gint ett_remote_auth_sasl_start_args = -1;
static gboolean dissect_xdr_remote_auth_sasl_start_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_sasl_start_args");
    tree = proto_item_add_subtree(ti, ett_remote_auth_sasl_start_args);
    
    hf = hf_remote_auth_sasl_start_args__mech;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_start_args__nil;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_start_args__data;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_auth_sasl_start_args__data, hf_remote_auth_sasl_start_args__data___ELEMENT_, "char", REMOTE_AUTH_SASL_DATA_MAX, dissect_xdr_char)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_sasl_start_ret__complete = -1;
static int hf_remote_auth_sasl_start_ret__nil = -1;
static int hf_remote_auth_sasl_start_ret__data = -1;
static int hf_remote_auth_sasl_start_ret__data___ELEMENT_ = -1;
static gint ett_remote_auth_sasl_start_ret__data = -1;
static int hf_remote_auth_sasl_start_ret = -1;
static gint ett_remote_auth_sasl_start_ret = -1;
static gboolean dissect_xdr_remote_auth_sasl_start_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_sasl_start_ret");
    tree = proto_item_add_subtree(ti, ett_remote_auth_sasl_start_ret);
    
    hf = hf_remote_auth_sasl_start_ret__complete;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_start_ret__nil;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_start_ret__data;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_auth_sasl_start_ret__data, hf_remote_auth_sasl_start_ret__data___ELEMENT_, "char", REMOTE_AUTH_SASL_DATA_MAX, dissect_xdr_char)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_sasl_step_args__nil = -1;
static int hf_remote_auth_sasl_step_args__data = -1;
static int hf_remote_auth_sasl_step_args__data___ELEMENT_ = -1;
static gint ett_remote_auth_sasl_step_args__data = -1;
static int hf_remote_auth_sasl_step_args = -1;
static gint ett_remote_auth_sasl_step_args = -1;
static gboolean dissect_xdr_remote_auth_sasl_step_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_sasl_step_args");
    tree = proto_item_add_subtree(ti, ett_remote_auth_sasl_step_args);
    
    hf = hf_remote_auth_sasl_step_args__nil;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_step_args__data;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_auth_sasl_step_args__data, hf_remote_auth_sasl_step_args__data___ELEMENT_, "char", REMOTE_AUTH_SASL_DATA_MAX, dissect_xdr_char)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_sasl_step_ret__complete = -1;
static int hf_remote_auth_sasl_step_ret__nil = -1;
static int hf_remote_auth_sasl_step_ret__data = -1;
static int hf_remote_auth_sasl_step_ret__data___ELEMENT_ = -1;
static gint ett_remote_auth_sasl_step_ret__data = -1;
static int hf_remote_auth_sasl_step_ret = -1;
static gint ett_remote_auth_sasl_step_ret = -1;
static gboolean dissect_xdr_remote_auth_sasl_step_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_sasl_step_ret");
    tree = proto_item_add_subtree(ti, ett_remote_auth_sasl_step_ret);
    
    hf = hf_remote_auth_sasl_step_ret__complete;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_step_ret__nil;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_auth_sasl_step_ret__data;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_auth_sasl_step_ret__data, hf_remote_auth_sasl_step_ret__data___ELEMENT_, "char", REMOTE_AUTH_SASL_DATA_MAX, dissect_xdr_char)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_auth_polkit_ret__complete = -1;
static int hf_remote_auth_polkit_ret = -1;
static gint ett_remote_auth_polkit_ret = -1;
static gboolean dissect_xdr_remote_auth_polkit_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_auth_polkit_ret");
    tree = proto_item_add_subtree(ti, ett_remote_auth_polkit_ret);
    
    hf = hf_remote_auth_polkit_ret__complete;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_storage_pools_ret__num = -1;
static int hf_remote_connect_num_of_storage_pools_ret = -1;
static gint ett_remote_connect_num_of_storage_pools_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_storage_pools_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_storage_pools_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_storage_pools_ret);
    
    hf = hf_remote_connect_num_of_storage_pools_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_storage_pools_args__maxnames = -1;
static int hf_remote_connect_list_storage_pools_args = -1;
static gint ett_remote_connect_list_storage_pools_args = -1;
static gboolean dissect_xdr_remote_connect_list_storage_pools_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_storage_pools_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_storage_pools_args);
    
    hf = hf_remote_connect_list_storage_pools_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_storage_pools_ret__names = -1;
static int hf_remote_connect_list_storage_pools_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_storage_pools_ret__names = -1;
static int hf_remote_connect_list_storage_pools_ret = -1;
static gint ett_remote_connect_list_storage_pools_ret = -1;
static gboolean dissect_xdr_remote_connect_list_storage_pools_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_storage_pools_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_storage_pools_ret);
    
    hf = hf_remote_connect_list_storage_pools_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_storage_pools_ret__names, hf_remote_connect_list_storage_pools_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_STORAGE_POOL_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_defined_storage_pools_ret__num = -1;
static int hf_remote_connect_num_of_defined_storage_pools_ret = -1;
static gint ett_remote_connect_num_of_defined_storage_pools_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_defined_storage_pools_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_defined_storage_pools_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_defined_storage_pools_ret);
    
    hf = hf_remote_connect_num_of_defined_storage_pools_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_storage_pools_args__maxnames = -1;
static int hf_remote_connect_list_defined_storage_pools_args = -1;
static gint ett_remote_connect_list_defined_storage_pools_args = -1;
static gboolean dissect_xdr_remote_connect_list_defined_storage_pools_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_storage_pools_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_storage_pools_args);
    
    hf = hf_remote_connect_list_defined_storage_pools_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_defined_storage_pools_ret__names = -1;
static int hf_remote_connect_list_defined_storage_pools_ret__names___ELEMENT_ = -1;
static gint ett_remote_connect_list_defined_storage_pools_ret__names = -1;
static int hf_remote_connect_list_defined_storage_pools_ret = -1;
static gint ett_remote_connect_list_defined_storage_pools_ret = -1;
static gboolean dissect_xdr_remote_connect_list_defined_storage_pools_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_defined_storage_pools_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_defined_storage_pools_ret);
    
    hf = hf_remote_connect_list_defined_storage_pools_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_defined_storage_pools_ret__names, hf_remote_connect_list_defined_storage_pools_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_STORAGE_POOL_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_find_storage_pool_sources_args__type = -1;
static int hf_remote_connect_find_storage_pool_sources_args__srcSpec = -1;
static int hf_remote_connect_find_storage_pool_sources_args__flags = -1;
static int hf_remote_connect_find_storage_pool_sources_args = -1;
static gint ett_remote_connect_find_storage_pool_sources_args = -1;
static gboolean dissect_xdr_remote_connect_find_storage_pool_sources_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_find_storage_pool_sources_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_find_storage_pool_sources_args);
    
    hf = hf_remote_connect_find_storage_pool_sources_args__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_find_storage_pool_sources_args__srcSpec;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_find_storage_pool_sources_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_find_storage_pool_sources_ret__xml = -1;
static int hf_remote_connect_find_storage_pool_sources_ret = -1;
static gint ett_remote_connect_find_storage_pool_sources_ret = -1;
static gboolean dissect_xdr_remote_connect_find_storage_pool_sources_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_find_storage_pool_sources_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_find_storage_pool_sources_ret);
    
    hf = hf_remote_connect_find_storage_pool_sources_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_lookup_by_uuid_args__uuid = -1;
static int hf_remote_storage_pool_lookup_by_uuid_args = -1;
static gint ett_remote_storage_pool_lookup_by_uuid_args = -1;
static gboolean dissect_xdr_remote_storage_pool_lookup_by_uuid_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_lookup_by_uuid_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_lookup_by_uuid_args);
    
    hf = hf_remote_storage_pool_lookup_by_uuid_args__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_lookup_by_uuid_ret__pool = -1;
static int hf_remote_storage_pool_lookup_by_uuid_ret = -1;
static gint ett_remote_storage_pool_lookup_by_uuid_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_lookup_by_uuid_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_lookup_by_uuid_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_lookup_by_uuid_ret);
    
    hf = hf_remote_storage_pool_lookup_by_uuid_ret__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_lookup_by_name_args__name = -1;
static int hf_remote_storage_pool_lookup_by_name_args = -1;
static gint ett_remote_storage_pool_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_storage_pool_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_lookup_by_name_args);
    
    hf = hf_remote_storage_pool_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_lookup_by_name_ret__pool = -1;
static int hf_remote_storage_pool_lookup_by_name_ret = -1;
static gint ett_remote_storage_pool_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_lookup_by_name_ret);
    
    hf = hf_remote_storage_pool_lookup_by_name_ret__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_lookup_by_volume_args__vol = -1;
static int hf_remote_storage_pool_lookup_by_volume_args = -1;
static gint ett_remote_storage_pool_lookup_by_volume_args = -1;
static gboolean dissect_xdr_remote_storage_pool_lookup_by_volume_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_lookup_by_volume_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_lookup_by_volume_args);
    
    hf = hf_remote_storage_pool_lookup_by_volume_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_lookup_by_volume_ret__pool = -1;
static int hf_remote_storage_pool_lookup_by_volume_ret = -1;
static gint ett_remote_storage_pool_lookup_by_volume_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_lookup_by_volume_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_lookup_by_volume_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_lookup_by_volume_ret);
    
    hf = hf_remote_storage_pool_lookup_by_volume_ret__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_create_xml_args__xml = -1;
static int hf_remote_storage_pool_create_xml_args__flags = -1;
static int hf_remote_storage_pool_create_xml_args = -1;
static gint ett_remote_storage_pool_create_xml_args = -1;
static gboolean dissect_xdr_remote_storage_pool_create_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_create_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_create_xml_args);
    
    hf = hf_remote_storage_pool_create_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_create_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_create_xml_ret__pool = -1;
static int hf_remote_storage_pool_create_xml_ret = -1;
static gint ett_remote_storage_pool_create_xml_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_create_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_create_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_create_xml_ret);
    
    hf = hf_remote_storage_pool_create_xml_ret__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_define_xml_args__xml = -1;
static int hf_remote_storage_pool_define_xml_args__flags = -1;
static int hf_remote_storage_pool_define_xml_args = -1;
static gint ett_remote_storage_pool_define_xml_args = -1;
static gboolean dissect_xdr_remote_storage_pool_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_define_xml_args);
    
    hf = hf_remote_storage_pool_define_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_define_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_define_xml_ret__pool = -1;
static int hf_remote_storage_pool_define_xml_ret = -1;
static gint ett_remote_storage_pool_define_xml_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_define_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_define_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_define_xml_ret);
    
    hf = hf_remote_storage_pool_define_xml_ret__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_build_args__pool = -1;
static int hf_remote_storage_pool_build_args__flags = -1;
static int hf_remote_storage_pool_build_args = -1;
static gint ett_remote_storage_pool_build_args = -1;
static gboolean dissect_xdr_remote_storage_pool_build_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_build_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_build_args);
    
    hf = hf_remote_storage_pool_build_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_build_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_undefine_args__pool = -1;
static int hf_remote_storage_pool_undefine_args = -1;
static gint ett_remote_storage_pool_undefine_args = -1;
static gboolean dissect_xdr_remote_storage_pool_undefine_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_undefine_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_undefine_args);
    
    hf = hf_remote_storage_pool_undefine_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_create_args__pool = -1;
static int hf_remote_storage_pool_create_args__flags = -1;
static int hf_remote_storage_pool_create_args = -1;
static gint ett_remote_storage_pool_create_args = -1;
static gboolean dissect_xdr_remote_storage_pool_create_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_create_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_create_args);
    
    hf = hf_remote_storage_pool_create_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_create_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_destroy_args__pool = -1;
static int hf_remote_storage_pool_destroy_args = -1;
static gint ett_remote_storage_pool_destroy_args = -1;
static gboolean dissect_xdr_remote_storage_pool_destroy_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_destroy_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_destroy_args);
    
    hf = hf_remote_storage_pool_destroy_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_delete_args__pool = -1;
static int hf_remote_storage_pool_delete_args__flags = -1;
static int hf_remote_storage_pool_delete_args = -1;
static gint ett_remote_storage_pool_delete_args = -1;
static gboolean dissect_xdr_remote_storage_pool_delete_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_delete_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_delete_args);
    
    hf = hf_remote_storage_pool_delete_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_delete_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_refresh_args__pool = -1;
static int hf_remote_storage_pool_refresh_args__flags = -1;
static int hf_remote_storage_pool_refresh_args = -1;
static gint ett_remote_storage_pool_refresh_args = -1;
static gboolean dissect_xdr_remote_storage_pool_refresh_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_refresh_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_refresh_args);
    
    hf = hf_remote_storage_pool_refresh_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_refresh_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_get_xml_desc_args__pool = -1;
static int hf_remote_storage_pool_get_xml_desc_args__flags = -1;
static int hf_remote_storage_pool_get_xml_desc_args = -1;
static gint ett_remote_storage_pool_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_storage_pool_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_get_xml_desc_args);
    
    hf = hf_remote_storage_pool_get_xml_desc_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_get_xml_desc_ret__xml = -1;
static int hf_remote_storage_pool_get_xml_desc_ret = -1;
static gint ett_remote_storage_pool_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_get_xml_desc_ret);
    
    hf = hf_remote_storage_pool_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_get_info_args__pool = -1;
static int hf_remote_storage_pool_get_info_args = -1;
static gint ett_remote_storage_pool_get_info_args = -1;
static gboolean dissect_xdr_remote_storage_pool_get_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_get_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_get_info_args);
    
    hf = hf_remote_storage_pool_get_info_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_get_info_ret__state = -1;
static int hf_remote_storage_pool_get_info_ret__capacity = -1;
static int hf_remote_storage_pool_get_info_ret__allocation = -1;
static int hf_remote_storage_pool_get_info_ret__available = -1;
static int hf_remote_storage_pool_get_info_ret = -1;
static gint ett_remote_storage_pool_get_info_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_get_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_get_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_get_info_ret);
    
    hf = hf_remote_storage_pool_get_info_ret__state;
    if (!dissect_xdr_u_char(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_get_info_ret__capacity;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_get_info_ret__allocation;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_get_info_ret__available;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_get_autostart_args__pool = -1;
static int hf_remote_storage_pool_get_autostart_args = -1;
static gint ett_remote_storage_pool_get_autostart_args = -1;
static gboolean dissect_xdr_remote_storage_pool_get_autostart_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_get_autostart_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_get_autostart_args);
    
    hf = hf_remote_storage_pool_get_autostart_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_get_autostart_ret__autostart = -1;
static int hf_remote_storage_pool_get_autostart_ret = -1;
static gint ett_remote_storage_pool_get_autostart_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_get_autostart_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_get_autostart_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_get_autostart_ret);
    
    hf = hf_remote_storage_pool_get_autostart_ret__autostart;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_set_autostart_args__pool = -1;
static int hf_remote_storage_pool_set_autostart_args__autostart = -1;
static int hf_remote_storage_pool_set_autostart_args = -1;
static gint ett_remote_storage_pool_set_autostart_args = -1;
static gboolean dissect_xdr_remote_storage_pool_set_autostart_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_set_autostart_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_set_autostart_args);
    
    hf = hf_remote_storage_pool_set_autostart_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_set_autostart_args__autostart;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_num_of_volumes_args__pool = -1;
static int hf_remote_storage_pool_num_of_volumes_args = -1;
static gint ett_remote_storage_pool_num_of_volumes_args = -1;
static gboolean dissect_xdr_remote_storage_pool_num_of_volumes_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_num_of_volumes_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_num_of_volumes_args);
    
    hf = hf_remote_storage_pool_num_of_volumes_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_num_of_volumes_ret__num = -1;
static int hf_remote_storage_pool_num_of_volumes_ret = -1;
static gint ett_remote_storage_pool_num_of_volumes_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_num_of_volumes_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_num_of_volumes_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_num_of_volumes_ret);
    
    hf = hf_remote_storage_pool_num_of_volumes_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_list_volumes_args__pool = -1;
static int hf_remote_storage_pool_list_volumes_args__maxnames = -1;
static int hf_remote_storage_pool_list_volumes_args = -1;
static gint ett_remote_storage_pool_list_volumes_args = -1;
static gboolean dissect_xdr_remote_storage_pool_list_volumes_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_list_volumes_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_list_volumes_args);
    
    hf = hf_remote_storage_pool_list_volumes_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_list_volumes_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_list_volumes_ret__names = -1;
static int hf_remote_storage_pool_list_volumes_ret__names___ELEMENT_ = -1;
static gint ett_remote_storage_pool_list_volumes_ret__names = -1;
static int hf_remote_storage_pool_list_volumes_ret = -1;
static gint ett_remote_storage_pool_list_volumes_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_list_volumes_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_list_volumes_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_list_volumes_ret);
    
    hf = hf_remote_storage_pool_list_volumes_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_storage_pool_list_volumes_ret__names, hf_remote_storage_pool_list_volumes_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_STORAGE_VOL_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_lookup_by_name_args__pool = -1;
static int hf_remote_storage_vol_lookup_by_name_args__name = -1;
static int hf_remote_storage_vol_lookup_by_name_args = -1;
static gint ett_remote_storage_vol_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_storage_vol_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_lookup_by_name_args);
    
    hf = hf_remote_storage_vol_lookup_by_name_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_lookup_by_name_ret__vol = -1;
static int hf_remote_storage_vol_lookup_by_name_ret = -1;
static gint ett_remote_storage_vol_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_lookup_by_name_ret);
    
    hf = hf_remote_storage_vol_lookup_by_name_ret__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_lookup_by_key_args__key = -1;
static int hf_remote_storage_vol_lookup_by_key_args = -1;
static gint ett_remote_storage_vol_lookup_by_key_args = -1;
static gboolean dissect_xdr_remote_storage_vol_lookup_by_key_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_lookup_by_key_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_lookup_by_key_args);
    
    hf = hf_remote_storage_vol_lookup_by_key_args__key;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_lookup_by_key_ret__vol = -1;
static int hf_remote_storage_vol_lookup_by_key_ret = -1;
static gint ett_remote_storage_vol_lookup_by_key_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_lookup_by_key_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_lookup_by_key_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_lookup_by_key_ret);
    
    hf = hf_remote_storage_vol_lookup_by_key_ret__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_lookup_by_path_args__path = -1;
static int hf_remote_storage_vol_lookup_by_path_args = -1;
static gint ett_remote_storage_vol_lookup_by_path_args = -1;
static gboolean dissect_xdr_remote_storage_vol_lookup_by_path_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_lookup_by_path_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_lookup_by_path_args);
    
    hf = hf_remote_storage_vol_lookup_by_path_args__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_lookup_by_path_ret__vol = -1;
static int hf_remote_storage_vol_lookup_by_path_ret = -1;
static gint ett_remote_storage_vol_lookup_by_path_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_lookup_by_path_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_lookup_by_path_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_lookup_by_path_ret);
    
    hf = hf_remote_storage_vol_lookup_by_path_ret__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_create_xml_args__pool = -1;
static int hf_remote_storage_vol_create_xml_args__xml = -1;
static int hf_remote_storage_vol_create_xml_args__flags = -1;
static int hf_remote_storage_vol_create_xml_args = -1;
static gint ett_remote_storage_vol_create_xml_args = -1;
static gboolean dissect_xdr_remote_storage_vol_create_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_create_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_create_xml_args);
    
    hf = hf_remote_storage_vol_create_xml_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_create_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_create_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_create_xml_ret__vol = -1;
static int hf_remote_storage_vol_create_xml_ret = -1;
static gint ett_remote_storage_vol_create_xml_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_create_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_create_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_create_xml_ret);
    
    hf = hf_remote_storage_vol_create_xml_ret__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_create_xml_from_args__pool = -1;
static int hf_remote_storage_vol_create_xml_from_args__xml = -1;
static int hf_remote_storage_vol_create_xml_from_args__clonevol = -1;
static int hf_remote_storage_vol_create_xml_from_args__flags = -1;
static int hf_remote_storage_vol_create_xml_from_args = -1;
static gint ett_remote_storage_vol_create_xml_from_args = -1;
static gboolean dissect_xdr_remote_storage_vol_create_xml_from_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_create_xml_from_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_create_xml_from_args);
    
    hf = hf_remote_storage_vol_create_xml_from_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_create_xml_from_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_create_xml_from_args__clonevol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_create_xml_from_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_create_xml_from_ret__vol = -1;
static int hf_remote_storage_vol_create_xml_from_ret = -1;
static gint ett_remote_storage_vol_create_xml_from_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_create_xml_from_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_create_xml_from_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_create_xml_from_ret);
    
    hf = hf_remote_storage_vol_create_xml_from_ret__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_delete_args__vol = -1;
static int hf_remote_storage_vol_delete_args__flags = -1;
static int hf_remote_storage_vol_delete_args = -1;
static gint ett_remote_storage_vol_delete_args = -1;
static gboolean dissect_xdr_remote_storage_vol_delete_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_delete_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_delete_args);
    
    hf = hf_remote_storage_vol_delete_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_delete_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_wipe_args__vol = -1;
static int hf_remote_storage_vol_wipe_args__flags = -1;
static int hf_remote_storage_vol_wipe_args = -1;
static gint ett_remote_storage_vol_wipe_args = -1;
static gboolean dissect_xdr_remote_storage_vol_wipe_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_wipe_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_wipe_args);
    
    hf = hf_remote_storage_vol_wipe_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_wipe_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_wipe_pattern_args__vol = -1;
static int hf_remote_storage_vol_wipe_pattern_args__algorithm = -1;
static int hf_remote_storage_vol_wipe_pattern_args__flags = -1;
static int hf_remote_storage_vol_wipe_pattern_args = -1;
static gint ett_remote_storage_vol_wipe_pattern_args = -1;
static gboolean dissect_xdr_remote_storage_vol_wipe_pattern_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_wipe_pattern_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_wipe_pattern_args);
    
    hf = hf_remote_storage_vol_wipe_pattern_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_wipe_pattern_args__algorithm;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_wipe_pattern_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_get_xml_desc_args__vol = -1;
static int hf_remote_storage_vol_get_xml_desc_args__flags = -1;
static int hf_remote_storage_vol_get_xml_desc_args = -1;
static gint ett_remote_storage_vol_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_storage_vol_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_get_xml_desc_args);
    
    hf = hf_remote_storage_vol_get_xml_desc_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_get_xml_desc_ret__xml = -1;
static int hf_remote_storage_vol_get_xml_desc_ret = -1;
static gint ett_remote_storage_vol_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_get_xml_desc_ret);
    
    hf = hf_remote_storage_vol_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_get_info_args__vol = -1;
static int hf_remote_storage_vol_get_info_args = -1;
static gint ett_remote_storage_vol_get_info_args = -1;
static gboolean dissect_xdr_remote_storage_vol_get_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_get_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_get_info_args);
    
    hf = hf_remote_storage_vol_get_info_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_get_info_ret__type = -1;
static int hf_remote_storage_vol_get_info_ret__capacity = -1;
static int hf_remote_storage_vol_get_info_ret__allocation = -1;
static int hf_remote_storage_vol_get_info_ret = -1;
static gint ett_remote_storage_vol_get_info_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_get_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_get_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_get_info_ret);
    
    hf = hf_remote_storage_vol_get_info_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_get_info_ret__capacity;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_get_info_ret__allocation;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_get_path_args__vol = -1;
static int hf_remote_storage_vol_get_path_args = -1;
static gint ett_remote_storage_vol_get_path_args = -1;
static gboolean dissect_xdr_remote_storage_vol_get_path_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_get_path_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_get_path_args);
    
    hf = hf_remote_storage_vol_get_path_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_get_path_ret__name = -1;
static int hf_remote_storage_vol_get_path_ret = -1;
static gint ett_remote_storage_vol_get_path_ret = -1;
static gboolean dissect_xdr_remote_storage_vol_get_path_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_get_path_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_get_path_ret);
    
    hf = hf_remote_storage_vol_get_path_ret__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_resize_args__vol = -1;
static int hf_remote_storage_vol_resize_args__capacity = -1;
static int hf_remote_storage_vol_resize_args__flags = -1;
static int hf_remote_storage_vol_resize_args = -1;
static gint ett_remote_storage_vol_resize_args = -1;
static gboolean dissect_xdr_remote_storage_vol_resize_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_resize_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_resize_args);
    
    hf = hf_remote_storage_vol_resize_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_resize_args__capacity;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_resize_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_num_of_devices_args__cap = -1;
static int hf_remote_node_num_of_devices_args__flags = -1;
static int hf_remote_node_num_of_devices_args = -1;
static gint ett_remote_node_num_of_devices_args = -1;
static gboolean dissect_xdr_remote_node_num_of_devices_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_num_of_devices_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_num_of_devices_args);
    
    hf = hf_remote_node_num_of_devices_args__cap;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_num_of_devices_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_num_of_devices_ret__num = -1;
static int hf_remote_node_num_of_devices_ret = -1;
static gint ett_remote_node_num_of_devices_ret = -1;
static gboolean dissect_xdr_remote_node_num_of_devices_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_num_of_devices_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_num_of_devices_ret);
    
    hf = hf_remote_node_num_of_devices_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_list_devices_args__cap = -1;
static int hf_remote_node_list_devices_args__maxnames = -1;
static int hf_remote_node_list_devices_args__flags = -1;
static int hf_remote_node_list_devices_args = -1;
static gint ett_remote_node_list_devices_args = -1;
static gboolean dissect_xdr_remote_node_list_devices_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_list_devices_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_list_devices_args);
    
    hf = hf_remote_node_list_devices_args__cap;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_list_devices_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_list_devices_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_list_devices_ret__names = -1;
static int hf_remote_node_list_devices_ret__names___ELEMENT_ = -1;
static gint ett_remote_node_list_devices_ret__names = -1;
static int hf_remote_node_list_devices_ret = -1;
static gint ett_remote_node_list_devices_ret = -1;
static gboolean dissect_xdr_remote_node_list_devices_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_list_devices_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_list_devices_ret);
    
    hf = hf_remote_node_list_devices_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_list_devices_ret__names, hf_remote_node_list_devices_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_NODE_DEVICE_NAME_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_lookup_by_name_args__name = -1;
static int hf_remote_node_device_lookup_by_name_args = -1;
static gint ett_remote_node_device_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_node_device_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_lookup_by_name_args);
    
    hf = hf_remote_node_device_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_lookup_by_name_ret__dev = -1;
static int hf_remote_node_device_lookup_by_name_ret = -1;
static gint ett_remote_node_device_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_node_device_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_lookup_by_name_ret);
    
    hf = hf_remote_node_device_lookup_by_name_ret__dev;
    if (!dissect_xdr_remote_nonnull_node_device(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_lookup_scsi_host_by_wwn_args__wwnn = -1;
static int hf_remote_node_device_lookup_scsi_host_by_wwn_args__wwpn = -1;
static int hf_remote_node_device_lookup_scsi_host_by_wwn_args__flags = -1;
static int hf_remote_node_device_lookup_scsi_host_by_wwn_args = -1;
static gint ett_remote_node_device_lookup_scsi_host_by_wwn_args = -1;
static gboolean dissect_xdr_remote_node_device_lookup_scsi_host_by_wwn_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_lookup_scsi_host_by_wwn_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_lookup_scsi_host_by_wwn_args);
    
    hf = hf_remote_node_device_lookup_scsi_host_by_wwn_args__wwnn;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_lookup_scsi_host_by_wwn_args__wwpn;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_lookup_scsi_host_by_wwn_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_lookup_scsi_host_by_wwn_ret__dev = -1;
static int hf_remote_node_device_lookup_scsi_host_by_wwn_ret = -1;
static gint ett_remote_node_device_lookup_scsi_host_by_wwn_ret = -1;
static gboolean dissect_xdr_remote_node_device_lookup_scsi_host_by_wwn_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_lookup_scsi_host_by_wwn_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_lookup_scsi_host_by_wwn_ret);
    
    hf = hf_remote_node_device_lookup_scsi_host_by_wwn_ret__dev;
    if (!dissect_xdr_remote_nonnull_node_device(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_get_xml_desc_args__name = -1;
static int hf_remote_node_device_get_xml_desc_args__flags = -1;
static int hf_remote_node_device_get_xml_desc_args = -1;
static gint ett_remote_node_device_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_node_device_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_get_xml_desc_args);
    
    hf = hf_remote_node_device_get_xml_desc_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_get_xml_desc_ret__xml = -1;
static int hf_remote_node_device_get_xml_desc_ret = -1;
static gint ett_remote_node_device_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_node_device_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_get_xml_desc_ret);
    
    hf = hf_remote_node_device_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_get_parent_args__name = -1;
static int hf_remote_node_device_get_parent_args = -1;
static gint ett_remote_node_device_get_parent_args = -1;
static gboolean dissect_xdr_remote_node_device_get_parent_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_get_parent_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_get_parent_args);
    
    hf = hf_remote_node_device_get_parent_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_get_parent_ret__parent = -1;
static int hf_remote_node_device_get_parent_ret = -1;
static gint ett_remote_node_device_get_parent_ret = -1;
static gboolean dissect_xdr_remote_node_device_get_parent_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_get_parent_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_get_parent_ret);
    
    hf = hf_remote_node_device_get_parent_ret__parent;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_num_of_caps_args__name = -1;
static int hf_remote_node_device_num_of_caps_args = -1;
static gint ett_remote_node_device_num_of_caps_args = -1;
static gboolean dissect_xdr_remote_node_device_num_of_caps_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_num_of_caps_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_num_of_caps_args);
    
    hf = hf_remote_node_device_num_of_caps_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_num_of_caps_ret__num = -1;
static int hf_remote_node_device_num_of_caps_ret = -1;
static gint ett_remote_node_device_num_of_caps_ret = -1;
static gboolean dissect_xdr_remote_node_device_num_of_caps_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_num_of_caps_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_num_of_caps_ret);
    
    hf = hf_remote_node_device_num_of_caps_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_list_caps_args__name = -1;
static int hf_remote_node_device_list_caps_args__maxnames = -1;
static int hf_remote_node_device_list_caps_args = -1;
static gint ett_remote_node_device_list_caps_args = -1;
static gboolean dissect_xdr_remote_node_device_list_caps_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_list_caps_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_list_caps_args);
    
    hf = hf_remote_node_device_list_caps_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_list_caps_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_list_caps_ret__names = -1;
static int hf_remote_node_device_list_caps_ret__names___ELEMENT_ = -1;
static gint ett_remote_node_device_list_caps_ret__names = -1;
static int hf_remote_node_device_list_caps_ret = -1;
static gint ett_remote_node_device_list_caps_ret = -1;
static gboolean dissect_xdr_remote_node_device_list_caps_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_list_caps_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_list_caps_ret);
    
    hf = hf_remote_node_device_list_caps_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_device_list_caps_ret__names, hf_remote_node_device_list_caps_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_NODE_DEVICE_CAPS_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_dettach_args__name = -1;
static int hf_remote_node_device_dettach_args = -1;
static gint ett_remote_node_device_dettach_args = -1;
static gboolean dissect_xdr_remote_node_device_dettach_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_dettach_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_dettach_args);
    
    hf = hf_remote_node_device_dettach_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_detach_flags_args__name = -1;
static int hf_remote_node_device_detach_flags_args__driverName = -1;
static int hf_remote_node_device_detach_flags_args__flags = -1;
static int hf_remote_node_device_detach_flags_args = -1;
static gint ett_remote_node_device_detach_flags_args = -1;
static gboolean dissect_xdr_remote_node_device_detach_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_detach_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_detach_flags_args);
    
    hf = hf_remote_node_device_detach_flags_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_detach_flags_args__driverName;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_detach_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_re_attach_args__name = -1;
static int hf_remote_node_device_re_attach_args = -1;
static gint ett_remote_node_device_re_attach_args = -1;
static gboolean dissect_xdr_remote_node_device_re_attach_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_re_attach_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_re_attach_args);
    
    hf = hf_remote_node_device_re_attach_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_reset_args__name = -1;
static int hf_remote_node_device_reset_args = -1;
static gint ett_remote_node_device_reset_args = -1;
static gboolean dissect_xdr_remote_node_device_reset_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_reset_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_reset_args);
    
    hf = hf_remote_node_device_reset_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_create_xml_args__xml_desc = -1;
static int hf_remote_node_device_create_xml_args__flags = -1;
static int hf_remote_node_device_create_xml_args = -1;
static gint ett_remote_node_device_create_xml_args = -1;
static gboolean dissect_xdr_remote_node_device_create_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_create_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_create_xml_args);
    
    hf = hf_remote_node_device_create_xml_args__xml_desc;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_device_create_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_create_xml_ret__dev = -1;
static int hf_remote_node_device_create_xml_ret = -1;
static gint ett_remote_node_device_create_xml_ret = -1;
static gboolean dissect_xdr_remote_node_device_create_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_create_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_create_xml_ret);
    
    hf = hf_remote_node_device_create_xml_ret__dev;
    if (!dissect_xdr_remote_nonnull_node_device(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_device_destroy_args__name = -1;
static int hf_remote_node_device_destroy_args = -1;
static gint ett_remote_node_device_destroy_args = -1;
static gboolean dissect_xdr_remote_node_device_destroy_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_device_destroy_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_device_destroy_args);
    
    hf = hf_remote_node_device_destroy_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_event_register_ret__cb_registered = -1;
static int hf_remote_connect_domain_event_register_ret = -1;
static gint ett_remote_connect_domain_event_register_ret = -1;
static gboolean dissect_xdr_remote_connect_domain_event_register_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_event_register_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_event_register_ret);
    
    hf = hf_remote_connect_domain_event_register_ret__cb_registered;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_event_deregister_ret__cb_registered = -1;
static int hf_remote_connect_domain_event_deregister_ret = -1;
static gint ett_remote_connect_domain_event_deregister_ret = -1;
static gboolean dissect_xdr_remote_connect_domain_event_deregister_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_event_deregister_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_event_deregister_ret);
    
    hf = hf_remote_connect_domain_event_deregister_ret__cb_registered;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_lifecycle_msg__dom = -1;
static int hf_remote_domain_event_lifecycle_msg__event = -1;
static int hf_remote_domain_event_lifecycle_msg__detail = -1;
static int hf_remote_domain_event_lifecycle_msg = -1;
static gint ett_remote_domain_event_lifecycle_msg = -1;
static gboolean dissect_xdr_remote_domain_event_lifecycle_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_lifecycle_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_lifecycle_msg);
    
    hf = hf_remote_domain_event_lifecycle_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_lifecycle_msg__event;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_lifecycle_msg__detail;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_xml_from_native_args__nativeFormat = -1;
static int hf_remote_connect_domain_xml_from_native_args__nativeConfig = -1;
static int hf_remote_connect_domain_xml_from_native_args__flags = -1;
static int hf_remote_connect_domain_xml_from_native_args = -1;
static gint ett_remote_connect_domain_xml_from_native_args = -1;
static gboolean dissect_xdr_remote_connect_domain_xml_from_native_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_xml_from_native_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_xml_from_native_args);
    
    hf = hf_remote_connect_domain_xml_from_native_args__nativeFormat;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_domain_xml_from_native_args__nativeConfig;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_domain_xml_from_native_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_xml_from_native_ret__domainXml = -1;
static int hf_remote_connect_domain_xml_from_native_ret = -1;
static gint ett_remote_connect_domain_xml_from_native_ret = -1;
static gboolean dissect_xdr_remote_connect_domain_xml_from_native_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_xml_from_native_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_xml_from_native_ret);
    
    hf = hf_remote_connect_domain_xml_from_native_ret__domainXml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_xml_to_native_args__nativeFormat = -1;
static int hf_remote_connect_domain_xml_to_native_args__domainXml = -1;
static int hf_remote_connect_domain_xml_to_native_args__flags = -1;
static int hf_remote_connect_domain_xml_to_native_args = -1;
static gint ett_remote_connect_domain_xml_to_native_args = -1;
static gboolean dissect_xdr_remote_connect_domain_xml_to_native_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_xml_to_native_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_xml_to_native_args);
    
    hf = hf_remote_connect_domain_xml_to_native_args__nativeFormat;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_domain_xml_to_native_args__domainXml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_domain_xml_to_native_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_xml_to_native_ret__nativeConfig = -1;
static int hf_remote_connect_domain_xml_to_native_ret = -1;
static gint ett_remote_connect_domain_xml_to_native_ret = -1;
static gboolean dissect_xdr_remote_connect_domain_xml_to_native_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_xml_to_native_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_xml_to_native_ret);
    
    hf = hf_remote_connect_domain_xml_to_native_ret__nativeConfig;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_num_of_secrets_ret__num = -1;
static int hf_remote_connect_num_of_secrets_ret = -1;
static gint ett_remote_connect_num_of_secrets_ret = -1;
static gboolean dissect_xdr_remote_connect_num_of_secrets_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_num_of_secrets_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_num_of_secrets_ret);
    
    hf = hf_remote_connect_num_of_secrets_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_secrets_args__maxuuids = -1;
static int hf_remote_connect_list_secrets_args = -1;
static gint ett_remote_connect_list_secrets_args = -1;
static gboolean dissect_xdr_remote_connect_list_secrets_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_secrets_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_secrets_args);
    
    hf = hf_remote_connect_list_secrets_args__maxuuids;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_secrets_ret__uuids = -1;
static int hf_remote_connect_list_secrets_ret__uuids___ELEMENT_ = -1;
static gint ett_remote_connect_list_secrets_ret__uuids = -1;
static int hf_remote_connect_list_secrets_ret = -1;
static gint ett_remote_connect_list_secrets_ret = -1;
static gboolean dissect_xdr_remote_connect_list_secrets_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_secrets_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_secrets_ret);
    
    hf = hf_remote_connect_list_secrets_ret__uuids;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_secrets_ret__uuids, hf_remote_connect_list_secrets_ret__uuids___ELEMENT_, "remote_nonnull_string", REMOTE_SECRET_UUID_LIST_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_lookup_by_uuid_args__uuid = -1;
static int hf_remote_secret_lookup_by_uuid_args = -1;
static gint ett_remote_secret_lookup_by_uuid_args = -1;
static gboolean dissect_xdr_remote_secret_lookup_by_uuid_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_lookup_by_uuid_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_lookup_by_uuid_args);
    
    hf = hf_remote_secret_lookup_by_uuid_args__uuid;
    if (!dissect_xdr_remote_uuid(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_lookup_by_uuid_ret__secret = -1;
static int hf_remote_secret_lookup_by_uuid_ret = -1;
static gint ett_remote_secret_lookup_by_uuid_ret = -1;
static gboolean dissect_xdr_remote_secret_lookup_by_uuid_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_lookup_by_uuid_ret");
    tree = proto_item_add_subtree(ti, ett_remote_secret_lookup_by_uuid_ret);
    
    hf = hf_remote_secret_lookup_by_uuid_ret__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_define_xml_args__xml = -1;
static int hf_remote_secret_define_xml_args__flags = -1;
static int hf_remote_secret_define_xml_args = -1;
static gint ett_remote_secret_define_xml_args = -1;
static gboolean dissect_xdr_remote_secret_define_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_define_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_define_xml_args);
    
    hf = hf_remote_secret_define_xml_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_secret_define_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_define_xml_ret__secret = -1;
static int hf_remote_secret_define_xml_ret = -1;
static gint ett_remote_secret_define_xml_ret = -1;
static gboolean dissect_xdr_remote_secret_define_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_define_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_secret_define_xml_ret);
    
    hf = hf_remote_secret_define_xml_ret__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_get_xml_desc_args__secret = -1;
static int hf_remote_secret_get_xml_desc_args__flags = -1;
static int hf_remote_secret_get_xml_desc_args = -1;
static gint ett_remote_secret_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_secret_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_get_xml_desc_args);
    
    hf = hf_remote_secret_get_xml_desc_args__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_secret_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_get_xml_desc_ret__xml = -1;
static int hf_remote_secret_get_xml_desc_ret = -1;
static gint ett_remote_secret_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_secret_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_secret_get_xml_desc_ret);
    
    hf = hf_remote_secret_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_set_value_args__secret = -1;
static int hf_remote_secret_set_value_args__value = -1;
static int hf_remote_secret_set_value_args__flags = -1;
static int hf_remote_secret_set_value_args = -1;
static gint ett_remote_secret_set_value_args = -1;
static gboolean dissect_xdr_remote_secret_set_value_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_set_value_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_set_value_args);
    
    hf = hf_remote_secret_set_value_args__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_secret_set_value_args__value;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_SECRET_VALUE_MAX)) return FALSE;
    
    hf = hf_remote_secret_set_value_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_get_value_args__secret = -1;
static int hf_remote_secret_get_value_args__flags = -1;
static int hf_remote_secret_get_value_args = -1;
static gint ett_remote_secret_get_value_args = -1;
static gboolean dissect_xdr_remote_secret_get_value_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_get_value_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_get_value_args);
    
    hf = hf_remote_secret_get_value_args__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_secret_get_value_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_get_value_ret__value = -1;
static int hf_remote_secret_get_value_ret = -1;
static gint ett_remote_secret_get_value_ret = -1;
static gboolean dissect_xdr_remote_secret_get_value_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_get_value_ret");
    tree = proto_item_add_subtree(ti, ett_remote_secret_get_value_ret);
    
    hf = hf_remote_secret_get_value_ret__value;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_SECRET_VALUE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_undefine_args__secret = -1;
static int hf_remote_secret_undefine_args = -1;
static gint ett_remote_secret_undefine_args = -1;
static gboolean dissect_xdr_remote_secret_undefine_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_undefine_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_undefine_args);
    
    hf = hf_remote_secret_undefine_args__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_lookup_by_usage_args__usageType = -1;
static int hf_remote_secret_lookup_by_usage_args__usageID = -1;
static int hf_remote_secret_lookup_by_usage_args = -1;
static gint ett_remote_secret_lookup_by_usage_args = -1;
static gboolean dissect_xdr_remote_secret_lookup_by_usage_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_lookup_by_usage_args");
    tree = proto_item_add_subtree(ti, ett_remote_secret_lookup_by_usage_args);
    
    hf = hf_remote_secret_lookup_by_usage_args__usageType;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_secret_lookup_by_usage_args__usageID;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_secret_lookup_by_usage_ret__secret = -1;
static int hf_remote_secret_lookup_by_usage_ret = -1;
static gint ett_remote_secret_lookup_by_usage_ret = -1;
static gboolean dissect_xdr_remote_secret_lookup_by_usage_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_secret_lookup_by_usage_ret");
    tree = proto_item_add_subtree(ti, ett_remote_secret_lookup_by_usage_ret);
    
    hf = hf_remote_secret_lookup_by_usage_ret__secret;
    if (!dissect_xdr_remote_nonnull_secret(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_tunnel_args__flags = -1;
static int hf_remote_domain_migrate_prepare_tunnel_args__dname = -1;
static int hf_remote_domain_migrate_prepare_tunnel_args__resource = -1;
static int hf_remote_domain_migrate_prepare_tunnel_args__dom_xml = -1;
static int hf_remote_domain_migrate_prepare_tunnel_args = -1;
static gint ett_remote_domain_migrate_prepare_tunnel_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_tunnel_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_tunnel_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_tunnel_args);
    
    hf = hf_remote_domain_migrate_prepare_tunnel_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel_args__dom_xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_is_secure_ret__secure = -1;
static int hf_remote_connect_is_secure_ret = -1;
static gint ett_remote_connect_is_secure_ret = -1;
static gboolean dissect_xdr_remote_connect_is_secure_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_is_secure_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_is_secure_ret);
    
    hf = hf_remote_connect_is_secure_ret__secure;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_is_active_args__dom = -1;
static int hf_remote_domain_is_active_args = -1;
static gint ett_remote_domain_is_active_args = -1;
static gboolean dissect_xdr_remote_domain_is_active_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_is_active_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_is_active_args);
    
    hf = hf_remote_domain_is_active_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_is_active_ret__active = -1;
static int hf_remote_domain_is_active_ret = -1;
static gint ett_remote_domain_is_active_ret = -1;
static gboolean dissect_xdr_remote_domain_is_active_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_is_active_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_is_active_ret);
    
    hf = hf_remote_domain_is_active_ret__active;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_is_persistent_args__dom = -1;
static int hf_remote_domain_is_persistent_args = -1;
static gint ett_remote_domain_is_persistent_args = -1;
static gboolean dissect_xdr_remote_domain_is_persistent_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_is_persistent_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_is_persistent_args);
    
    hf = hf_remote_domain_is_persistent_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_is_persistent_ret__persistent = -1;
static int hf_remote_domain_is_persistent_ret = -1;
static gint ett_remote_domain_is_persistent_ret = -1;
static gboolean dissect_xdr_remote_domain_is_persistent_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_is_persistent_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_is_persistent_ret);
    
    hf = hf_remote_domain_is_persistent_ret__persistent;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_is_updated_args__dom = -1;
static int hf_remote_domain_is_updated_args = -1;
static gint ett_remote_domain_is_updated_args = -1;
static gboolean dissect_xdr_remote_domain_is_updated_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_is_updated_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_is_updated_args);
    
    hf = hf_remote_domain_is_updated_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_is_updated_ret__updated = -1;
static int hf_remote_domain_is_updated_ret = -1;
static gint ett_remote_domain_is_updated_ret = -1;
static gboolean dissect_xdr_remote_domain_is_updated_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_is_updated_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_is_updated_ret);
    
    hf = hf_remote_domain_is_updated_ret__updated;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_is_active_args__net = -1;
static int hf_remote_network_is_active_args = -1;
static gint ett_remote_network_is_active_args = -1;
static gboolean dissect_xdr_remote_network_is_active_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_is_active_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_is_active_args);
    
    hf = hf_remote_network_is_active_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_is_active_ret__active = -1;
static int hf_remote_network_is_active_ret = -1;
static gint ett_remote_network_is_active_ret = -1;
static gboolean dissect_xdr_remote_network_is_active_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_is_active_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_is_active_ret);
    
    hf = hf_remote_network_is_active_ret__active;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_is_persistent_args__net = -1;
static int hf_remote_network_is_persistent_args = -1;
static gint ett_remote_network_is_persistent_args = -1;
static gboolean dissect_xdr_remote_network_is_persistent_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_is_persistent_args");
    tree = proto_item_add_subtree(ti, ett_remote_network_is_persistent_args);
    
    hf = hf_remote_network_is_persistent_args__net;
    if (!dissect_xdr_remote_nonnull_network(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_network_is_persistent_ret__persistent = -1;
static int hf_remote_network_is_persistent_ret = -1;
static gint ett_remote_network_is_persistent_ret = -1;
static gboolean dissect_xdr_remote_network_is_persistent_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_network_is_persistent_ret");
    tree = proto_item_add_subtree(ti, ett_remote_network_is_persistent_ret);
    
    hf = hf_remote_network_is_persistent_ret__persistent;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_is_active_args__pool = -1;
static int hf_remote_storage_pool_is_active_args = -1;
static gint ett_remote_storage_pool_is_active_args = -1;
static gboolean dissect_xdr_remote_storage_pool_is_active_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_is_active_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_is_active_args);
    
    hf = hf_remote_storage_pool_is_active_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_is_active_ret__active = -1;
static int hf_remote_storage_pool_is_active_ret = -1;
static gint ett_remote_storage_pool_is_active_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_is_active_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_is_active_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_is_active_ret);
    
    hf = hf_remote_storage_pool_is_active_ret__active;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_is_persistent_args__pool = -1;
static int hf_remote_storage_pool_is_persistent_args = -1;
static gint ett_remote_storage_pool_is_persistent_args = -1;
static gboolean dissect_xdr_remote_storage_pool_is_persistent_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_is_persistent_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_is_persistent_args);
    
    hf = hf_remote_storage_pool_is_persistent_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_is_persistent_ret__persistent = -1;
static int hf_remote_storage_pool_is_persistent_ret = -1;
static gint ett_remote_storage_pool_is_persistent_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_is_persistent_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_is_persistent_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_is_persistent_ret);
    
    hf = hf_remote_storage_pool_is_persistent_ret__persistent;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_is_active_args__iface = -1;
static int hf_remote_interface_is_active_args = -1;
static gint ett_remote_interface_is_active_args = -1;
static gboolean dissect_xdr_remote_interface_is_active_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_is_active_args");
    tree = proto_item_add_subtree(ti, ett_remote_interface_is_active_args);
    
    hf = hf_remote_interface_is_active_args__iface;
    if (!dissect_xdr_remote_nonnull_interface(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_interface_is_active_ret__active = -1;
static int hf_remote_interface_is_active_ret = -1;
static gint ett_remote_interface_is_active_ret = -1;
static gboolean dissect_xdr_remote_interface_is_active_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_interface_is_active_ret");
    tree = proto_item_add_subtree(ti, ett_remote_interface_is_active_ret);
    
    hf = hf_remote_interface_is_active_ret__active;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_compare_cpu_args__xml = -1;
static int hf_remote_connect_compare_cpu_args__flags = -1;
static int hf_remote_connect_compare_cpu_args = -1;
static gint ett_remote_connect_compare_cpu_args = -1;
static gboolean dissect_xdr_remote_connect_compare_cpu_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_compare_cpu_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_compare_cpu_args);
    
    hf = hf_remote_connect_compare_cpu_args__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_compare_cpu_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_compare_cpu_ret__result = -1;
static int hf_remote_connect_compare_cpu_ret = -1;
static gint ett_remote_connect_compare_cpu_ret = -1;
static gboolean dissect_xdr_remote_connect_compare_cpu_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_compare_cpu_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_compare_cpu_ret);
    
    hf = hf_remote_connect_compare_cpu_ret__result;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_baseline_cpu_args__xmlCPUs = -1;
static int hf_remote_connect_baseline_cpu_args__xmlCPUs___ELEMENT_ = -1;
static gint ett_remote_connect_baseline_cpu_args__xmlCPUs = -1;
static int hf_remote_connect_baseline_cpu_args__flags = -1;
static int hf_remote_connect_baseline_cpu_args = -1;
static gint ett_remote_connect_baseline_cpu_args = -1;
static gboolean dissect_xdr_remote_connect_baseline_cpu_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_baseline_cpu_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_baseline_cpu_args);
    
    hf = hf_remote_connect_baseline_cpu_args__xmlCPUs;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_baseline_cpu_args__xmlCPUs, hf_remote_connect_baseline_cpu_args__xmlCPUs___ELEMENT_, "remote_nonnull_string", REMOTE_CPU_BASELINE_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    
    hf = hf_remote_connect_baseline_cpu_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_baseline_cpu_ret__cpu = -1;
static int hf_remote_connect_baseline_cpu_ret = -1;
static gint ett_remote_connect_baseline_cpu_ret = -1;
static gboolean dissect_xdr_remote_connect_baseline_cpu_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_baseline_cpu_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_baseline_cpu_ret);
    
    hf = hf_remote_connect_baseline_cpu_ret__cpu;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_job_info_args__dom = -1;
static int hf_remote_domain_get_job_info_args = -1;
static gint ett_remote_domain_get_job_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_job_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_job_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_job_info_args);
    
    hf = hf_remote_domain_get_job_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_job_info_ret__type = -1;
static int hf_remote_domain_get_job_info_ret__timeElapsed = -1;
static int hf_remote_domain_get_job_info_ret__timeRemaining = -1;
static int hf_remote_domain_get_job_info_ret__dataTotal = -1;
static int hf_remote_domain_get_job_info_ret__dataProcessed = -1;
static int hf_remote_domain_get_job_info_ret__dataRemaining = -1;
static int hf_remote_domain_get_job_info_ret__memTotal = -1;
static int hf_remote_domain_get_job_info_ret__memProcessed = -1;
static int hf_remote_domain_get_job_info_ret__memRemaining = -1;
static int hf_remote_domain_get_job_info_ret__fileTotal = -1;
static int hf_remote_domain_get_job_info_ret__fileProcessed = -1;
static int hf_remote_domain_get_job_info_ret__fileRemaining = -1;
static int hf_remote_domain_get_job_info_ret = -1;
static gint ett_remote_domain_get_job_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_job_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_job_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_job_info_ret);
    
    hf = hf_remote_domain_get_job_info_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__timeElapsed;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__timeRemaining;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__dataTotal;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__dataProcessed;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__dataRemaining;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__memTotal;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__memProcessed;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__memRemaining;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__fileTotal;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__fileProcessed;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_info_ret__fileRemaining;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_job_stats_args__dom = -1;
static int hf_remote_domain_get_job_stats_args__flags = -1;
static int hf_remote_domain_get_job_stats_args = -1;
static gint ett_remote_domain_get_job_stats_args = -1;
static gboolean dissect_xdr_remote_domain_get_job_stats_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_job_stats_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_job_stats_args);
    
    hf = hf_remote_domain_get_job_stats_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_stats_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_job_stats_ret__type = -1;
static int hf_remote_domain_get_job_stats_ret__params = -1;
static int hf_remote_domain_get_job_stats_ret__params___ELEMENT_ = -1;
static gint ett_remote_domain_get_job_stats_ret__params = -1;
static int hf_remote_domain_get_job_stats_ret = -1;
static gint ett_remote_domain_get_job_stats_ret = -1;
static gboolean dissect_xdr_remote_domain_get_job_stats_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_job_stats_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_job_stats_ret);
    
    hf = hf_remote_domain_get_job_stats_ret__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_job_stats_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_job_stats_ret__params, hf_remote_domain_get_job_stats_ret__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_abort_job_args__dom = -1;
static int hf_remote_domain_abort_job_args = -1;
static gint ett_remote_domain_abort_job_args = -1;
static gboolean dissect_xdr_remote_domain_abort_job_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_abort_job_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_abort_job_args);
    
    hf = hf_remote_domain_abort_job_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_set_max_downtime_args__dom = -1;
static int hf_remote_domain_migrate_set_max_downtime_args__downtime = -1;
static int hf_remote_domain_migrate_set_max_downtime_args__flags = -1;
static int hf_remote_domain_migrate_set_max_downtime_args = -1;
static gint ett_remote_domain_migrate_set_max_downtime_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_set_max_downtime_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_set_max_downtime_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_set_max_downtime_args);
    
    hf = hf_remote_domain_migrate_set_max_downtime_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_set_max_downtime_args__downtime;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_set_max_downtime_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_get_compression_cache_args__dom = -1;
static int hf_remote_domain_migrate_get_compression_cache_args__flags = -1;
static int hf_remote_domain_migrate_get_compression_cache_args = -1;
static gint ett_remote_domain_migrate_get_compression_cache_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_get_compression_cache_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_get_compression_cache_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_get_compression_cache_args);
    
    hf = hf_remote_domain_migrate_get_compression_cache_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_get_compression_cache_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_get_compression_cache_ret__cacheSize = -1;
static int hf_remote_domain_migrate_get_compression_cache_ret = -1;
static gint ett_remote_domain_migrate_get_compression_cache_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_get_compression_cache_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_get_compression_cache_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_get_compression_cache_ret);
    
    hf = hf_remote_domain_migrate_get_compression_cache_ret__cacheSize;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_set_compression_cache_args__dom = -1;
static int hf_remote_domain_migrate_set_compression_cache_args__cacheSize = -1;
static int hf_remote_domain_migrate_set_compression_cache_args__flags = -1;
static int hf_remote_domain_migrate_set_compression_cache_args = -1;
static gint ett_remote_domain_migrate_set_compression_cache_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_set_compression_cache_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_set_compression_cache_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_set_compression_cache_args);
    
    hf = hf_remote_domain_migrate_set_compression_cache_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_set_compression_cache_args__cacheSize;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_set_compression_cache_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_set_max_speed_args__dom = -1;
static int hf_remote_domain_migrate_set_max_speed_args__bandwidth = -1;
static int hf_remote_domain_migrate_set_max_speed_args__flags = -1;
static int hf_remote_domain_migrate_set_max_speed_args = -1;
static gint ett_remote_domain_migrate_set_max_speed_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_set_max_speed_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_set_max_speed_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_set_max_speed_args);
    
    hf = hf_remote_domain_migrate_set_max_speed_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_set_max_speed_args__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_set_max_speed_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_get_max_speed_args__dom = -1;
static int hf_remote_domain_migrate_get_max_speed_args__flags = -1;
static int hf_remote_domain_migrate_get_max_speed_args = -1;
static gint ett_remote_domain_migrate_get_max_speed_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_get_max_speed_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_get_max_speed_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_get_max_speed_args);
    
    hf = hf_remote_domain_migrate_get_max_speed_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_get_max_speed_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_get_max_speed_ret__bandwidth = -1;
static int hf_remote_domain_migrate_get_max_speed_ret = -1;
static gint ett_remote_domain_migrate_get_max_speed_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_get_max_speed_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_get_max_speed_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_get_max_speed_ret);
    
    hf = hf_remote_domain_migrate_get_max_speed_ret__bandwidth;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_event_register_any_args__eventID = -1;
static int hf_remote_connect_domain_event_register_any_args = -1;
static gint ett_remote_connect_domain_event_register_any_args = -1;
static gboolean dissect_xdr_remote_connect_domain_event_register_any_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_event_register_any_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_event_register_any_args);
    
    hf = hf_remote_connect_domain_event_register_any_args__eventID;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_domain_event_deregister_any_args__eventID = -1;
static int hf_remote_connect_domain_event_deregister_any_args = -1;
static gint ett_remote_connect_domain_event_deregister_any_args = -1;
static gboolean dissect_xdr_remote_connect_domain_event_deregister_any_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_domain_event_deregister_any_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_domain_event_deregister_any_args);
    
    hf = hf_remote_connect_domain_event_deregister_any_args__eventID;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_reboot_msg__dom = -1;
static int hf_remote_domain_event_reboot_msg = -1;
static gint ett_remote_domain_event_reboot_msg = -1;
static gboolean dissect_xdr_remote_domain_event_reboot_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_reboot_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_reboot_msg);
    
    hf = hf_remote_domain_event_reboot_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_rtc_change_msg__dom = -1;
static int hf_remote_domain_event_rtc_change_msg__offset = -1;
static int hf_remote_domain_event_rtc_change_msg = -1;
static gint ett_remote_domain_event_rtc_change_msg = -1;
static gboolean dissect_xdr_remote_domain_event_rtc_change_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_rtc_change_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_rtc_change_msg);
    
    hf = hf_remote_domain_event_rtc_change_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_rtc_change_msg__offset;
    if (!dissect_xdr_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_watchdog_msg__dom = -1;
static int hf_remote_domain_event_watchdog_msg__action = -1;
static int hf_remote_domain_event_watchdog_msg = -1;
static gint ett_remote_domain_event_watchdog_msg = -1;
static gboolean dissect_xdr_remote_domain_event_watchdog_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_watchdog_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_watchdog_msg);
    
    hf = hf_remote_domain_event_watchdog_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_watchdog_msg__action;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_io_error_msg__dom = -1;
static int hf_remote_domain_event_io_error_msg__srcPath = -1;
static int hf_remote_domain_event_io_error_msg__devAlias = -1;
static int hf_remote_domain_event_io_error_msg__action = -1;
static int hf_remote_domain_event_io_error_msg = -1;
static gint ett_remote_domain_event_io_error_msg = -1;
static gboolean dissect_xdr_remote_domain_event_io_error_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_io_error_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_io_error_msg);
    
    hf = hf_remote_domain_event_io_error_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_msg__srcPath;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_msg__devAlias;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_msg__action;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_io_error_reason_msg__dom = -1;
static int hf_remote_domain_event_io_error_reason_msg__srcPath = -1;
static int hf_remote_domain_event_io_error_reason_msg__devAlias = -1;
static int hf_remote_domain_event_io_error_reason_msg__action = -1;
static int hf_remote_domain_event_io_error_reason_msg__reason = -1;
static int hf_remote_domain_event_io_error_reason_msg = -1;
static gint ett_remote_domain_event_io_error_reason_msg = -1;
static gboolean dissect_xdr_remote_domain_event_io_error_reason_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_io_error_reason_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_io_error_reason_msg);
    
    hf = hf_remote_domain_event_io_error_reason_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_reason_msg__srcPath;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_reason_msg__devAlias;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_reason_msg__action;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_io_error_reason_msg__reason;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_graphics_address__family = -1;
static int hf_remote_domain_event_graphics_address__node = -1;
static int hf_remote_domain_event_graphics_address__service = -1;
static int hf_remote_domain_event_graphics_address = -1;
static gint ett_remote_domain_event_graphics_address = -1;
static gboolean dissect_xdr_remote_domain_event_graphics_address(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_graphics_address");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_graphics_address);
    
    hf = hf_remote_domain_event_graphics_address__family;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_address__node;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_address__service;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
#define REMOTE_DOMAIN_EVENT_GRAPHICS_IDENTITY_MAX (20)
static int hf_remote_domain_event_graphics_identity__type = -1;
static int hf_remote_domain_event_graphics_identity__name = -1;
static int hf_remote_domain_event_graphics_identity = -1;
static gint ett_remote_domain_event_graphics_identity = -1;
static gboolean dissect_xdr_remote_domain_event_graphics_identity(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_graphics_identity");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_graphics_identity);
    
    hf = hf_remote_domain_event_graphics_identity__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_identity__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_graphics_msg__dom = -1;
static int hf_remote_domain_event_graphics_msg__phase = -1;
static int hf_remote_domain_event_graphics_msg__local = -1;
static int hf_remote_domain_event_graphics_msg__remote = -1;
static int hf_remote_domain_event_graphics_msg__authScheme = -1;
static int hf_remote_domain_event_graphics_msg__subject = -1;
static int hf_remote_domain_event_graphics_msg__subject___ELEMENT_ = -1;
static gint ett_remote_domain_event_graphics_msg__subject = -1;
static int hf_remote_domain_event_graphics_msg = -1;
static gint ett_remote_domain_event_graphics_msg = -1;
static gboolean dissect_xdr_remote_domain_event_graphics_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_graphics_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_graphics_msg);
    
    hf = hf_remote_domain_event_graphics_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_msg__phase;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_msg__local;
    if (!dissect_xdr_remote_domain_event_graphics_address(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_msg__remote;
    if (!dissect_xdr_remote_domain_event_graphics_address(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_msg__authScheme;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_graphics_msg__subject;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_event_graphics_msg__subject, hf_remote_domain_event_graphics_msg__subject___ELEMENT_, "remote_domain_event_graphics_identity", REMOTE_DOMAIN_EVENT_GRAPHICS_IDENTITY_MAX, dissect_xdr_remote_domain_event_graphics_identity)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_block_job_msg__dom = -1;
static int hf_remote_domain_event_block_job_msg__path = -1;
static int hf_remote_domain_event_block_job_msg__type = -1;
static int hf_remote_domain_event_block_job_msg__status = -1;
static int hf_remote_domain_event_block_job_msg = -1;
static gint ett_remote_domain_event_block_job_msg = -1;
static gboolean dissect_xdr_remote_domain_event_block_job_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_block_job_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_block_job_msg);
    
    hf = hf_remote_domain_event_block_job_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_block_job_msg__path;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_block_job_msg__type;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_block_job_msg__status;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_disk_change_msg__dom = -1;
static int hf_remote_domain_event_disk_change_msg__oldSrcPath = -1;
static int hf_remote_domain_event_disk_change_msg__newSrcPath = -1;
static int hf_remote_domain_event_disk_change_msg__devAlias = -1;
static int hf_remote_domain_event_disk_change_msg__reason = -1;
static int hf_remote_domain_event_disk_change_msg = -1;
static gint ett_remote_domain_event_disk_change_msg = -1;
static gboolean dissect_xdr_remote_domain_event_disk_change_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_disk_change_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_disk_change_msg);
    
    hf = hf_remote_domain_event_disk_change_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_disk_change_msg__oldSrcPath;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_disk_change_msg__newSrcPath;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_disk_change_msg__devAlias;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_disk_change_msg__reason;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_tray_change_msg__dom = -1;
static int hf_remote_domain_event_tray_change_msg__devAlias = -1;
static int hf_remote_domain_event_tray_change_msg__reason = -1;
static int hf_remote_domain_event_tray_change_msg = -1;
static gint ett_remote_domain_event_tray_change_msg = -1;
static gboolean dissect_xdr_remote_domain_event_tray_change_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_tray_change_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_tray_change_msg);
    
    hf = hf_remote_domain_event_tray_change_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_tray_change_msg__devAlias;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_tray_change_msg__reason;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_pmwakeup_msg__dom = -1;
static int hf_remote_domain_event_pmwakeup_msg = -1;
static gint ett_remote_domain_event_pmwakeup_msg = -1;
static gboolean dissect_xdr_remote_domain_event_pmwakeup_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_pmwakeup_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_pmwakeup_msg);
    
    hf = hf_remote_domain_event_pmwakeup_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_pmsuspend_msg__dom = -1;
static int hf_remote_domain_event_pmsuspend_msg = -1;
static gint ett_remote_domain_event_pmsuspend_msg = -1;
static gboolean dissect_xdr_remote_domain_event_pmsuspend_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_pmsuspend_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_pmsuspend_msg);
    
    hf = hf_remote_domain_event_pmsuspend_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_balloon_change_msg__dom = -1;
static int hf_remote_domain_event_balloon_change_msg__actual = -1;
static int hf_remote_domain_event_balloon_change_msg = -1;
static gint ett_remote_domain_event_balloon_change_msg = -1;
static gboolean dissect_xdr_remote_domain_event_balloon_change_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_balloon_change_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_balloon_change_msg);
    
    hf = hf_remote_domain_event_balloon_change_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_event_balloon_change_msg__actual;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_pmsuspend_disk_msg__dom = -1;
static int hf_remote_domain_event_pmsuspend_disk_msg = -1;
static gint ett_remote_domain_event_pmsuspend_disk_msg = -1;
static gboolean dissect_xdr_remote_domain_event_pmsuspend_disk_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_pmsuspend_disk_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_pmsuspend_disk_msg);
    
    hf = hf_remote_domain_event_pmsuspend_disk_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_managed_save_args__dom = -1;
static int hf_remote_domain_managed_save_args__flags = -1;
static int hf_remote_domain_managed_save_args = -1;
static gint ett_remote_domain_managed_save_args = -1;
static gboolean dissect_xdr_remote_domain_managed_save_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_managed_save_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_managed_save_args);
    
    hf = hf_remote_domain_managed_save_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_managed_save_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_has_managed_save_image_args__dom = -1;
static int hf_remote_domain_has_managed_save_image_args__flags = -1;
static int hf_remote_domain_has_managed_save_image_args = -1;
static gint ett_remote_domain_has_managed_save_image_args = -1;
static gboolean dissect_xdr_remote_domain_has_managed_save_image_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_has_managed_save_image_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_has_managed_save_image_args);
    
    hf = hf_remote_domain_has_managed_save_image_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_has_managed_save_image_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_has_managed_save_image_ret__result = -1;
static int hf_remote_domain_has_managed_save_image_ret = -1;
static gint ett_remote_domain_has_managed_save_image_ret = -1;
static gboolean dissect_xdr_remote_domain_has_managed_save_image_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_has_managed_save_image_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_has_managed_save_image_ret);
    
    hf = hf_remote_domain_has_managed_save_image_ret__result;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_managed_save_remove_args__dom = -1;
static int hf_remote_domain_managed_save_remove_args__flags = -1;
static int hf_remote_domain_managed_save_remove_args = -1;
static gint ett_remote_domain_managed_save_remove_args = -1;
static gboolean dissect_xdr_remote_domain_managed_save_remove_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_managed_save_remove_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_managed_save_remove_args);
    
    hf = hf_remote_domain_managed_save_remove_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_managed_save_remove_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_create_xml_args__dom = -1;
static int hf_remote_domain_snapshot_create_xml_args__xml_desc = -1;
static int hf_remote_domain_snapshot_create_xml_args__flags = -1;
static int hf_remote_domain_snapshot_create_xml_args = -1;
static gint ett_remote_domain_snapshot_create_xml_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_create_xml_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_create_xml_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_create_xml_args);
    
    hf = hf_remote_domain_snapshot_create_xml_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_create_xml_args__xml_desc;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_create_xml_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_create_xml_ret__snap = -1;
static int hf_remote_domain_snapshot_create_xml_ret = -1;
static gint ett_remote_domain_snapshot_create_xml_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_create_xml_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_create_xml_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_create_xml_ret);
    
    hf = hf_remote_domain_snapshot_create_xml_ret__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_get_xml_desc_args__snap = -1;
static int hf_remote_domain_snapshot_get_xml_desc_args__flags = -1;
static int hf_remote_domain_snapshot_get_xml_desc_args = -1;
static gint ett_remote_domain_snapshot_get_xml_desc_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_get_xml_desc_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_get_xml_desc_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_get_xml_desc_args);
    
    hf = hf_remote_domain_snapshot_get_xml_desc_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_get_xml_desc_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_get_xml_desc_ret__xml = -1;
static int hf_remote_domain_snapshot_get_xml_desc_ret = -1;
static gint ett_remote_domain_snapshot_get_xml_desc_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_get_xml_desc_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_get_xml_desc_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_get_xml_desc_ret);
    
    hf = hf_remote_domain_snapshot_get_xml_desc_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_num_args__dom = -1;
static int hf_remote_domain_snapshot_num_args__flags = -1;
static int hf_remote_domain_snapshot_num_args = -1;
static gint ett_remote_domain_snapshot_num_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_num_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_num_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_num_args);
    
    hf = hf_remote_domain_snapshot_num_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_num_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_num_ret__num = -1;
static int hf_remote_domain_snapshot_num_ret = -1;
static gint ett_remote_domain_snapshot_num_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_num_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_num_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_num_ret);
    
    hf = hf_remote_domain_snapshot_num_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_list_names_args__dom = -1;
static int hf_remote_domain_snapshot_list_names_args__maxnames = -1;
static int hf_remote_domain_snapshot_list_names_args__flags = -1;
static int hf_remote_domain_snapshot_list_names_args = -1;
static gint ett_remote_domain_snapshot_list_names_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_list_names_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_list_names_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_list_names_args);
    
    hf = hf_remote_domain_snapshot_list_names_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_names_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_names_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_list_names_ret__names = -1;
static int hf_remote_domain_snapshot_list_names_ret__names___ELEMENT_ = -1;
static gint ett_remote_domain_snapshot_list_names_ret__names = -1;
static int hf_remote_domain_snapshot_list_names_ret = -1;
static gint ett_remote_domain_snapshot_list_names_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_list_names_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_list_names_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_list_names_ret);
    
    hf = hf_remote_domain_snapshot_list_names_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_snapshot_list_names_ret__names, hf_remote_domain_snapshot_list_names_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_DOMAIN_SNAPSHOT_LIST_NAMES_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_list_all_snapshots_args__dom = -1;
static int hf_remote_domain_list_all_snapshots_args__need_results = -1;
static int hf_remote_domain_list_all_snapshots_args__flags = -1;
static int hf_remote_domain_list_all_snapshots_args = -1;
static gint ett_remote_domain_list_all_snapshots_args = -1;
static gboolean dissect_xdr_remote_domain_list_all_snapshots_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_list_all_snapshots_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_list_all_snapshots_args);
    
    hf = hf_remote_domain_list_all_snapshots_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_list_all_snapshots_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_list_all_snapshots_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_list_all_snapshots_ret__snapshots = -1;
static int hf_remote_domain_list_all_snapshots_ret__snapshots___ELEMENT_ = -1;
static gint ett_remote_domain_list_all_snapshots_ret__snapshots = -1;
static int hf_remote_domain_list_all_snapshots_ret__ret = -1;
static int hf_remote_domain_list_all_snapshots_ret = -1;
static gint ett_remote_domain_list_all_snapshots_ret = -1;
static gboolean dissect_xdr_remote_domain_list_all_snapshots_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_list_all_snapshots_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_list_all_snapshots_ret);
    
    hf = hf_remote_domain_list_all_snapshots_ret__snapshots;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_list_all_snapshots_ret__snapshots, hf_remote_domain_list_all_snapshots_ret__snapshots___ELEMENT_, "remote_nonnull_domain_snapshot", ~0, dissect_xdr_remote_nonnull_domain_snapshot)) return FALSE;
    
    hf = hf_remote_domain_list_all_snapshots_ret__ret;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_num_children_args__snap = -1;
static int hf_remote_domain_snapshot_num_children_args__flags = -1;
static int hf_remote_domain_snapshot_num_children_args = -1;
static gint ett_remote_domain_snapshot_num_children_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_num_children_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_num_children_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_num_children_args);
    
    hf = hf_remote_domain_snapshot_num_children_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_num_children_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_num_children_ret__num = -1;
static int hf_remote_domain_snapshot_num_children_ret = -1;
static gint ett_remote_domain_snapshot_num_children_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_num_children_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_num_children_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_num_children_ret);
    
    hf = hf_remote_domain_snapshot_num_children_ret__num;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_list_children_names_args__snap = -1;
static int hf_remote_domain_snapshot_list_children_names_args__maxnames = -1;
static int hf_remote_domain_snapshot_list_children_names_args__flags = -1;
static int hf_remote_domain_snapshot_list_children_names_args = -1;
static gint ett_remote_domain_snapshot_list_children_names_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_list_children_names_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_list_children_names_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_list_children_names_args);
    
    hf = hf_remote_domain_snapshot_list_children_names_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_children_names_args__maxnames;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_children_names_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_list_children_names_ret__names = -1;
static int hf_remote_domain_snapshot_list_children_names_ret__names___ELEMENT_ = -1;
static gint ett_remote_domain_snapshot_list_children_names_ret__names = -1;
static int hf_remote_domain_snapshot_list_children_names_ret = -1;
static gint ett_remote_domain_snapshot_list_children_names_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_list_children_names_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_list_children_names_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_list_children_names_ret);
    
    hf = hf_remote_domain_snapshot_list_children_names_ret__names;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_snapshot_list_children_names_ret__names, hf_remote_domain_snapshot_list_children_names_ret__names___ELEMENT_, "remote_nonnull_string", REMOTE_DOMAIN_SNAPSHOT_LIST_NAMES_MAX, dissect_xdr_remote_nonnull_string)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_list_all_children_args__snapshot = -1;
static int hf_remote_domain_snapshot_list_all_children_args__need_results = -1;
static int hf_remote_domain_snapshot_list_all_children_args__flags = -1;
static int hf_remote_domain_snapshot_list_all_children_args = -1;
static gint ett_remote_domain_snapshot_list_all_children_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_list_all_children_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_list_all_children_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_list_all_children_args);
    
    hf = hf_remote_domain_snapshot_list_all_children_args__snapshot;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_all_children_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_all_children_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_list_all_children_ret__snapshots = -1;
static int hf_remote_domain_snapshot_list_all_children_ret__snapshots___ELEMENT_ = -1;
static gint ett_remote_domain_snapshot_list_all_children_ret__snapshots = -1;
static int hf_remote_domain_snapshot_list_all_children_ret__ret = -1;
static int hf_remote_domain_snapshot_list_all_children_ret = -1;
static gint ett_remote_domain_snapshot_list_all_children_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_list_all_children_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_list_all_children_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_list_all_children_ret);
    
    hf = hf_remote_domain_snapshot_list_all_children_ret__snapshots;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_snapshot_list_all_children_ret__snapshots, hf_remote_domain_snapshot_list_all_children_ret__snapshots___ELEMENT_, "remote_nonnull_domain_snapshot", ~0, dissect_xdr_remote_nonnull_domain_snapshot)) return FALSE;
    
    hf = hf_remote_domain_snapshot_list_all_children_ret__ret;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_lookup_by_name_args__dom = -1;
static int hf_remote_domain_snapshot_lookup_by_name_args__name = -1;
static int hf_remote_domain_snapshot_lookup_by_name_args__flags = -1;
static int hf_remote_domain_snapshot_lookup_by_name_args = -1;
static gint ett_remote_domain_snapshot_lookup_by_name_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_lookup_by_name_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_lookup_by_name_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_lookup_by_name_args);
    
    hf = hf_remote_domain_snapshot_lookup_by_name_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_lookup_by_name_args__name;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_lookup_by_name_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_lookup_by_name_ret__snap = -1;
static int hf_remote_domain_snapshot_lookup_by_name_ret = -1;
static gint ett_remote_domain_snapshot_lookup_by_name_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_lookup_by_name_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_lookup_by_name_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_lookup_by_name_ret);
    
    hf = hf_remote_domain_snapshot_lookup_by_name_ret__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_has_current_snapshot_args__dom = -1;
static int hf_remote_domain_has_current_snapshot_args__flags = -1;
static int hf_remote_domain_has_current_snapshot_args = -1;
static gint ett_remote_domain_has_current_snapshot_args = -1;
static gboolean dissect_xdr_remote_domain_has_current_snapshot_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_has_current_snapshot_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_has_current_snapshot_args);
    
    hf = hf_remote_domain_has_current_snapshot_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_has_current_snapshot_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_has_current_snapshot_ret__result = -1;
static int hf_remote_domain_has_current_snapshot_ret = -1;
static gint ett_remote_domain_has_current_snapshot_ret = -1;
static gboolean dissect_xdr_remote_domain_has_current_snapshot_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_has_current_snapshot_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_has_current_snapshot_ret);
    
    hf = hf_remote_domain_has_current_snapshot_ret__result;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_get_parent_args__snap = -1;
static int hf_remote_domain_snapshot_get_parent_args__flags = -1;
static int hf_remote_domain_snapshot_get_parent_args = -1;
static gint ett_remote_domain_snapshot_get_parent_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_get_parent_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_get_parent_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_get_parent_args);
    
    hf = hf_remote_domain_snapshot_get_parent_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_get_parent_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_get_parent_ret__snap = -1;
static int hf_remote_domain_snapshot_get_parent_ret = -1;
static gint ett_remote_domain_snapshot_get_parent_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_get_parent_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_get_parent_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_get_parent_ret);
    
    hf = hf_remote_domain_snapshot_get_parent_ret__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_current_args__dom = -1;
static int hf_remote_domain_snapshot_current_args__flags = -1;
static int hf_remote_domain_snapshot_current_args = -1;
static gint ett_remote_domain_snapshot_current_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_current_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_current_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_current_args);
    
    hf = hf_remote_domain_snapshot_current_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_current_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_current_ret__snap = -1;
static int hf_remote_domain_snapshot_current_ret = -1;
static gint ett_remote_domain_snapshot_current_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_current_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_current_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_current_ret);
    
    hf = hf_remote_domain_snapshot_current_ret__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_is_current_args__snap = -1;
static int hf_remote_domain_snapshot_is_current_args__flags = -1;
static int hf_remote_domain_snapshot_is_current_args = -1;
static gint ett_remote_domain_snapshot_is_current_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_is_current_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_is_current_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_is_current_args);
    
    hf = hf_remote_domain_snapshot_is_current_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_is_current_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_is_current_ret__current = -1;
static int hf_remote_domain_snapshot_is_current_ret = -1;
static gint ett_remote_domain_snapshot_is_current_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_is_current_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_is_current_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_is_current_ret);
    
    hf = hf_remote_domain_snapshot_is_current_ret__current;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_has_metadata_args__snap = -1;
static int hf_remote_domain_snapshot_has_metadata_args__flags = -1;
static int hf_remote_domain_snapshot_has_metadata_args = -1;
static gint ett_remote_domain_snapshot_has_metadata_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_has_metadata_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_has_metadata_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_has_metadata_args);
    
    hf = hf_remote_domain_snapshot_has_metadata_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_has_metadata_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_has_metadata_ret__metadata = -1;
static int hf_remote_domain_snapshot_has_metadata_ret = -1;
static gint ett_remote_domain_snapshot_has_metadata_ret = -1;
static gboolean dissect_xdr_remote_domain_snapshot_has_metadata_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_has_metadata_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_has_metadata_ret);
    
    hf = hf_remote_domain_snapshot_has_metadata_ret__metadata;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_revert_to_snapshot_args__snap = -1;
static int hf_remote_domain_revert_to_snapshot_args__flags = -1;
static int hf_remote_domain_revert_to_snapshot_args = -1;
static gint ett_remote_domain_revert_to_snapshot_args = -1;
static gboolean dissect_xdr_remote_domain_revert_to_snapshot_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_revert_to_snapshot_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_revert_to_snapshot_args);
    
    hf = hf_remote_domain_revert_to_snapshot_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_revert_to_snapshot_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_snapshot_delete_args__snap = -1;
static int hf_remote_domain_snapshot_delete_args__flags = -1;
static int hf_remote_domain_snapshot_delete_args = -1;
static gint ett_remote_domain_snapshot_delete_args = -1;
static gboolean dissect_xdr_remote_domain_snapshot_delete_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_snapshot_delete_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_snapshot_delete_args);
    
    hf = hf_remote_domain_snapshot_delete_args__snap;
    if (!dissect_xdr_remote_nonnull_domain_snapshot(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_snapshot_delete_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_open_console_args__dom = -1;
static int hf_remote_domain_open_console_args__dev_name = -1;
static int hf_remote_domain_open_console_args__flags = -1;
static int hf_remote_domain_open_console_args = -1;
static gint ett_remote_domain_open_console_args = -1;
static gboolean dissect_xdr_remote_domain_open_console_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_open_console_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_open_console_args);
    
    hf = hf_remote_domain_open_console_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_open_console_args__dev_name;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_open_console_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_open_channel_args__dom = -1;
static int hf_remote_domain_open_channel_args__name = -1;
static int hf_remote_domain_open_channel_args__flags = -1;
static int hf_remote_domain_open_channel_args = -1;
static gint ett_remote_domain_open_channel_args = -1;
static gboolean dissect_xdr_remote_domain_open_channel_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_open_channel_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_open_channel_args);
    
    hf = hf_remote_domain_open_channel_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_open_channel_args__name;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_open_channel_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_upload_args__vol = -1;
static int hf_remote_storage_vol_upload_args__offset = -1;
static int hf_remote_storage_vol_upload_args__length = -1;
static int hf_remote_storage_vol_upload_args__flags = -1;
static int hf_remote_storage_vol_upload_args = -1;
static gint ett_remote_storage_vol_upload_args = -1;
static gboolean dissect_xdr_remote_storage_vol_upload_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_upload_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_upload_args);
    
    hf = hf_remote_storage_vol_upload_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_upload_args__offset;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_upload_args__length;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_upload_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_vol_download_args__vol = -1;
static int hf_remote_storage_vol_download_args__offset = -1;
static int hf_remote_storage_vol_download_args__length = -1;
static int hf_remote_storage_vol_download_args__flags = -1;
static int hf_remote_storage_vol_download_args = -1;
static gint ett_remote_storage_vol_download_args = -1;
static gboolean dissect_xdr_remote_storage_vol_download_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_vol_download_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_vol_download_args);
    
    hf = hf_remote_storage_vol_download_args__vol;
    if (!dissect_xdr_remote_nonnull_storage_vol(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_download_args__offset;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_download_args__length;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_vol_download_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_state_args__dom = -1;
static int hf_remote_domain_get_state_args__flags = -1;
static int hf_remote_domain_get_state_args = -1;
static gint ett_remote_domain_get_state_args = -1;
static gboolean dissect_xdr_remote_domain_get_state_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_state_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_state_args);
    
    hf = hf_remote_domain_get_state_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_state_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_state_ret__state = -1;
static int hf_remote_domain_get_state_ret__reason = -1;
static int hf_remote_domain_get_state_ret = -1;
static gint ett_remote_domain_get_state_ret = -1;
static gboolean dissect_xdr_remote_domain_get_state_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_state_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_state_ret);
    
    hf = hf_remote_domain_get_state_ret__state;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_state_ret__reason;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_begin3_args__dom = -1;
static int hf_remote_domain_migrate_begin3_args__xmlin = -1;
static int hf_remote_domain_migrate_begin3_args__flags = -1;
static int hf_remote_domain_migrate_begin3_args__dname = -1;
static int hf_remote_domain_migrate_begin3_args__resource = -1;
static int hf_remote_domain_migrate_begin3_args = -1;
static gint ett_remote_domain_migrate_begin3_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_begin3_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_begin3_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_begin3_args);
    
    hf = hf_remote_domain_migrate_begin3_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_args__xmlin;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_begin3_ret__cookie_out = -1;
static int hf_remote_domain_migrate_begin3_ret__xml = -1;
static int hf_remote_domain_migrate_begin3_ret = -1;
static gint ett_remote_domain_migrate_begin3_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_begin3_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_begin3_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_begin3_ret);
    
    hf = hf_remote_domain_migrate_begin3_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare3_args__cookie_in = -1;
static int hf_remote_domain_migrate_prepare3_args__uri_in = -1;
static int hf_remote_domain_migrate_prepare3_args__flags = -1;
static int hf_remote_domain_migrate_prepare3_args__dname = -1;
static int hf_remote_domain_migrate_prepare3_args__resource = -1;
static int hf_remote_domain_migrate_prepare3_args__dom_xml = -1;
static int hf_remote_domain_migrate_prepare3_args = -1;
static gint ett_remote_domain_migrate_prepare3_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare3_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare3_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare3_args);
    
    hf = hf_remote_domain_migrate_prepare3_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_args__uri_in;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_args__dom_xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare3_ret__cookie_out = -1;
static int hf_remote_domain_migrate_prepare3_ret__uri_out = -1;
static int hf_remote_domain_migrate_prepare3_ret = -1;
static gint ett_remote_domain_migrate_prepare3_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare3_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare3_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare3_ret);
    
    hf = hf_remote_domain_migrate_prepare3_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_ret__uri_out;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_tunnel3_args__cookie_in = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_args__flags = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_args__dname = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_args__resource = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_args__dom_xml = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_args = -1;
static gint ett_remote_domain_migrate_prepare_tunnel3_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_tunnel3_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_tunnel3_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_tunnel3_args);
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_args__dom_xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_tunnel3_ret__cookie_out = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_ret = -1;
static gint ett_remote_domain_migrate_prepare_tunnel3_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_tunnel3_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_tunnel3_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_tunnel3_ret);
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_perform3_args__dom = -1;
static int hf_remote_domain_migrate_perform3_args__xmlin = -1;
static int hf_remote_domain_migrate_perform3_args__cookie_in = -1;
static int hf_remote_domain_migrate_perform3_args__dconnuri = -1;
static int hf_remote_domain_migrate_perform3_args__uri = -1;
static int hf_remote_domain_migrate_perform3_args__flags = -1;
static int hf_remote_domain_migrate_perform3_args__dname = -1;
static int hf_remote_domain_migrate_perform3_args__resource = -1;
static int hf_remote_domain_migrate_perform3_args = -1;
static gint ett_remote_domain_migrate_perform3_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_perform3_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_perform3_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_perform3_args);
    
    hf = hf_remote_domain_migrate_perform3_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__xmlin;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__dconnuri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__uri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__dname;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_args__resource;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_perform3_ret__cookie_out = -1;
static int hf_remote_domain_migrate_perform3_ret = -1;
static gint ett_remote_domain_migrate_perform3_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_perform3_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_perform3_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_perform3_ret);
    
    hf = hf_remote_domain_migrate_perform3_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish3_args__dname = -1;
static int hf_remote_domain_migrate_finish3_args__cookie_in = -1;
static int hf_remote_domain_migrate_finish3_args__dconnuri = -1;
static int hf_remote_domain_migrate_finish3_args__uri = -1;
static int hf_remote_domain_migrate_finish3_args__flags = -1;
static int hf_remote_domain_migrate_finish3_args__cancelled = -1;
static int hf_remote_domain_migrate_finish3_args = -1;
static gint ett_remote_domain_migrate_finish3_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish3_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish3_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish3_args);
    
    hf = hf_remote_domain_migrate_finish3_args__dname;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_args__dconnuri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_args__uri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_args__cancelled;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish3_ret__dom = -1;
static int hf_remote_domain_migrate_finish3_ret__cookie_out = -1;
static int hf_remote_domain_migrate_finish3_ret = -1;
static gint ett_remote_domain_migrate_finish3_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish3_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish3_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish3_ret);
    
    hf = hf_remote_domain_migrate_finish3_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_confirm3_args__dom = -1;
static int hf_remote_domain_migrate_confirm3_args__cookie_in = -1;
static int hf_remote_domain_migrate_confirm3_args__flags = -1;
static int hf_remote_domain_migrate_confirm3_args__cancelled = -1;
static int hf_remote_domain_migrate_confirm3_args = -1;
static gint ett_remote_domain_migrate_confirm3_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_confirm3_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_confirm3_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_confirm3_args);
    
    hf = hf_remote_domain_migrate_confirm3_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_args__flags;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_args__cancelled;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_event_control_error_msg__dom = -1;
static int hf_remote_domain_event_control_error_msg = -1;
static gint ett_remote_domain_event_control_error_msg = -1;
static gboolean dissect_xdr_remote_domain_event_control_error_msg(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_event_control_error_msg");
    tree = proto_item_add_subtree(ti, ett_remote_domain_event_control_error_msg);
    
    hf = hf_remote_domain_event_control_error_msg__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_control_info_args__dom = -1;
static int hf_remote_domain_get_control_info_args__flags = -1;
static int hf_remote_domain_get_control_info_args = -1;
static gint ett_remote_domain_get_control_info_args = -1;
static gboolean dissect_xdr_remote_domain_get_control_info_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_control_info_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_control_info_args);
    
    hf = hf_remote_domain_get_control_info_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_control_info_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_control_info_ret__state = -1;
static int hf_remote_domain_get_control_info_ret__details = -1;
static int hf_remote_domain_get_control_info_ret__stateTime = -1;
static int hf_remote_domain_get_control_info_ret = -1;
static gint ett_remote_domain_get_control_info_ret = -1;
static gboolean dissect_xdr_remote_domain_get_control_info_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_control_info_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_control_info_ret);
    
    hf = hf_remote_domain_get_control_info_ret__state;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_control_info_ret__details;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_control_info_ret__stateTime;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_open_graphics_args__dom = -1;
static int hf_remote_domain_open_graphics_args__idx = -1;
static int hf_remote_domain_open_graphics_args__flags = -1;
static int hf_remote_domain_open_graphics_args = -1;
static gint ett_remote_domain_open_graphics_args = -1;
static gboolean dissect_xdr_remote_domain_open_graphics_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_open_graphics_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_open_graphics_args);
    
    hf = hf_remote_domain_open_graphics_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_open_graphics_args__idx;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_open_graphics_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_suspend_for_duration_args__target = -1;
static int hf_remote_node_suspend_for_duration_args__duration = -1;
static int hf_remote_node_suspend_for_duration_args__flags = -1;
static int hf_remote_node_suspend_for_duration_args = -1;
static gint ett_remote_node_suspend_for_duration_args = -1;
static gboolean dissect_xdr_remote_node_suspend_for_duration_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_suspend_for_duration_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_suspend_for_duration_args);
    
    hf = hf_remote_node_suspend_for_duration_args__target;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_suspend_for_duration_args__duration;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_suspend_for_duration_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_shutdown_flags_args__dom = -1;
static int hf_remote_domain_shutdown_flags_args__flags = -1;
static int hf_remote_domain_shutdown_flags_args = -1;
static gint ett_remote_domain_shutdown_flags_args = -1;
static gboolean dissect_xdr_remote_domain_shutdown_flags_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_shutdown_flags_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_shutdown_flags_args);
    
    hf = hf_remote_domain_shutdown_flags_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_shutdown_flags_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_disk_errors_args__dom = -1;
static int hf_remote_domain_get_disk_errors_args__maxerrors = -1;
static int hf_remote_domain_get_disk_errors_args__flags = -1;
static int hf_remote_domain_get_disk_errors_args = -1;
static gint ett_remote_domain_get_disk_errors_args = -1;
static gboolean dissect_xdr_remote_domain_get_disk_errors_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_disk_errors_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_disk_errors_args);
    
    hf = hf_remote_domain_get_disk_errors_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_disk_errors_args__maxerrors;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_get_disk_errors_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_get_disk_errors_ret__errors = -1;
static int hf_remote_domain_get_disk_errors_ret__errors___ELEMENT_ = -1;
static gint ett_remote_domain_get_disk_errors_ret__errors = -1;
static int hf_remote_domain_get_disk_errors_ret__nerrors = -1;
static int hf_remote_domain_get_disk_errors_ret = -1;
static gint ett_remote_domain_get_disk_errors_ret = -1;
static gboolean dissect_xdr_remote_domain_get_disk_errors_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_get_disk_errors_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_get_disk_errors_ret);
    
    hf = hf_remote_domain_get_disk_errors_ret__errors;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_get_disk_errors_ret__errors, hf_remote_domain_get_disk_errors_ret__errors___ELEMENT_, "remote_domain_disk_error", REMOTE_DOMAIN_DISK_ERRORS_MAX, dissect_xdr_remote_domain_disk_error)) return FALSE;
    
    hf = hf_remote_domain_get_disk_errors_ret__nerrors;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_domains_args__need_results = -1;
static int hf_remote_connect_list_all_domains_args__flags = -1;
static int hf_remote_connect_list_all_domains_args = -1;
static gint ett_remote_connect_list_all_domains_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_domains_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_domains_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_domains_args);
    
    hf = hf_remote_connect_list_all_domains_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_domains_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_domains_ret__domains = -1;
static int hf_remote_connect_list_all_domains_ret__domains___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_domains_ret__domains = -1;
static int hf_remote_connect_list_all_domains_ret__ret = -1;
static int hf_remote_connect_list_all_domains_ret = -1;
static gint ett_remote_connect_list_all_domains_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_domains_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_domains_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_domains_ret);
    
    hf = hf_remote_connect_list_all_domains_ret__domains;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_domains_ret__domains, hf_remote_connect_list_all_domains_ret__domains___ELEMENT_, "remote_nonnull_domain", ~0, dissect_xdr_remote_nonnull_domain)) return FALSE;
    
    hf = hf_remote_connect_list_all_domains_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_storage_pools_args__need_results = -1;
static int hf_remote_connect_list_all_storage_pools_args__flags = -1;
static int hf_remote_connect_list_all_storage_pools_args = -1;
static gint ett_remote_connect_list_all_storage_pools_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_storage_pools_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_storage_pools_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_storage_pools_args);
    
    hf = hf_remote_connect_list_all_storage_pools_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_storage_pools_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_storage_pools_ret__pools = -1;
static int hf_remote_connect_list_all_storage_pools_ret__pools___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_storage_pools_ret__pools = -1;
static int hf_remote_connect_list_all_storage_pools_ret__ret = -1;
static int hf_remote_connect_list_all_storage_pools_ret = -1;
static gint ett_remote_connect_list_all_storage_pools_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_storage_pools_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_storage_pools_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_storage_pools_ret);
    
    hf = hf_remote_connect_list_all_storage_pools_ret__pools;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_storage_pools_ret__pools, hf_remote_connect_list_all_storage_pools_ret__pools___ELEMENT_, "remote_nonnull_storage_pool", ~0, dissect_xdr_remote_nonnull_storage_pool)) return FALSE;
    
    hf = hf_remote_connect_list_all_storage_pools_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_list_all_volumes_args__pool = -1;
static int hf_remote_storage_pool_list_all_volumes_args__need_results = -1;
static int hf_remote_storage_pool_list_all_volumes_args__flags = -1;
static int hf_remote_storage_pool_list_all_volumes_args = -1;
static gint ett_remote_storage_pool_list_all_volumes_args = -1;
static gboolean dissect_xdr_remote_storage_pool_list_all_volumes_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_list_all_volumes_args");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_list_all_volumes_args);
    
    hf = hf_remote_storage_pool_list_all_volumes_args__pool;
    if (!dissect_xdr_remote_nonnull_storage_pool(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_list_all_volumes_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_storage_pool_list_all_volumes_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_storage_pool_list_all_volumes_ret__vols = -1;
static int hf_remote_storage_pool_list_all_volumes_ret__vols___ELEMENT_ = -1;
static gint ett_remote_storage_pool_list_all_volumes_ret__vols = -1;
static int hf_remote_storage_pool_list_all_volumes_ret__ret = -1;
static int hf_remote_storage_pool_list_all_volumes_ret = -1;
static gint ett_remote_storage_pool_list_all_volumes_ret = -1;
static gboolean dissect_xdr_remote_storage_pool_list_all_volumes_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_storage_pool_list_all_volumes_ret");
    tree = proto_item_add_subtree(ti, ett_remote_storage_pool_list_all_volumes_ret);
    
    hf = hf_remote_storage_pool_list_all_volumes_ret__vols;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_storage_pool_list_all_volumes_ret__vols, hf_remote_storage_pool_list_all_volumes_ret__vols___ELEMENT_, "remote_nonnull_storage_vol", ~0, dissect_xdr_remote_nonnull_storage_vol)) return FALSE;
    
    hf = hf_remote_storage_pool_list_all_volumes_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_networks_args__need_results = -1;
static int hf_remote_connect_list_all_networks_args__flags = -1;
static int hf_remote_connect_list_all_networks_args = -1;
static gint ett_remote_connect_list_all_networks_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_networks_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_networks_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_networks_args);
    
    hf = hf_remote_connect_list_all_networks_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_networks_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_networks_ret__nets = -1;
static int hf_remote_connect_list_all_networks_ret__nets___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_networks_ret__nets = -1;
static int hf_remote_connect_list_all_networks_ret__ret = -1;
static int hf_remote_connect_list_all_networks_ret = -1;
static gint ett_remote_connect_list_all_networks_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_networks_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_networks_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_networks_ret);
    
    hf = hf_remote_connect_list_all_networks_ret__nets;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_networks_ret__nets, hf_remote_connect_list_all_networks_ret__nets___ELEMENT_, "remote_nonnull_network", ~0, dissect_xdr_remote_nonnull_network)) return FALSE;
    
    hf = hf_remote_connect_list_all_networks_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_interfaces_args__need_results = -1;
static int hf_remote_connect_list_all_interfaces_args__flags = -1;
static int hf_remote_connect_list_all_interfaces_args = -1;
static gint ett_remote_connect_list_all_interfaces_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_interfaces_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_interfaces_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_interfaces_args);
    
    hf = hf_remote_connect_list_all_interfaces_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_interfaces_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_interfaces_ret__ifaces = -1;
static int hf_remote_connect_list_all_interfaces_ret__ifaces___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_interfaces_ret__ifaces = -1;
static int hf_remote_connect_list_all_interfaces_ret__ret = -1;
static int hf_remote_connect_list_all_interfaces_ret = -1;
static gint ett_remote_connect_list_all_interfaces_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_interfaces_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_interfaces_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_interfaces_ret);
    
    hf = hf_remote_connect_list_all_interfaces_ret__ifaces;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_interfaces_ret__ifaces, hf_remote_connect_list_all_interfaces_ret__ifaces___ELEMENT_, "remote_nonnull_interface", ~0, dissect_xdr_remote_nonnull_interface)) return FALSE;
    
    hf = hf_remote_connect_list_all_interfaces_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_node_devices_args__need_results = -1;
static int hf_remote_connect_list_all_node_devices_args__flags = -1;
static int hf_remote_connect_list_all_node_devices_args = -1;
static gint ett_remote_connect_list_all_node_devices_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_node_devices_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_node_devices_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_node_devices_args);
    
    hf = hf_remote_connect_list_all_node_devices_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_node_devices_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_node_devices_ret__devices = -1;
static int hf_remote_connect_list_all_node_devices_ret__devices___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_node_devices_ret__devices = -1;
static int hf_remote_connect_list_all_node_devices_ret__ret = -1;
static int hf_remote_connect_list_all_node_devices_ret = -1;
static gint ett_remote_connect_list_all_node_devices_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_node_devices_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_node_devices_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_node_devices_ret);
    
    hf = hf_remote_connect_list_all_node_devices_ret__devices;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_node_devices_ret__devices, hf_remote_connect_list_all_node_devices_ret__devices___ELEMENT_, "remote_nonnull_node_device", ~0, dissect_xdr_remote_nonnull_node_device)) return FALSE;
    
    hf = hf_remote_connect_list_all_node_devices_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_nwfilters_args__need_results = -1;
static int hf_remote_connect_list_all_nwfilters_args__flags = -1;
static int hf_remote_connect_list_all_nwfilters_args = -1;
static gint ett_remote_connect_list_all_nwfilters_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_nwfilters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_nwfilters_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_nwfilters_args);
    
    hf = hf_remote_connect_list_all_nwfilters_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_nwfilters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_nwfilters_ret__filters = -1;
static int hf_remote_connect_list_all_nwfilters_ret__filters___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_nwfilters_ret__filters = -1;
static int hf_remote_connect_list_all_nwfilters_ret__ret = -1;
static int hf_remote_connect_list_all_nwfilters_ret = -1;
static gint ett_remote_connect_list_all_nwfilters_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_nwfilters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_nwfilters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_nwfilters_ret);
    
    hf = hf_remote_connect_list_all_nwfilters_ret__filters;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_nwfilters_ret__filters, hf_remote_connect_list_all_nwfilters_ret__filters___ELEMENT_, "remote_nonnull_nwfilter", ~0, dissect_xdr_remote_nonnull_nwfilter)) return FALSE;
    
    hf = hf_remote_connect_list_all_nwfilters_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_secrets_args__need_results = -1;
static int hf_remote_connect_list_all_secrets_args__flags = -1;
static int hf_remote_connect_list_all_secrets_args = -1;
static gint ett_remote_connect_list_all_secrets_args = -1;
static gboolean dissect_xdr_remote_connect_list_all_secrets_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_secrets_args");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_secrets_args);
    
    hf = hf_remote_connect_list_all_secrets_args__need_results;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_connect_list_all_secrets_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_connect_list_all_secrets_ret__secrets = -1;
static int hf_remote_connect_list_all_secrets_ret__secrets___ELEMENT_ = -1;
static gint ett_remote_connect_list_all_secrets_ret__secrets = -1;
static int hf_remote_connect_list_all_secrets_ret__ret = -1;
static int hf_remote_connect_list_all_secrets_ret = -1;
static gint ett_remote_connect_list_all_secrets_ret = -1;
static gboolean dissect_xdr_remote_connect_list_all_secrets_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_connect_list_all_secrets_ret");
    tree = proto_item_add_subtree(ti, ett_remote_connect_list_all_secrets_ret);
    
    hf = hf_remote_connect_list_all_secrets_ret__secrets;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_connect_list_all_secrets_ret__secrets, hf_remote_connect_list_all_secrets_ret__secrets___ELEMENT_, "remote_nonnull_secret", ~0, dissect_xdr_remote_nonnull_secret)) return FALSE;
    
    hf = hf_remote_connect_list_all_secrets_ret__ret;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_set_memory_parameters_args__params = -1;
static int hf_remote_node_set_memory_parameters_args__params___ELEMENT_ = -1;
static gint ett_remote_node_set_memory_parameters_args__params = -1;
static int hf_remote_node_set_memory_parameters_args__flags = -1;
static int hf_remote_node_set_memory_parameters_args = -1;
static gint ett_remote_node_set_memory_parameters_args = -1;
static gboolean dissect_xdr_remote_node_set_memory_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_set_memory_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_set_memory_parameters_args);
    
    hf = hf_remote_node_set_memory_parameters_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_set_memory_parameters_args__params, hf_remote_node_set_memory_parameters_args__params___ELEMENT_, "remote_typed_param", REMOTE_NODE_MEMORY_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_node_set_memory_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_memory_parameters_args__nparams = -1;
static int hf_remote_node_get_memory_parameters_args__flags = -1;
static int hf_remote_node_get_memory_parameters_args = -1;
static gint ett_remote_node_get_memory_parameters_args = -1;
static gboolean dissect_xdr_remote_node_get_memory_parameters_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_memory_parameters_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_memory_parameters_args);
    
    hf = hf_remote_node_get_memory_parameters_args__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_memory_parameters_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_memory_parameters_ret__params = -1;
static int hf_remote_node_get_memory_parameters_ret__params___ELEMENT_ = -1;
static gint ett_remote_node_get_memory_parameters_ret__params = -1;
static int hf_remote_node_get_memory_parameters_ret__nparams = -1;
static int hf_remote_node_get_memory_parameters_ret = -1;
static gint ett_remote_node_get_memory_parameters_ret = -1;
static gboolean dissect_xdr_remote_node_get_memory_parameters_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_memory_parameters_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_memory_parameters_ret);
    
    hf = hf_remote_node_get_memory_parameters_ret__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_node_get_memory_parameters_ret__params, hf_remote_node_get_memory_parameters_ret__params___ELEMENT_, "remote_typed_param", REMOTE_NODE_MEMORY_PARAMETERS_MAX, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_node_get_memory_parameters_ret__nparams;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cpu_map_args__need_map = -1;
static int hf_remote_node_get_cpu_map_args__need_online = -1;
static int hf_remote_node_get_cpu_map_args__flags = -1;
static int hf_remote_node_get_cpu_map_args = -1;
static gint ett_remote_node_get_cpu_map_args = -1;
static gboolean dissect_xdr_remote_node_get_cpu_map_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cpu_map_args");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cpu_map_args);
    
    hf = hf_remote_node_get_cpu_map_args__need_map;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cpu_map_args__need_online;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cpu_map_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_node_get_cpu_map_ret__cpumap = -1;
static int hf_remote_node_get_cpu_map_ret__online = -1;
static int hf_remote_node_get_cpu_map_ret__ret = -1;
static int hf_remote_node_get_cpu_map_ret = -1;
static gint ett_remote_node_get_cpu_map_ret = -1;
static gboolean dissect_xdr_remote_node_get_cpu_map_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_node_get_cpu_map_ret");
    tree = proto_item_add_subtree(ti, ett_remote_node_get_cpu_map_ret);
    
    hf = hf_remote_node_get_cpu_map_ret__cpumap;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_CPUMAP_MAX)) return FALSE;
    
    hf = hf_remote_node_get_cpu_map_ret__online;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_node_get_cpu_map_ret__ret;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_fstrim_args__dom = -1;
static int hf_remote_domain_fstrim_args__mountPoint = -1;
static int hf_remote_domain_fstrim_args__minimum = -1;
static int hf_remote_domain_fstrim_args__flags = -1;
static int hf_remote_domain_fstrim_args = -1;
static gint ett_remote_domain_fstrim_args = -1;
static gboolean dissect_xdr_remote_domain_fstrim_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_fstrim_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_fstrim_args);
    
    hf = hf_remote_domain_fstrim_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_fstrim_args__mountPoint;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_fstrim_args__minimum;
    if (!dissect_xdr_u_hyper(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_fstrim_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_begin3_params_args__dom = -1;
static int hf_remote_domain_migrate_begin3_params_args__params = -1;
static int hf_remote_domain_migrate_begin3_params_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_migrate_begin3_params_args__params = -1;
static int hf_remote_domain_migrate_begin3_params_args__flags = -1;
static int hf_remote_domain_migrate_begin3_params_args = -1;
static gint ett_remote_domain_migrate_begin3_params_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_begin3_params_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_begin3_params_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_begin3_params_args);
    
    hf = hf_remote_domain_migrate_begin3_params_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_params_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_migrate_begin3_params_args__params, hf_remote_domain_migrate_begin3_params_args__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_params_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_begin3_params_ret__cookie_out = -1;
static int hf_remote_domain_migrate_begin3_params_ret__xml = -1;
static int hf_remote_domain_migrate_begin3_params_ret = -1;
static gint ett_remote_domain_migrate_begin3_params_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_begin3_params_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_begin3_params_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_begin3_params_ret);
    
    hf = hf_remote_domain_migrate_begin3_params_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_begin3_params_ret__xml;
    if (!dissect_xdr_remote_nonnull_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare3_params_args__params = -1;
static int hf_remote_domain_migrate_prepare3_params_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_migrate_prepare3_params_args__params = -1;
static int hf_remote_domain_migrate_prepare3_params_args__cookie_in = -1;
static int hf_remote_domain_migrate_prepare3_params_args__flags = -1;
static int hf_remote_domain_migrate_prepare3_params_args = -1;
static gint ett_remote_domain_migrate_prepare3_params_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare3_params_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare3_params_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare3_params_args);
    
    hf = hf_remote_domain_migrate_prepare3_params_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_migrate_prepare3_params_args__params, hf_remote_domain_migrate_prepare3_params_args__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_params_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_params_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare3_params_ret__cookie_out = -1;
static int hf_remote_domain_migrate_prepare3_params_ret__uri_out = -1;
static int hf_remote_domain_migrate_prepare3_params_ret = -1;
static gint ett_remote_domain_migrate_prepare3_params_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare3_params_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare3_params_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare3_params_ret);
    
    hf = hf_remote_domain_migrate_prepare3_params_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare3_params_ret__uri_out;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_tunnel3_params_args__params = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_params_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_migrate_prepare_tunnel3_params_args__params = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_params_args__cookie_in = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_params_args__flags = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_params_args = -1;
static gint ett_remote_domain_migrate_prepare_tunnel3_params_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_tunnel3_params_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_tunnel3_params_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_tunnel3_params_args);
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_params_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_migrate_prepare_tunnel3_params_args__params, hf_remote_domain_migrate_prepare_tunnel3_params_args__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_params_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_params_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_prepare_tunnel3_params_ret__cookie_out = -1;
static int hf_remote_domain_migrate_prepare_tunnel3_params_ret = -1;
static gint ett_remote_domain_migrate_prepare_tunnel3_params_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_prepare_tunnel3_params_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_prepare_tunnel3_params_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_prepare_tunnel3_params_ret);
    
    hf = hf_remote_domain_migrate_prepare_tunnel3_params_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_perform3_params_args__dom = -1;
static int hf_remote_domain_migrate_perform3_params_args__dconnuri = -1;
static int hf_remote_domain_migrate_perform3_params_args__params = -1;
static int hf_remote_domain_migrate_perform3_params_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_migrate_perform3_params_args__params = -1;
static int hf_remote_domain_migrate_perform3_params_args__cookie_in = -1;
static int hf_remote_domain_migrate_perform3_params_args__flags = -1;
static int hf_remote_domain_migrate_perform3_params_args = -1;
static gint ett_remote_domain_migrate_perform3_params_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_perform3_params_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_perform3_params_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_perform3_params_args);
    
    hf = hf_remote_domain_migrate_perform3_params_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_params_args__dconnuri;
    if (!dissect_xdr_remote_string(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_params_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_migrate_perform3_params_args__params, hf_remote_domain_migrate_perform3_params_args__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_params_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_perform3_params_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_perform3_params_ret__cookie_out = -1;
static int hf_remote_domain_migrate_perform3_params_ret = -1;
static gint ett_remote_domain_migrate_perform3_params_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_perform3_params_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_perform3_params_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_perform3_params_ret);
    
    hf = hf_remote_domain_migrate_perform3_params_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish3_params_args__params = -1;
static int hf_remote_domain_migrate_finish3_params_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_migrate_finish3_params_args__params = -1;
static int hf_remote_domain_migrate_finish3_params_args__cookie_in = -1;
static int hf_remote_domain_migrate_finish3_params_args__flags = -1;
static int hf_remote_domain_migrate_finish3_params_args__cancelled = -1;
static int hf_remote_domain_migrate_finish3_params_args = -1;
static gint ett_remote_domain_migrate_finish3_params_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish3_params_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish3_params_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish3_params_args);
    
    hf = hf_remote_domain_migrate_finish3_params_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_migrate_finish3_params_args__params, hf_remote_domain_migrate_finish3_params_args__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_params_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_params_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_params_args__cancelled;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_finish3_params_ret__dom = -1;
static int hf_remote_domain_migrate_finish3_params_ret__cookie_out = -1;
static int hf_remote_domain_migrate_finish3_params_ret = -1;
static gint ett_remote_domain_migrate_finish3_params_ret = -1;
static gboolean dissect_xdr_remote_domain_migrate_finish3_params_ret(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_finish3_params_ret");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_finish3_params_ret);
    
    hf = hf_remote_domain_migrate_finish3_params_ret__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_finish3_params_ret__cookie_out;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
static int hf_remote_domain_migrate_confirm3_params_args__dom = -1;
static int hf_remote_domain_migrate_confirm3_params_args__params = -1;
static int hf_remote_domain_migrate_confirm3_params_args__params___ELEMENT_ = -1;
static gint ett_remote_domain_migrate_confirm3_params_args__params = -1;
static int hf_remote_domain_migrate_confirm3_params_args__cookie_in = -1;
static int hf_remote_domain_migrate_confirm3_params_args__flags = -1;
static int hf_remote_domain_migrate_confirm3_params_args__cancelled = -1;
static int hf_remote_domain_migrate_confirm3_params_args = -1;
static gint ett_remote_domain_migrate_confirm3_params_args = -1;
static gboolean dissect_xdr_remote_domain_migrate_confirm3_params_args(tvbuff_t *tvb, proto_tree *tree, XDR *xdrs, int hf)
{
    goffset start;
    proto_item *ti;
    
    start = VIR_HEADER_LEN + xdr_getpos(xdrs);
    ti = proto_tree_add_item(tree, hf, tvb, start, -1, ENC_NA);
    proto_item_append_text(ti, " :: remote_domain_migrate_confirm3_params_args");
    tree = proto_item_add_subtree(ti, ett_remote_domain_migrate_confirm3_params_args);
    
    hf = hf_remote_domain_migrate_confirm3_params_args__dom;
    if (!dissect_xdr_remote_nonnull_domain(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_params_args__params;
    if (!dissect_xdr_array(tvb, tree, xdrs, hf, ett_remote_domain_migrate_confirm3_params_args__params, hf_remote_domain_migrate_confirm3_params_args__params___ELEMENT_, "remote_typed_param", ~0, dissect_xdr_remote_typed_param)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_params_args__cookie_in;
    if (!dissect_xdr_bytes(tvb, tree, xdrs, hf, REMOTE_MIGRATE_COOKIE_MAX)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_params_args__flags;
    if (!dissect_xdr_u_int(tvb, tree, xdrs, hf)) return FALSE;
    
    hf = hf_remote_domain_migrate_confirm3_params_args__cancelled;
    if (!dissect_xdr_int(tvb, tree, xdrs, hf)) return FALSE;
    proto_item_set_len(ti, xdr_getpos(xdrs) - start + VIR_HEADER_LEN);
    return TRUE;
}
#define REMOTE_PROGRAM (0x20008086)
#define REMOTE_PROTOCOL_VERSION (1)
static const vir_dissector_index_t remote_dissectors[] = {
    { 1, dissect_xdr_remote_connect_open_args, NULL, NULL },
    { 2, NULL, NULL, NULL },
    { 3, NULL, dissect_xdr_remote_connect_get_type_ret, NULL },
    { 4, NULL, dissect_xdr_remote_connect_get_version_ret, NULL },
    { 5, dissect_xdr_remote_connect_get_max_vcpus_args, dissect_xdr_remote_connect_get_max_vcpus_ret, NULL },
    { 6, NULL, dissect_xdr_remote_node_get_info_ret, NULL },
    { 7, NULL, dissect_xdr_remote_connect_get_capabilities_ret, NULL },
    { 8, dissect_xdr_remote_domain_attach_device_args, NULL, NULL },
    { 9, dissect_xdr_remote_domain_create_args, NULL, NULL },
    { 10, dissect_xdr_remote_domain_create_xml_args, dissect_xdr_remote_domain_create_xml_ret, NULL },
    { 11, dissect_xdr_remote_domain_define_xml_args, dissect_xdr_remote_domain_define_xml_ret, NULL },
    { 12, dissect_xdr_remote_domain_destroy_args, NULL, NULL },
    { 13, dissect_xdr_remote_domain_detach_device_args, NULL, NULL },
    { 14, dissect_xdr_remote_domain_get_xml_desc_args, dissect_xdr_remote_domain_get_xml_desc_ret, NULL },
    { 15, dissect_xdr_remote_domain_get_autostart_args, dissect_xdr_remote_domain_get_autostart_ret, NULL },
    { 16, dissect_xdr_remote_domain_get_info_args, dissect_xdr_remote_domain_get_info_ret, NULL },
    { 17, dissect_xdr_remote_domain_get_max_memory_args, dissect_xdr_remote_domain_get_max_memory_ret, NULL },
    { 18, dissect_xdr_remote_domain_get_max_vcpus_args, dissect_xdr_remote_domain_get_max_vcpus_ret, NULL },
    { 19, dissect_xdr_remote_domain_get_os_type_args, dissect_xdr_remote_domain_get_os_type_ret, NULL },
    { 20, dissect_xdr_remote_domain_get_vcpus_args, dissect_xdr_remote_domain_get_vcpus_ret, NULL },
    { 21, dissect_xdr_remote_connect_list_defined_domains_args, dissect_xdr_remote_connect_list_defined_domains_ret, NULL },
    { 22, dissect_xdr_remote_domain_lookup_by_id_args, dissect_xdr_remote_domain_lookup_by_id_ret, NULL },
    { 23, dissect_xdr_remote_domain_lookup_by_name_args, dissect_xdr_remote_domain_lookup_by_name_ret, NULL },
    { 24, dissect_xdr_remote_domain_lookup_by_uuid_args, dissect_xdr_remote_domain_lookup_by_uuid_ret, NULL },
    { 25, NULL, dissect_xdr_remote_connect_num_of_defined_domains_ret, NULL },
    { 26, dissect_xdr_remote_domain_pin_vcpu_args, NULL, NULL },
    { 27, dissect_xdr_remote_domain_reboot_args, NULL, NULL },
    { 28, dissect_xdr_remote_domain_resume_args, NULL, NULL },
    { 29, dissect_xdr_remote_domain_set_autostart_args, NULL, NULL },
    { 30, dissect_xdr_remote_domain_set_max_memory_args, NULL, NULL },
    { 31, dissect_xdr_remote_domain_set_memory_args, NULL, NULL },
    { 32, dissect_xdr_remote_domain_set_vcpus_args, NULL, NULL },
    { 33, dissect_xdr_remote_domain_shutdown_args, NULL, NULL },
    { 34, dissect_xdr_remote_domain_suspend_args, NULL, NULL },
    { 35, dissect_xdr_remote_domain_undefine_args, NULL, NULL },
    { 36, dissect_xdr_remote_connect_list_defined_networks_args, dissect_xdr_remote_connect_list_defined_networks_ret, NULL },
    { 37, dissect_xdr_remote_connect_list_domains_args, dissect_xdr_remote_connect_list_domains_ret, NULL },
    { 38, dissect_xdr_remote_connect_list_networks_args, dissect_xdr_remote_connect_list_networks_ret, NULL },
    { 39, dissect_xdr_remote_network_create_args, NULL, NULL },
    { 40, dissect_xdr_remote_network_create_xml_args, dissect_xdr_remote_network_create_xml_ret, NULL },
    { 41, dissect_xdr_remote_network_define_xml_args, dissect_xdr_remote_network_define_xml_ret, NULL },
    { 42, dissect_xdr_remote_network_destroy_args, NULL, NULL },
    { 43, dissect_xdr_remote_network_get_xml_desc_args, dissect_xdr_remote_network_get_xml_desc_ret, NULL },
    { 44, dissect_xdr_remote_network_get_autostart_args, dissect_xdr_remote_network_get_autostart_ret, NULL },
    { 45, dissect_xdr_remote_network_get_bridge_name_args, dissect_xdr_remote_network_get_bridge_name_ret, NULL },
    { 46, dissect_xdr_remote_network_lookup_by_name_args, dissect_xdr_remote_network_lookup_by_name_ret, NULL },
    { 47, dissect_xdr_remote_network_lookup_by_uuid_args, dissect_xdr_remote_network_lookup_by_uuid_ret, NULL },
    { 48, dissect_xdr_remote_network_set_autostart_args, NULL, NULL },
    { 49, dissect_xdr_remote_network_undefine_args, NULL, NULL },
    { 50, NULL, dissect_xdr_remote_connect_num_of_defined_networks_ret, NULL },
    { 51, NULL, dissect_xdr_remote_connect_num_of_domains_ret, NULL },
    { 52, NULL, dissect_xdr_remote_connect_num_of_networks_ret, NULL },
    { 53, dissect_xdr_remote_domain_core_dump_args, NULL, NULL },
    { 54, dissect_xdr_remote_domain_restore_args, NULL, NULL },
    { 55, dissect_xdr_remote_domain_save_args, NULL, NULL },
    { 56, dissect_xdr_remote_domain_get_scheduler_type_args, dissect_xdr_remote_domain_get_scheduler_type_ret, NULL },
    { 57, dissect_xdr_remote_domain_get_scheduler_parameters_args, dissect_xdr_remote_domain_get_scheduler_parameters_ret, NULL },
    { 58, dissect_xdr_remote_domain_set_scheduler_parameters_args, NULL, NULL },
    { 59, NULL, dissect_xdr_remote_connect_get_hostname_ret, NULL },
    { 60, dissect_xdr_remote_connect_supports_feature_args, dissect_xdr_remote_connect_supports_feature_ret, NULL },
    { 61, dissect_xdr_remote_domain_migrate_prepare_args, dissect_xdr_remote_domain_migrate_prepare_ret, NULL },
    { 62, dissect_xdr_remote_domain_migrate_perform_args, NULL, NULL },
    { 63, dissect_xdr_remote_domain_migrate_finish_args, dissect_xdr_remote_domain_migrate_finish_ret, NULL },
    { 64, dissect_xdr_remote_domain_block_stats_args, dissect_xdr_remote_domain_block_stats_ret, NULL },
    { 65, dissect_xdr_remote_domain_interface_stats_args, dissect_xdr_remote_domain_interface_stats_ret, NULL },
    { 66, NULL, dissect_xdr_remote_auth_list_ret, NULL },
    { 67, NULL, dissect_xdr_remote_auth_sasl_init_ret, NULL },
    { 68, dissect_xdr_remote_auth_sasl_start_args, dissect_xdr_remote_auth_sasl_start_ret, NULL },
    { 69, dissect_xdr_remote_auth_sasl_step_args, dissect_xdr_remote_auth_sasl_step_ret, NULL },
    { 70, NULL, dissect_xdr_remote_auth_polkit_ret, NULL },
    { 71, NULL, dissect_xdr_remote_connect_num_of_storage_pools_ret, NULL },
    { 72, dissect_xdr_remote_connect_list_storage_pools_args, dissect_xdr_remote_connect_list_storage_pools_ret, NULL },
    { 73, NULL, dissect_xdr_remote_connect_num_of_defined_storage_pools_ret, NULL },
    { 74, dissect_xdr_remote_connect_list_defined_storage_pools_args, dissect_xdr_remote_connect_list_defined_storage_pools_ret, NULL },
    { 75, dissect_xdr_remote_connect_find_storage_pool_sources_args, dissect_xdr_remote_connect_find_storage_pool_sources_ret, NULL },
    { 76, dissect_xdr_remote_storage_pool_create_xml_args, dissect_xdr_remote_storage_pool_create_xml_ret, NULL },
    { 77, dissect_xdr_remote_storage_pool_define_xml_args, dissect_xdr_remote_storage_pool_define_xml_ret, NULL },
    { 78, dissect_xdr_remote_storage_pool_create_args, NULL, NULL },
    { 79, dissect_xdr_remote_storage_pool_build_args, NULL, NULL },
    { 80, dissect_xdr_remote_storage_pool_destroy_args, NULL, NULL },
    { 81, dissect_xdr_remote_storage_pool_delete_args, NULL, NULL },
    { 82, dissect_xdr_remote_storage_pool_undefine_args, NULL, NULL },
    { 83, dissect_xdr_remote_storage_pool_refresh_args, NULL, NULL },
    { 84, dissect_xdr_remote_storage_pool_lookup_by_name_args, dissect_xdr_remote_storage_pool_lookup_by_name_ret, NULL },
    { 85, dissect_xdr_remote_storage_pool_lookup_by_uuid_args, dissect_xdr_remote_storage_pool_lookup_by_uuid_ret, NULL },
    { 86, dissect_xdr_remote_storage_pool_lookup_by_volume_args, dissect_xdr_remote_storage_pool_lookup_by_volume_ret, NULL },
    { 87, dissect_xdr_remote_storage_pool_get_info_args, dissect_xdr_remote_storage_pool_get_info_ret, NULL },
    { 88, dissect_xdr_remote_storage_pool_get_xml_desc_args, dissect_xdr_remote_storage_pool_get_xml_desc_ret, NULL },
    { 89, dissect_xdr_remote_storage_pool_get_autostart_args, dissect_xdr_remote_storage_pool_get_autostart_ret, NULL },
    { 90, dissect_xdr_remote_storage_pool_set_autostart_args, NULL, NULL },
    { 91, dissect_xdr_remote_storage_pool_num_of_volumes_args, dissect_xdr_remote_storage_pool_num_of_volumes_ret, NULL },
    { 92, dissect_xdr_remote_storage_pool_list_volumes_args, dissect_xdr_remote_storage_pool_list_volumes_ret, NULL },
    { 93, dissect_xdr_remote_storage_vol_create_xml_args, dissect_xdr_remote_storage_vol_create_xml_ret, NULL },
    { 94, dissect_xdr_remote_storage_vol_delete_args, NULL, NULL },
    { 95, dissect_xdr_remote_storage_vol_lookup_by_name_args, dissect_xdr_remote_storage_vol_lookup_by_name_ret, NULL },
    { 96, dissect_xdr_remote_storage_vol_lookup_by_key_args, dissect_xdr_remote_storage_vol_lookup_by_key_ret, NULL },
    { 97, dissect_xdr_remote_storage_vol_lookup_by_path_args, dissect_xdr_remote_storage_vol_lookup_by_path_ret, NULL },
    { 98, dissect_xdr_remote_storage_vol_get_info_args, dissect_xdr_remote_storage_vol_get_info_ret, NULL },
    { 99, dissect_xdr_remote_storage_vol_get_xml_desc_args, dissect_xdr_remote_storage_vol_get_xml_desc_ret, NULL },
    { 100, dissect_xdr_remote_storage_vol_get_path_args, dissect_xdr_remote_storage_vol_get_path_ret, NULL },
    { 101, dissect_xdr_remote_node_get_cells_free_memory_args, dissect_xdr_remote_node_get_cells_free_memory_ret, NULL },
    { 102, NULL, dissect_xdr_remote_node_get_free_memory_ret, NULL },
    { 103, dissect_xdr_remote_domain_block_peek_args, dissect_xdr_remote_domain_block_peek_ret, NULL },
    { 104, dissect_xdr_remote_domain_memory_peek_args, dissect_xdr_remote_domain_memory_peek_ret, NULL },
    { 105, NULL, dissect_xdr_remote_connect_domain_event_register_ret, NULL },
    { 106, NULL, dissect_xdr_remote_connect_domain_event_deregister_ret, NULL },
    { 107, NULL, NULL, dissect_xdr_remote_domain_event_lifecycle_msg },
    { 108, dissect_xdr_remote_domain_migrate_prepare2_args, dissect_xdr_remote_domain_migrate_prepare2_ret, NULL },
    { 109, dissect_xdr_remote_domain_migrate_finish2_args, dissect_xdr_remote_domain_migrate_finish2_ret, NULL },
    { 110, NULL, dissect_xdr_remote_connect_get_uri_ret, NULL },
    { 111, dissect_xdr_remote_node_num_of_devices_args, dissect_xdr_remote_node_num_of_devices_ret, NULL },
    { 112, dissect_xdr_remote_node_list_devices_args, dissect_xdr_remote_node_list_devices_ret, NULL },
    { 113, dissect_xdr_remote_node_device_lookup_by_name_args, dissect_xdr_remote_node_device_lookup_by_name_ret, NULL },
    { 114, dissect_xdr_remote_node_device_get_xml_desc_args, dissect_xdr_remote_node_device_get_xml_desc_ret, NULL },
    { 115, dissect_xdr_remote_node_device_get_parent_args, dissect_xdr_remote_node_device_get_parent_ret, NULL },
    { 116, dissect_xdr_remote_node_device_num_of_caps_args, dissect_xdr_remote_node_device_num_of_caps_ret, NULL },
    { 117, dissect_xdr_remote_node_device_list_caps_args, dissect_xdr_remote_node_device_list_caps_ret, NULL },
    { 118, dissect_xdr_remote_node_device_dettach_args, NULL, NULL },
    { 119, dissect_xdr_remote_node_device_re_attach_args, NULL, NULL },
    { 120, dissect_xdr_remote_node_device_reset_args, NULL, NULL },
    { 121, dissect_xdr_remote_domain_get_security_label_args, dissect_xdr_remote_domain_get_security_label_ret, NULL },
    { 122, NULL, dissect_xdr_remote_node_get_security_model_ret, NULL },
    { 123, dissect_xdr_remote_node_device_create_xml_args, dissect_xdr_remote_node_device_create_xml_ret, NULL },
    { 124, dissect_xdr_remote_node_device_destroy_args, NULL, NULL },
    { 125, dissect_xdr_remote_storage_vol_create_xml_from_args, dissect_xdr_remote_storage_vol_create_xml_from_ret, NULL },
    { 126, NULL, dissect_xdr_remote_connect_num_of_interfaces_ret, NULL },
    { 127, dissect_xdr_remote_connect_list_interfaces_args, dissect_xdr_remote_connect_list_interfaces_ret, NULL },
    { 128, dissect_xdr_remote_interface_lookup_by_name_args, dissect_xdr_remote_interface_lookup_by_name_ret, NULL },
    { 129, dissect_xdr_remote_interface_lookup_by_mac_string_args, dissect_xdr_remote_interface_lookup_by_mac_string_ret, NULL },
    { 130, dissect_xdr_remote_interface_get_xml_desc_args, dissect_xdr_remote_interface_get_xml_desc_ret, NULL },
    { 131, dissect_xdr_remote_interface_define_xml_args, dissect_xdr_remote_interface_define_xml_ret, NULL },
    { 132, dissect_xdr_remote_interface_undefine_args, NULL, NULL },
    { 133, dissect_xdr_remote_interface_create_args, NULL, NULL },
    { 134, dissect_xdr_remote_interface_destroy_args, NULL, NULL },
    { 135, dissect_xdr_remote_connect_domain_xml_from_native_args, dissect_xdr_remote_connect_domain_xml_from_native_ret, NULL },
    { 136, dissect_xdr_remote_connect_domain_xml_to_native_args, dissect_xdr_remote_connect_domain_xml_to_native_ret, NULL },
    { 137, NULL, dissect_xdr_remote_connect_num_of_defined_interfaces_ret, NULL },
    { 138, dissect_xdr_remote_connect_list_defined_interfaces_args, dissect_xdr_remote_connect_list_defined_interfaces_ret, NULL },
    { 139, NULL, dissect_xdr_remote_connect_num_of_secrets_ret, NULL },
    { 140, dissect_xdr_remote_connect_list_secrets_args, dissect_xdr_remote_connect_list_secrets_ret, NULL },
    { 141, dissect_xdr_remote_secret_lookup_by_uuid_args, dissect_xdr_remote_secret_lookup_by_uuid_ret, NULL },
    { 142, dissect_xdr_remote_secret_define_xml_args, dissect_xdr_remote_secret_define_xml_ret, NULL },
    { 143, dissect_xdr_remote_secret_get_xml_desc_args, dissect_xdr_remote_secret_get_xml_desc_ret, NULL },
    { 144, dissect_xdr_remote_secret_set_value_args, NULL, NULL },
    { 145, dissect_xdr_remote_secret_get_value_args, dissect_xdr_remote_secret_get_value_ret, NULL },
    { 146, dissect_xdr_remote_secret_undefine_args, NULL, NULL },
    { 147, dissect_xdr_remote_secret_lookup_by_usage_args, dissect_xdr_remote_secret_lookup_by_usage_ret, NULL },
    { 148, dissect_xdr_remote_domain_migrate_prepare_tunnel_args, NULL, NULL },
    { 149, NULL, dissect_xdr_remote_connect_is_secure_ret, NULL },
    { 150, dissect_xdr_remote_domain_is_active_args, dissect_xdr_remote_domain_is_active_ret, NULL },
    { 151, dissect_xdr_remote_domain_is_persistent_args, dissect_xdr_remote_domain_is_persistent_ret, NULL },
    { 152, dissect_xdr_remote_network_is_active_args, dissect_xdr_remote_network_is_active_ret, NULL },
    { 153, dissect_xdr_remote_network_is_persistent_args, dissect_xdr_remote_network_is_persistent_ret, NULL },
    { 154, dissect_xdr_remote_storage_pool_is_active_args, dissect_xdr_remote_storage_pool_is_active_ret, NULL },
    { 155, dissect_xdr_remote_storage_pool_is_persistent_args, dissect_xdr_remote_storage_pool_is_persistent_ret, NULL },
    { 156, dissect_xdr_remote_interface_is_active_args, dissect_xdr_remote_interface_is_active_ret, NULL },
    { 157, NULL, dissect_xdr_remote_connect_get_lib_version_ret, NULL },
    { 158, dissect_xdr_remote_connect_compare_cpu_args, dissect_xdr_remote_connect_compare_cpu_ret, NULL },
    { 159, dissect_xdr_remote_domain_memory_stats_args, dissect_xdr_remote_domain_memory_stats_ret, NULL },
    { 160, dissect_xdr_remote_domain_attach_device_flags_args, NULL, NULL },
    { 161, dissect_xdr_remote_domain_detach_device_flags_args, NULL, NULL },
    { 162, dissect_xdr_remote_connect_baseline_cpu_args, dissect_xdr_remote_connect_baseline_cpu_ret, NULL },
    { 163, dissect_xdr_remote_domain_get_job_info_args, dissect_xdr_remote_domain_get_job_info_ret, NULL },
    { 164, dissect_xdr_remote_domain_abort_job_args, NULL, NULL },
    { 165, dissect_xdr_remote_storage_vol_wipe_args, NULL, NULL },
    { 166, dissect_xdr_remote_domain_migrate_set_max_downtime_args, NULL, NULL },
    { 167, dissect_xdr_remote_connect_domain_event_register_any_args, NULL, NULL },
    { 168, dissect_xdr_remote_connect_domain_event_deregister_any_args, NULL, NULL },
    { 169, NULL, NULL, dissect_xdr_remote_domain_event_reboot_msg },
    { 170, NULL, NULL, dissect_xdr_remote_domain_event_rtc_change_msg },
    { 171, NULL, NULL, dissect_xdr_remote_domain_event_watchdog_msg },
    { 172, NULL, NULL, dissect_xdr_remote_domain_event_io_error_msg },
    { 173, NULL, NULL, dissect_xdr_remote_domain_event_graphics_msg },
    { 174, dissect_xdr_remote_domain_update_device_flags_args, NULL, NULL },
    { 175, dissect_xdr_remote_nwfilter_lookup_by_name_args, dissect_xdr_remote_nwfilter_lookup_by_name_ret, NULL },
    { 176, dissect_xdr_remote_nwfilter_lookup_by_uuid_args, dissect_xdr_remote_nwfilter_lookup_by_uuid_ret, NULL },
    { 177, dissect_xdr_remote_nwfilter_get_xml_desc_args, dissect_xdr_remote_nwfilter_get_xml_desc_ret, NULL },
    { 178, NULL, dissect_xdr_remote_connect_num_of_nwfilters_ret, NULL },
    { 179, dissect_xdr_remote_connect_list_nwfilters_args, dissect_xdr_remote_connect_list_nwfilters_ret, NULL },
    { 180, dissect_xdr_remote_nwfilter_define_xml_args, dissect_xdr_remote_nwfilter_define_xml_ret, NULL },
    { 181, dissect_xdr_remote_nwfilter_undefine_args, NULL, NULL },
    { 182, dissect_xdr_remote_domain_managed_save_args, NULL, NULL },
    { 183, dissect_xdr_remote_domain_has_managed_save_image_args, dissect_xdr_remote_domain_has_managed_save_image_ret, NULL },
    { 184, dissect_xdr_remote_domain_managed_save_remove_args, NULL, NULL },
    { 185, dissect_xdr_remote_domain_snapshot_create_xml_args, dissect_xdr_remote_domain_snapshot_create_xml_ret, NULL },
    { 186, dissect_xdr_remote_domain_snapshot_get_xml_desc_args, dissect_xdr_remote_domain_snapshot_get_xml_desc_ret, NULL },
    { 187, dissect_xdr_remote_domain_snapshot_num_args, dissect_xdr_remote_domain_snapshot_num_ret, NULL },
    { 188, dissect_xdr_remote_domain_snapshot_list_names_args, dissect_xdr_remote_domain_snapshot_list_names_ret, NULL },
    { 189, dissect_xdr_remote_domain_snapshot_lookup_by_name_args, dissect_xdr_remote_domain_snapshot_lookup_by_name_ret, NULL },
    { 190, dissect_xdr_remote_domain_has_current_snapshot_args, dissect_xdr_remote_domain_has_current_snapshot_ret, NULL },
    { 191, dissect_xdr_remote_domain_snapshot_current_args, dissect_xdr_remote_domain_snapshot_current_ret, NULL },
    { 192, dissect_xdr_remote_domain_revert_to_snapshot_args, NULL, NULL },
    { 193, dissect_xdr_remote_domain_snapshot_delete_args, NULL, NULL },
    { 194, dissect_xdr_remote_domain_get_block_info_args, dissect_xdr_remote_domain_get_block_info_ret, NULL },
    { 195, NULL, NULL, dissect_xdr_remote_domain_event_io_error_reason_msg },
    { 196, dissect_xdr_remote_domain_create_with_flags_args, dissect_xdr_remote_domain_create_with_flags_ret, NULL },
    { 197, dissect_xdr_remote_domain_set_memory_parameters_args, NULL, NULL },
    { 198, dissect_xdr_remote_domain_get_memory_parameters_args, dissect_xdr_remote_domain_get_memory_parameters_ret, NULL },
    { 199, dissect_xdr_remote_domain_set_vcpus_flags_args, NULL, NULL },
    { 200, dissect_xdr_remote_domain_get_vcpus_flags_args, dissect_xdr_remote_domain_get_vcpus_flags_ret, NULL },
    { 201, dissect_xdr_remote_domain_open_console_args, NULL, NULL },
    { 202, dissect_xdr_remote_domain_is_updated_args, dissect_xdr_remote_domain_is_updated_ret, NULL },
    { 203, dissect_xdr_remote_connect_get_sysinfo_args, dissect_xdr_remote_connect_get_sysinfo_ret, NULL },
    { 204, dissect_xdr_remote_domain_set_memory_flags_args, NULL, NULL },
    { 205, dissect_xdr_remote_domain_set_blkio_parameters_args, NULL, NULL },
    { 206, dissect_xdr_remote_domain_get_blkio_parameters_args, dissect_xdr_remote_domain_get_blkio_parameters_ret, NULL },
    { 207, dissect_xdr_remote_domain_migrate_set_max_speed_args, NULL, NULL },
    { 208, dissect_xdr_remote_storage_vol_upload_args, NULL, NULL },
    { 209, dissect_xdr_remote_storage_vol_download_args, NULL, NULL },
    { 210, dissect_xdr_remote_domain_inject_nmi_args, NULL, NULL },
    { 211, dissect_xdr_remote_domain_screenshot_args, dissect_xdr_remote_domain_screenshot_ret, NULL },
    { 212, dissect_xdr_remote_domain_get_state_args, dissect_xdr_remote_domain_get_state_ret, NULL },
    { 213, dissect_xdr_remote_domain_migrate_begin3_args, dissect_xdr_remote_domain_migrate_begin3_ret, NULL },
    { 214, dissect_xdr_remote_domain_migrate_prepare3_args, dissect_xdr_remote_domain_migrate_prepare3_ret, NULL },
    { 215, dissect_xdr_remote_domain_migrate_prepare_tunnel3_args, dissect_xdr_remote_domain_migrate_prepare_tunnel3_ret, NULL },
    { 216, dissect_xdr_remote_domain_migrate_perform3_args, dissect_xdr_remote_domain_migrate_perform3_ret, NULL },
    { 217, dissect_xdr_remote_domain_migrate_finish3_args, dissect_xdr_remote_domain_migrate_finish3_ret, NULL },
    { 218, dissect_xdr_remote_domain_migrate_confirm3_args, NULL, NULL },
    { 219, dissect_xdr_remote_domain_set_scheduler_parameters_flags_args, NULL, NULL },
    { 220, dissect_xdr_remote_interface_change_begin_args, NULL, NULL },
    { 221, dissect_xdr_remote_interface_change_commit_args, NULL, NULL },
    { 222, dissect_xdr_remote_interface_change_rollback_args, NULL, NULL },
    { 223, dissect_xdr_remote_domain_get_scheduler_parameters_flags_args, dissect_xdr_remote_domain_get_scheduler_parameters_flags_ret, NULL },
    { 224, NULL, NULL, dissect_xdr_remote_domain_event_control_error_msg },
    { 225, dissect_xdr_remote_domain_pin_vcpu_flags_args, NULL, NULL },
    { 226, dissect_xdr_remote_domain_send_key_args, NULL, NULL },
    { 227, dissect_xdr_remote_node_get_cpu_stats_args, dissect_xdr_remote_node_get_cpu_stats_ret, NULL },
    { 228, dissect_xdr_remote_node_get_memory_stats_args, dissect_xdr_remote_node_get_memory_stats_ret, NULL },
    { 229, dissect_xdr_remote_domain_get_control_info_args, dissect_xdr_remote_domain_get_control_info_ret, NULL },
    { 230, dissect_xdr_remote_domain_get_vcpu_pin_info_args, dissect_xdr_remote_domain_get_vcpu_pin_info_ret, NULL },
    { 231, dissect_xdr_remote_domain_undefine_flags_args, NULL, NULL },
    { 232, dissect_xdr_remote_domain_save_flags_args, NULL, NULL },
    { 233, dissect_xdr_remote_domain_restore_flags_args, NULL, NULL },
    { 234, dissect_xdr_remote_domain_destroy_flags_args, NULL, NULL },
    { 235, dissect_xdr_remote_domain_save_image_get_xml_desc_args, dissect_xdr_remote_domain_save_image_get_xml_desc_ret, NULL },
    { 236, dissect_xdr_remote_domain_save_image_define_xml_args, NULL, NULL },
    { 237, dissect_xdr_remote_domain_block_job_abort_args, NULL, NULL },
    { 238, dissect_xdr_remote_domain_get_block_job_info_args, dissect_xdr_remote_domain_get_block_job_info_ret, NULL },
    { 239, dissect_xdr_remote_domain_block_job_set_speed_args, NULL, NULL },
    { 240, dissect_xdr_remote_domain_block_pull_args, NULL, NULL },
    { 241, NULL, NULL, dissect_xdr_remote_domain_event_block_job_msg },
    { 242, dissect_xdr_remote_domain_migrate_get_max_speed_args, dissect_xdr_remote_domain_migrate_get_max_speed_ret, NULL },
    { 243, dissect_xdr_remote_domain_block_stats_flags_args, dissect_xdr_remote_domain_block_stats_flags_ret, NULL },
    { 244, dissect_xdr_remote_domain_snapshot_get_parent_args, dissect_xdr_remote_domain_snapshot_get_parent_ret, NULL },
    { 245, dissect_xdr_remote_domain_reset_args, NULL, NULL },
    { 246, dissect_xdr_remote_domain_snapshot_num_children_args, dissect_xdr_remote_domain_snapshot_num_children_ret, NULL },
    { 247, dissect_xdr_remote_domain_snapshot_list_children_names_args, dissect_xdr_remote_domain_snapshot_list_children_names_ret, NULL },
    { 248, NULL, NULL, dissect_xdr_remote_domain_event_disk_change_msg },
    { 249, dissect_xdr_remote_domain_open_graphics_args, NULL, NULL },
    { 250, dissect_xdr_remote_node_suspend_for_duration_args, NULL, NULL },
    { 251, dissect_xdr_remote_domain_block_resize_args, NULL, NULL },
    { 252, dissect_xdr_remote_domain_set_block_io_tune_args, NULL, NULL },
    { 253, dissect_xdr_remote_domain_get_block_io_tune_args, dissect_xdr_remote_domain_get_block_io_tune_ret, NULL },
    { 254, dissect_xdr_remote_domain_set_numa_parameters_args, NULL, NULL },
    { 255, dissect_xdr_remote_domain_get_numa_parameters_args, dissect_xdr_remote_domain_get_numa_parameters_ret, NULL },
    { 256, dissect_xdr_remote_domain_set_interface_parameters_args, NULL, NULL },
    { 257, dissect_xdr_remote_domain_get_interface_parameters_args, dissect_xdr_remote_domain_get_interface_parameters_ret, NULL },
    { 258, dissect_xdr_remote_domain_shutdown_flags_args, NULL, NULL },
    { 259, dissect_xdr_remote_storage_vol_wipe_pattern_args, NULL, NULL },
    { 260, dissect_xdr_remote_storage_vol_resize_args, NULL, NULL },
    { 261, dissect_xdr_remote_domain_pm_suspend_for_duration_args, NULL, NULL },
    { 262, dissect_xdr_remote_domain_get_cpu_stats_args, dissect_xdr_remote_domain_get_cpu_stats_ret, NULL },
    { 263, dissect_xdr_remote_domain_get_disk_errors_args, dissect_xdr_remote_domain_get_disk_errors_ret, NULL },
    { 264, dissect_xdr_remote_domain_set_metadata_args, NULL, NULL },
    { 265, dissect_xdr_remote_domain_get_metadata_args, dissect_xdr_remote_domain_get_metadata_ret, NULL },
    { 266, dissect_xdr_remote_domain_block_rebase_args, NULL, NULL },
    { 267, dissect_xdr_remote_domain_pm_wakeup_args, NULL, NULL },
    { 268, NULL, NULL, dissect_xdr_remote_domain_event_tray_change_msg },
    { 269, NULL, NULL, dissect_xdr_remote_domain_event_pmwakeup_msg },
    { 270, NULL, NULL, dissect_xdr_remote_domain_event_pmsuspend_msg },
    { 271, dissect_xdr_remote_domain_snapshot_is_current_args, dissect_xdr_remote_domain_snapshot_is_current_ret, NULL },
    { 272, dissect_xdr_remote_domain_snapshot_has_metadata_args, dissect_xdr_remote_domain_snapshot_has_metadata_ret, NULL },
    { 273, dissect_xdr_remote_connect_list_all_domains_args, dissect_xdr_remote_connect_list_all_domains_ret, NULL },
    { 274, dissect_xdr_remote_domain_list_all_snapshots_args, dissect_xdr_remote_domain_list_all_snapshots_ret, NULL },
    { 275, dissect_xdr_remote_domain_snapshot_list_all_children_args, dissect_xdr_remote_domain_snapshot_list_all_children_ret, NULL },
    { 276, NULL, NULL, dissect_xdr_remote_domain_event_balloon_change_msg },
    { 277, dissect_xdr_remote_domain_get_hostname_args, dissect_xdr_remote_domain_get_hostname_ret, NULL },
    { 278, dissect_xdr_remote_domain_get_security_label_list_args, dissect_xdr_remote_domain_get_security_label_list_ret, NULL },
    { 279, dissect_xdr_remote_domain_pin_emulator_args, NULL, NULL },
    { 280, dissect_xdr_remote_domain_get_emulator_pin_info_args, dissect_xdr_remote_domain_get_emulator_pin_info_ret, NULL },
    { 281, dissect_xdr_remote_connect_list_all_storage_pools_args, dissect_xdr_remote_connect_list_all_storage_pools_ret, NULL },
    { 282, dissect_xdr_remote_storage_pool_list_all_volumes_args, dissect_xdr_remote_storage_pool_list_all_volumes_ret, NULL },
    { 283, dissect_xdr_remote_connect_list_all_networks_args, dissect_xdr_remote_connect_list_all_networks_ret, NULL },
    { 284, dissect_xdr_remote_connect_list_all_interfaces_args, dissect_xdr_remote_connect_list_all_interfaces_ret, NULL },
    { 285, dissect_xdr_remote_connect_list_all_node_devices_args, dissect_xdr_remote_connect_list_all_node_devices_ret, NULL },
    { 286, dissect_xdr_remote_connect_list_all_nwfilters_args, dissect_xdr_remote_connect_list_all_nwfilters_ret, NULL },
    { 287, dissect_xdr_remote_connect_list_all_secrets_args, dissect_xdr_remote_connect_list_all_secrets_ret, NULL },
    { 288, dissect_xdr_remote_node_set_memory_parameters_args, NULL, NULL },
    { 289, dissect_xdr_remote_node_get_memory_parameters_args, dissect_xdr_remote_node_get_memory_parameters_ret, NULL },
    { 290, dissect_xdr_remote_domain_block_commit_args, NULL, NULL },
    { 291, dissect_xdr_remote_network_update_args, NULL, NULL },
    { 292, NULL, NULL, dissect_xdr_remote_domain_event_pmsuspend_disk_msg },
    { 293, dissect_xdr_remote_node_get_cpu_map_args, dissect_xdr_remote_node_get_cpu_map_ret, NULL },
    { 294, dissect_xdr_remote_domain_fstrim_args, NULL, NULL },
    { 295, dissect_xdr_remote_domain_send_process_signal_args, NULL, NULL },
    { 296, dissect_xdr_remote_domain_open_channel_args, NULL, NULL },
    { 297, dissect_xdr_remote_node_device_lookup_scsi_host_by_wwn_args, dissect_xdr_remote_node_device_lookup_scsi_host_by_wwn_ret, NULL },
    { 298, dissect_xdr_remote_domain_get_job_stats_args, dissect_xdr_remote_domain_get_job_stats_ret, NULL },
    { 299, dissect_xdr_remote_domain_migrate_get_compression_cache_args, dissect_xdr_remote_domain_migrate_get_compression_cache_ret, NULL },
    { 300, dissect_xdr_remote_domain_migrate_set_compression_cache_args, NULL, NULL },
    { 301, dissect_xdr_remote_node_device_detach_flags_args, NULL, NULL },
    { 302, dissect_xdr_remote_domain_migrate_begin3_params_args, dissect_xdr_remote_domain_migrate_begin3_params_ret, NULL },
    { 303, dissect_xdr_remote_domain_migrate_prepare3_params_args, dissect_xdr_remote_domain_migrate_prepare3_params_ret, NULL },
    { 304, dissect_xdr_remote_domain_migrate_prepare_tunnel3_params_args, dissect_xdr_remote_domain_migrate_prepare_tunnel3_params_ret, NULL },
    { 305, dissect_xdr_remote_domain_migrate_perform3_params_args, dissect_xdr_remote_domain_migrate_perform3_params_ret, NULL },
    { 306, dissect_xdr_remote_domain_migrate_finish3_params_args, dissect_xdr_remote_domain_migrate_finish3_params_ret, NULL },
    { 307, dissect_xdr_remote_domain_migrate_confirm3_params_args, NULL, NULL },
};
static const value_string remote_procedure_strings[] = {
    { 1, "CONNECT_OPEN" },
    { 2, "CONNECT_CLOSE" },
    { 3, "CONNECT_GET_TYPE" },
    { 4, "CONNECT_GET_VERSION" },
    { 5, "CONNECT_GET_MAX_VCPUS" },
    { 6, "NODE_GET_INFO" },
    { 7, "CONNECT_GET_CAPABILITIES" },
    { 8, "DOMAIN_ATTACH_DEVICE" },
    { 9, "DOMAIN_CREATE" },
    { 10, "DOMAIN_CREATE_XML" },
    { 11, "DOMAIN_DEFINE_XML" },
    { 12, "DOMAIN_DESTROY" },
    { 13, "DOMAIN_DETACH_DEVICE" },
    { 14, "DOMAIN_GET_XML_DESC" },
    { 15, "DOMAIN_GET_AUTOSTART" },
    { 16, "DOMAIN_GET_INFO" },
    { 17, "DOMAIN_GET_MAX_MEMORY" },
    { 18, "DOMAIN_GET_MAX_VCPUS" },
    { 19, "DOMAIN_GET_OS_TYPE" },
    { 20, "DOMAIN_GET_VCPUS" },
    { 21, "CONNECT_LIST_DEFINED_DOMAINS" },
    { 22, "DOMAIN_LOOKUP_BY_ID" },
    { 23, "DOMAIN_LOOKUP_BY_NAME" },
    { 24, "DOMAIN_LOOKUP_BY_UUID" },
    { 25, "CONNECT_NUM_OF_DEFINED_DOMAINS" },
    { 26, "DOMAIN_PIN_VCPU" },
    { 27, "DOMAIN_REBOOT" },
    { 28, "DOMAIN_RESUME" },
    { 29, "DOMAIN_SET_AUTOSTART" },
    { 30, "DOMAIN_SET_MAX_MEMORY" },
    { 31, "DOMAIN_SET_MEMORY" },
    { 32, "DOMAIN_SET_VCPUS" },
    { 33, "DOMAIN_SHUTDOWN" },
    { 34, "DOMAIN_SUSPEND" },
    { 35, "DOMAIN_UNDEFINE" },
    { 36, "CONNECT_LIST_DEFINED_NETWORKS" },
    { 37, "CONNECT_LIST_DOMAINS" },
    { 38, "CONNECT_LIST_NETWORKS" },
    { 39, "NETWORK_CREATE" },
    { 40, "NETWORK_CREATE_XML" },
    { 41, "NETWORK_DEFINE_XML" },
    { 42, "NETWORK_DESTROY" },
    { 43, "NETWORK_GET_XML_DESC" },
    { 44, "NETWORK_GET_AUTOSTART" },
    { 45, "NETWORK_GET_BRIDGE_NAME" },
    { 46, "NETWORK_LOOKUP_BY_NAME" },
    { 47, "NETWORK_LOOKUP_BY_UUID" },
    { 48, "NETWORK_SET_AUTOSTART" },
    { 49, "NETWORK_UNDEFINE" },
    { 50, "CONNECT_NUM_OF_DEFINED_NETWORKS" },
    { 51, "CONNECT_NUM_OF_DOMAINS" },
    { 52, "CONNECT_NUM_OF_NETWORKS" },
    { 53, "DOMAIN_CORE_DUMP" },
    { 54, "DOMAIN_RESTORE" },
    { 55, "DOMAIN_SAVE" },
    { 56, "DOMAIN_GET_SCHEDULER_TYPE" },
    { 57, "DOMAIN_GET_SCHEDULER_PARAMETERS" },
    { 58, "DOMAIN_SET_SCHEDULER_PARAMETERS" },
    { 59, "CONNECT_GET_HOSTNAME" },
    { 60, "CONNECT_SUPPORTS_FEATURE" },
    { 61, "DOMAIN_MIGRATE_PREPARE" },
    { 62, "DOMAIN_MIGRATE_PERFORM" },
    { 63, "DOMAIN_MIGRATE_FINISH" },
    { 64, "DOMAIN_BLOCK_STATS" },
    { 65, "DOMAIN_INTERFACE_STATS" },
    { 66, "AUTH_LIST" },
    { 67, "AUTH_SASL_INIT" },
    { 68, "AUTH_SASL_START" },
    { 69, "AUTH_SASL_STEP" },
    { 70, "AUTH_POLKIT" },
    { 71, "CONNECT_NUM_OF_STORAGE_POOLS" },
    { 72, "CONNECT_LIST_STORAGE_POOLS" },
    { 73, "CONNECT_NUM_OF_DEFINED_STORAGE_POOLS" },
    { 74, "CONNECT_LIST_DEFINED_STORAGE_POOLS" },
    { 75, "CONNECT_FIND_STORAGE_POOL_SOURCES" },
    { 76, "STORAGE_POOL_CREATE_XML" },
    { 77, "STORAGE_POOL_DEFINE_XML" },
    { 78, "STORAGE_POOL_CREATE" },
    { 79, "STORAGE_POOL_BUILD" },
    { 80, "STORAGE_POOL_DESTROY" },
    { 81, "STORAGE_POOL_DELETE" },
    { 82, "STORAGE_POOL_UNDEFINE" },
    { 83, "STORAGE_POOL_REFRESH" },
    { 84, "STORAGE_POOL_LOOKUP_BY_NAME" },
    { 85, "STORAGE_POOL_LOOKUP_BY_UUID" },
    { 86, "STORAGE_POOL_LOOKUP_BY_VOLUME" },
    { 87, "STORAGE_POOL_GET_INFO" },
    { 88, "STORAGE_POOL_GET_XML_DESC" },
    { 89, "STORAGE_POOL_GET_AUTOSTART" },
    { 90, "STORAGE_POOL_SET_AUTOSTART" },
    { 91, "STORAGE_POOL_NUM_OF_VOLUMES" },
    { 92, "STORAGE_POOL_LIST_VOLUMES" },
    { 93, "STORAGE_VOL_CREATE_XML" },
    { 94, "STORAGE_VOL_DELETE" },
    { 95, "STORAGE_VOL_LOOKUP_BY_NAME" },
    { 96, "STORAGE_VOL_LOOKUP_BY_KEY" },
    { 97, "STORAGE_VOL_LOOKUP_BY_PATH" },
    { 98, "STORAGE_VOL_GET_INFO" },
    { 99, "STORAGE_VOL_GET_XML_DESC" },
    { 100, "STORAGE_VOL_GET_PATH" },
    { 101, "NODE_GET_CELLS_FREE_MEMORY" },
    { 102, "NODE_GET_FREE_MEMORY" },
    { 103, "DOMAIN_BLOCK_PEEK" },
    { 104, "DOMAIN_MEMORY_PEEK" },
    { 105, "CONNECT_DOMAIN_EVENT_REGISTER" },
    { 106, "CONNECT_DOMAIN_EVENT_DEREGISTER" },
    { 107, "DOMAIN_EVENT_LIFECYCLE" },
    { 108, "DOMAIN_MIGRATE_PREPARE2" },
    { 109, "DOMAIN_MIGRATE_FINISH2" },
    { 110, "CONNECT_GET_URI" },
    { 111, "NODE_NUM_OF_DEVICES" },
    { 112, "NODE_LIST_DEVICES" },
    { 113, "NODE_DEVICE_LOOKUP_BY_NAME" },
    { 114, "NODE_DEVICE_GET_XML_DESC" },
    { 115, "NODE_DEVICE_GET_PARENT" },
    { 116, "NODE_DEVICE_NUM_OF_CAPS" },
    { 117, "NODE_DEVICE_LIST_CAPS" },
    { 118, "NODE_DEVICE_DETTACH" },
    { 119, "NODE_DEVICE_RE_ATTACH" },
    { 120, "NODE_DEVICE_RESET" },
    { 121, "DOMAIN_GET_SECURITY_LABEL" },
    { 122, "NODE_GET_SECURITY_MODEL" },
    { 123, "NODE_DEVICE_CREATE_XML" },
    { 124, "NODE_DEVICE_DESTROY" },
    { 125, "STORAGE_VOL_CREATE_XML_FROM" },
    { 126, "CONNECT_NUM_OF_INTERFACES" },
    { 127, "CONNECT_LIST_INTERFACES" },
    { 128, "INTERFACE_LOOKUP_BY_NAME" },
    { 129, "INTERFACE_LOOKUP_BY_MAC_STRING" },
    { 130, "INTERFACE_GET_XML_DESC" },
    { 131, "INTERFACE_DEFINE_XML" },
    { 132, "INTERFACE_UNDEFINE" },
    { 133, "INTERFACE_CREATE" },
    { 134, "INTERFACE_DESTROY" },
    { 135, "CONNECT_DOMAIN_XML_FROM_NATIVE" },
    { 136, "CONNECT_DOMAIN_XML_TO_NATIVE" },
    { 137, "CONNECT_NUM_OF_DEFINED_INTERFACES" },
    { 138, "CONNECT_LIST_DEFINED_INTERFACES" },
    { 139, "CONNECT_NUM_OF_SECRETS" },
    { 140, "CONNECT_LIST_SECRETS" },
    { 141, "SECRET_LOOKUP_BY_UUID" },
    { 142, "SECRET_DEFINE_XML" },
    { 143, "SECRET_GET_XML_DESC" },
    { 144, "SECRET_SET_VALUE" },
    { 145, "SECRET_GET_VALUE" },
    { 146, "SECRET_UNDEFINE" },
    { 147, "SECRET_LOOKUP_BY_USAGE" },
    { 148, "DOMAIN_MIGRATE_PREPARE_TUNNEL" },
    { 149, "CONNECT_IS_SECURE" },
    { 150, "DOMAIN_IS_ACTIVE" },
    { 151, "DOMAIN_IS_PERSISTENT" },
    { 152, "NETWORK_IS_ACTIVE" },
    { 153, "NETWORK_IS_PERSISTENT" },
    { 154, "STORAGE_POOL_IS_ACTIVE" },
    { 155, "STORAGE_POOL_IS_PERSISTENT" },
    { 156, "INTERFACE_IS_ACTIVE" },
    { 157, "CONNECT_GET_LIB_VERSION" },
    { 158, "CONNECT_COMPARE_CPU" },
    { 159, "DOMAIN_MEMORY_STATS" },
    { 160, "DOMAIN_ATTACH_DEVICE_FLAGS" },
    { 161, "DOMAIN_DETACH_DEVICE_FLAGS" },
    { 162, "CONNECT_BASELINE_CPU" },
    { 163, "DOMAIN_GET_JOB_INFO" },
    { 164, "DOMAIN_ABORT_JOB" },
    { 165, "STORAGE_VOL_WIPE" },
    { 166, "DOMAIN_MIGRATE_SET_MAX_DOWNTIME" },
    { 167, "CONNECT_DOMAIN_EVENT_REGISTER_ANY" },
    { 168, "CONNECT_DOMAIN_EVENT_DEREGISTER_ANY" },
    { 169, "DOMAIN_EVENT_REBOOT" },
    { 170, "DOMAIN_EVENT_RTC_CHANGE" },
    { 171, "DOMAIN_EVENT_WATCHDOG" },
    { 172, "DOMAIN_EVENT_IO_ERROR" },
    { 173, "DOMAIN_EVENT_GRAPHICS" },
    { 174, "DOMAIN_UPDATE_DEVICE_FLAGS" },
    { 175, "NWFILTER_LOOKUP_BY_NAME" },
    { 176, "NWFILTER_LOOKUP_BY_UUID" },
    { 177, "NWFILTER_GET_XML_DESC" },
    { 178, "CONNECT_NUM_OF_NWFILTERS" },
    { 179, "CONNECT_LIST_NWFILTERS" },
    { 180, "NWFILTER_DEFINE_XML" },
    { 181, "NWFILTER_UNDEFINE" },
    { 182, "DOMAIN_MANAGED_SAVE" },
    { 183, "DOMAIN_HAS_MANAGED_SAVE_IMAGE" },
    { 184, "DOMAIN_MANAGED_SAVE_REMOVE" },
    { 185, "DOMAIN_SNAPSHOT_CREATE_XML" },
    { 186, "DOMAIN_SNAPSHOT_GET_XML_DESC" },
    { 187, "DOMAIN_SNAPSHOT_NUM" },
    { 188, "DOMAIN_SNAPSHOT_LIST_NAMES" },
    { 189, "DOMAIN_SNAPSHOT_LOOKUP_BY_NAME" },
    { 190, "DOMAIN_HAS_CURRENT_SNAPSHOT" },
    { 191, "DOMAIN_SNAPSHOT_CURRENT" },
    { 192, "DOMAIN_REVERT_TO_SNAPSHOT" },
    { 193, "DOMAIN_SNAPSHOT_DELETE" },
    { 194, "DOMAIN_GET_BLOCK_INFO" },
    { 195, "DOMAIN_EVENT_IO_ERROR_REASON" },
    { 196, "DOMAIN_CREATE_WITH_FLAGS" },
    { 197, "DOMAIN_SET_MEMORY_PARAMETERS" },
    { 198, "DOMAIN_GET_MEMORY_PARAMETERS" },
    { 199, "DOMAIN_SET_VCPUS_FLAGS" },
    { 200, "DOMAIN_GET_VCPUS_FLAGS" },
    { 201, "DOMAIN_OPEN_CONSOLE" },
    { 202, "DOMAIN_IS_UPDATED" },
    { 203, "CONNECT_GET_SYSINFO" },
    { 204, "DOMAIN_SET_MEMORY_FLAGS" },
    { 205, "DOMAIN_SET_BLKIO_PARAMETERS" },
    { 206, "DOMAIN_GET_BLKIO_PARAMETERS" },
    { 207, "DOMAIN_MIGRATE_SET_MAX_SPEED" },
    { 208, "STORAGE_VOL_UPLOAD" },
    { 209, "STORAGE_VOL_DOWNLOAD" },
    { 210, "DOMAIN_INJECT_NMI" },
    { 211, "DOMAIN_SCREENSHOT" },
    { 212, "DOMAIN_GET_STATE" },
    { 213, "DOMAIN_MIGRATE_BEGIN3" },
    { 214, "DOMAIN_MIGRATE_PREPARE3" },
    { 215, "DOMAIN_MIGRATE_PREPARE_TUNNEL3" },
    { 216, "DOMAIN_MIGRATE_PERFORM3" },
    { 217, "DOMAIN_MIGRATE_FINISH3" },
    { 218, "DOMAIN_MIGRATE_CONFIRM3" },
    { 219, "DOMAIN_SET_SCHEDULER_PARAMETERS_FLAGS" },
    { 220, "INTERFACE_CHANGE_BEGIN" },
    { 221, "INTERFACE_CHANGE_COMMIT" },
    { 222, "INTERFACE_CHANGE_ROLLBACK" },
    { 223, "DOMAIN_GET_SCHEDULER_PARAMETERS_FLAGS" },
    { 224, "DOMAIN_EVENT_CONTROL_ERROR" },
    { 225, "DOMAIN_PIN_VCPU_FLAGS" },
    { 226, "DOMAIN_SEND_KEY" },
    { 227, "NODE_GET_CPU_STATS" },
    { 228, "NODE_GET_MEMORY_STATS" },
    { 229, "DOMAIN_GET_CONTROL_INFO" },
    { 230, "DOMAIN_GET_VCPU_PIN_INFO" },
    { 231, "DOMAIN_UNDEFINE_FLAGS" },
    { 232, "DOMAIN_SAVE_FLAGS" },
    { 233, "DOMAIN_RESTORE_FLAGS" },
    { 234, "DOMAIN_DESTROY_FLAGS" },
    { 235, "DOMAIN_SAVE_IMAGE_GET_XML_DESC" },
    { 236, "DOMAIN_SAVE_IMAGE_DEFINE_XML" },
    { 237, "DOMAIN_BLOCK_JOB_ABORT" },
    { 238, "DOMAIN_GET_BLOCK_JOB_INFO" },
    { 239, "DOMAIN_BLOCK_JOB_SET_SPEED" },
    { 240, "DOMAIN_BLOCK_PULL" },
    { 241, "DOMAIN_EVENT_BLOCK_JOB" },
    { 242, "DOMAIN_MIGRATE_GET_MAX_SPEED" },
    { 243, "DOMAIN_BLOCK_STATS_FLAGS" },
    { 244, "DOMAIN_SNAPSHOT_GET_PARENT" },
    { 245, "DOMAIN_RESET" },
    { 246, "DOMAIN_SNAPSHOT_NUM_CHILDREN" },
    { 247, "DOMAIN_SNAPSHOT_LIST_CHILDREN_NAMES" },
    { 248, "DOMAIN_EVENT_DISK_CHANGE" },
    { 249, "DOMAIN_OPEN_GRAPHICS" },
    { 250, "NODE_SUSPEND_FOR_DURATION" },
    { 251, "DOMAIN_BLOCK_RESIZE" },
    { 252, "DOMAIN_SET_BLOCK_IO_TUNE" },
    { 253, "DOMAIN_GET_BLOCK_IO_TUNE" },
    { 254, "DOMAIN_SET_NUMA_PARAMETERS" },
    { 255, "DOMAIN_GET_NUMA_PARAMETERS" },
    { 256, "DOMAIN_SET_INTERFACE_PARAMETERS" },
    { 257, "DOMAIN_GET_INTERFACE_PARAMETERS" },
    { 258, "DOMAIN_SHUTDOWN_FLAGS" },
    { 259, "STORAGE_VOL_WIPE_PATTERN" },
    { 260, "STORAGE_VOL_RESIZE" },
    { 261, "DOMAIN_PM_SUSPEND_FOR_DURATION" },
    { 262, "DOMAIN_GET_CPU_STATS" },
    { 263, "DOMAIN_GET_DISK_ERRORS" },
    { 264, "DOMAIN_SET_METADATA" },
    { 265, "DOMAIN_GET_METADATA" },
    { 266, "DOMAIN_BLOCK_REBASE" },
    { 267, "DOMAIN_PM_WAKEUP" },
    { 268, "DOMAIN_EVENT_TRAY_CHANGE" },
    { 269, "DOMAIN_EVENT_PMWAKEUP" },
    { 270, "DOMAIN_EVENT_PMSUSPEND" },
    { 271, "DOMAIN_SNAPSHOT_IS_CURRENT" },
    { 272, "DOMAIN_SNAPSHOT_HAS_METADATA" },
    { 273, "CONNECT_LIST_ALL_DOMAINS" },
    { 274, "DOMAIN_LIST_ALL_SNAPSHOTS" },
    { 275, "DOMAIN_SNAPSHOT_LIST_ALL_CHILDREN" },
    { 276, "DOMAIN_EVENT_BALLOON_CHANGE" },
    { 277, "DOMAIN_GET_HOSTNAME" },
    { 278, "DOMAIN_GET_SECURITY_LABEL_LIST" },
    { 279, "DOMAIN_PIN_EMULATOR" },
    { 280, "DOMAIN_GET_EMULATOR_PIN_INFO" },
    { 281, "CONNECT_LIST_ALL_STORAGE_POOLS" },
    { 282, "STORAGE_POOL_LIST_ALL_VOLUMES" },
    { 283, "CONNECT_LIST_ALL_NETWORKS" },
    { 284, "CONNECT_LIST_ALL_INTERFACES" },
    { 285, "CONNECT_LIST_ALL_NODE_DEVICES" },
    { 286, "CONNECT_LIST_ALL_NWFILTERS" },
    { 287, "CONNECT_LIST_ALL_SECRETS" },
    { 288, "NODE_SET_MEMORY_PARAMETERS" },
    { 289, "NODE_GET_MEMORY_PARAMETERS" },
    { 290, "DOMAIN_BLOCK_COMMIT" },
    { 291, "NETWORK_UPDATE" },
    { 292, "DOMAIN_EVENT_PMSUSPEND_DISK" },
    { 293, "NODE_GET_CPU_MAP" },
    { 294, "DOMAIN_FSTRIM" },
    { 295, "DOMAIN_SEND_PROCESS_SIGNAL" },
    { 296, "DOMAIN_OPEN_CHANNEL" },
    { 297, "NODE_DEVICE_LOOKUP_SCSI_HOST_BY_WWN" },
    { 298, "DOMAIN_GET_JOB_STATS" },
    { 299, "DOMAIN_MIGRATE_GET_COMPRESSION_CACHE" },
    { 300, "DOMAIN_MIGRATE_SET_COMPRESSION_CACHE" },
    { 301, "NODE_DEVICE_DETACH_FLAGS" },
    { 302, "DOMAIN_MIGRATE_BEGIN3_PARAMS" },
    { 303, "DOMAIN_MIGRATE_PREPARE3_PARAMS" },
    { 304, "DOMAIN_MIGRATE_PREPARE_TUNNEL3_PARAMS" },
    { 305, "DOMAIN_MIGRATE_PERFORM3_PARAMS" },
    { 306, "DOMAIN_MIGRATE_FINISH3_PARAMS" },
    { 307, "DOMAIN_MIGRATE_CONFIRM3_PARAMS" },
    { 0, NULL }
};
#endif /* _REMOTE_H_ */
